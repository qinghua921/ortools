// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/routing_parameters.proto

#include "ortools/constraint_solver/routing_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
PROTOBUF_CONSTEXPR RoutingSearchParameters_LocalSearchNeighborhoodOperators::RoutingSearchParameters_LocalSearchNeighborhoodOperators(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.use_relocate_)*/0
  , /*decltype(_impl_.use_relocate_pair_)*/0
  , /*decltype(_impl_.use_relocate_neighbors_)*/0
  , /*decltype(_impl_.use_exchange_)*/0
  , /*decltype(_impl_.use_cross_)*/0
  , /*decltype(_impl_.use_cross_exchange_)*/0
  , /*decltype(_impl_.use_two_opt_)*/0
  , /*decltype(_impl_.use_or_opt_)*/0
  , /*decltype(_impl_.use_lin_kernighan_)*/0
  , /*decltype(_impl_.use_tsp_opt_)*/0
  , /*decltype(_impl_.use_make_active_)*/0
  , /*decltype(_impl_.use_make_inactive_)*/0
  , /*decltype(_impl_.use_make_chain_inactive_)*/0
  , /*decltype(_impl_.use_swap_active_)*/0
  , /*decltype(_impl_.use_extended_swap_active_)*/0
  , /*decltype(_impl_.use_path_lns_)*/0
  , /*decltype(_impl_.use_full_path_lns_)*/0
  , /*decltype(_impl_.use_tsp_lns_)*/0
  , /*decltype(_impl_.use_inactive_lns_)*/0
  , /*decltype(_impl_.use_node_pair_swap_active_)*/0
  , /*decltype(_impl_.use_relocate_and_make_active_)*/0
  , /*decltype(_impl_.use_exchange_pair_)*/0
  , /*decltype(_impl_.use_relocate_expensive_chain_)*/0
  , /*decltype(_impl_.use_light_relocate_pair_)*/0
  , /*decltype(_impl_.use_relocate_subtrip_)*/0
  , /*decltype(_impl_.use_exchange_subtrip_)*/0
  , /*decltype(_impl_.use_global_cheapest_insertion_path_lns_)*/0
  , /*decltype(_impl_.use_local_cheapest_insertion_path_lns_)*/0
  , /*decltype(_impl_.use_global_cheapest_insertion_expensive_chain_lns_)*/0
  , /*decltype(_impl_.use_local_cheapest_insertion_expensive_chain_lns_)*/0
  , /*decltype(_impl_.use_global_cheapest_insertion_close_nodes_lns_)*/0
  , /*decltype(_impl_.use_local_cheapest_insertion_close_nodes_lns_)*/0
  , /*decltype(_impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_)*/0
  , /*decltype(_impl_.use_shortest_path_swap_active_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal() {}
  union {
    RoutingSearchParameters_LocalSearchNeighborhoodOperators _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal _RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_;
PROTOBUF_CONSTEXPR RoutingSearchParameters_ImprovementSearchLimitParameters::RoutingSearchParameters_ImprovementSearchLimitParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.improvement_rate_coefficient_)*/0
  , /*decltype(_impl_.improvement_rate_solutions_distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal() {}
  union {
    RoutingSearchParameters_ImprovementSearchLimitParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal _RoutingSearchParameters_ImprovementSearchLimitParameters_default_instance_;
PROTOBUF_CONSTEXPR RoutingSearchParameters::RoutingSearchParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.log_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_search_operators_)*/nullptr
  , /*decltype(_impl_.time_limit_)*/nullptr
  , /*decltype(_impl_.lns_time_limit_)*/nullptr
  , /*decltype(_impl_.improvement_limit_parameters_)*/nullptr
  , /*decltype(_impl_.sat_parameters_)*/nullptr
  , /*decltype(_impl_.first_solution_strategy_)*/0
  , /*decltype(_impl_.local_search_metaheuristic_)*/0
  , /*decltype(_impl_.guided_local_search_lambda_coefficient_)*/0
  , /*decltype(_impl_.optimization_step_)*/0
  , /*decltype(_impl_.solution_limit_)*/int64_t{0}
  , /*decltype(_impl_.savings_neighbors_ratio_)*/0
  , /*decltype(_impl_.cheapest_insertion_farthest_seeds_ratio_)*/0
  , /*decltype(_impl_.savings_arc_coefficient_)*/0
  , /*decltype(_impl_.number_of_solutions_to_collect_)*/0
  , /*decltype(_impl_.relocate_expensive_chain_num_arcs_to_consider_)*/0
  , /*decltype(_impl_.use_depth_first_search_)*/false
  , /*decltype(_impl_.disable_scheduling_beware_this_may_degrade_performance_)*/false
  , /*decltype(_impl_.use_full_propagation_)*/false
  , /*decltype(_impl_.log_search_)*/false
  , /*decltype(_impl_.use_unfiltered_first_solution_strategy_)*/false
  , /*decltype(_impl_.savings_add_reverse_arcs_)*/false
  , /*decltype(_impl_.savings_parallel_routes_)*/false
  , /*decltype(_impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_)*/false
  , /*decltype(_impl_.cheapest_insertion_first_solution_neighbors_ratio_)*/0
  , /*decltype(_impl_.log_cost_scaling_factor_)*/0
  , /*decltype(_impl_.savings_max_memory_usage_bytes_)*/0
  , /*decltype(_impl_.use_cp_sat_)*/0
  , /*decltype(_impl_.use_cp_)*/0
  , /*decltype(_impl_.log_cost_offset_)*/0
  , /*decltype(_impl_.cheapest_insertion_ls_operator_neighbors_ratio_)*/0
  , /*decltype(_impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_)*/0
  , /*decltype(_impl_.continuous_scheduling_solver_)*/0
  , /*decltype(_impl_.mixed_integer_scheduling_solver_)*/0
  , /*decltype(_impl_.heuristic_close_nodes_lns_num_nodes_)*/0
  , /*decltype(_impl_.cheapest_insertion_add_unperformed_entries_)*/false
  , /*decltype(_impl_.christofides_use_minimum_matching_)*/false
  , /*decltype(_impl_.use_multi_armed_bandit_concatenate_operators_)*/false
  , /*decltype(_impl_.guided_local_search_reset_penalties_on_new_best_solution_)*/false
  , /*decltype(_impl_.cheapest_insertion_first_solution_min_neighbors_)*/0
  , /*decltype(_impl_.multi_armed_bandit_compound_operator_memory_coefficient_)*/0
  , /*decltype(_impl_.multi_armed_bandit_compound_operator_exploration_coefficient_)*/0
  , /*decltype(_impl_.cheapest_insertion_ls_operator_min_neighbors_)*/0
  , /*decltype(_impl_.use_generalized_cp_sat_)*/0
  , /*decltype(_impl_.local_cheapest_insertion_pickup_delivery_strategy_)*/0
  , /*decltype(_impl_.fallback_to_cp_sat_size_threshold_)*/0} {}
struct RoutingSearchParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSearchParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSearchParametersDefaultTypeInternal() {}
  union {
    RoutingSearchParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSearchParametersDefaultTypeInternal _RoutingSearchParameters_default_instance_;
PROTOBUF_CONSTEXPR RoutingModelParameters::RoutingModelParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.solver_parameters_)*/nullptr
  , /*decltype(_impl_.reduce_vehicle_cost_model_)*/false
  , /*decltype(_impl_.max_callback_cache_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingModelParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingModelParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingModelParametersDefaultTypeInternal() {}
  union {
    RoutingModelParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingModelParametersDefaultTypeInternal _RoutingModelParameters_default_instance_;
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_light_relocate_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_neighbors_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_subtrip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_exchange_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_exchange_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_exchange_subtrip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_cross_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_cross_exchange_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_expensive_chain_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_two_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_or_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_lin_kernighan_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_tsp_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_make_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_and_make_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_make_inactive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_make_chain_inactive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_extended_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_shortest_path_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_node_pair_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_full_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_tsp_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_inactive_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_global_cheapest_insertion_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_local_cheapest_insertion_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_global_cheapest_insertion_expensive_chain_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_local_cheapest_insertion_expensive_chain_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_global_cheapest_insertion_close_nodes_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_local_cheapest_insertion_close_nodes_lns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters, _impl_.improvement_rate_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters, _impl_.improvement_rate_solutions_distance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.first_solution_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_unfiltered_first_solution_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.savings_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.savings_max_memory_usage_bytes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.savings_add_reverse_arcs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.savings_arc_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.savings_parallel_routes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_farthest_seeds_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_first_solution_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_first_solution_min_neighbors_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_ls_operator_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_ls_operator_min_neighbors_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.cheapest_insertion_add_unperformed_entries_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.local_cheapest_insertion_pickup_delivery_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.christofides_use_minimum_matching_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.local_search_operators_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_multi_armed_bandit_concatenate_operators_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.multi_armed_bandit_compound_operator_memory_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.multi_armed_bandit_compound_operator_exploration_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.relocate_expensive_chain_num_arcs_to_consider_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.heuristic_close_nodes_lns_num_nodes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.local_search_metaheuristic_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.guided_local_search_lambda_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.guided_local_search_reset_penalties_on_new_best_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_depth_first_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_cp_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_cp_sat_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_generalized_cp_sat_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.sat_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.fallback_to_cp_sat_size_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.continuous_scheduling_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.mixed_integer_scheduling_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.disable_scheduling_beware_this_may_degrade_performance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.optimization_step_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.number_of_solutions_to_collect_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.solution_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.lns_time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.improvement_limit_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.use_full_propagation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.log_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.log_cost_scaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.log_cost_offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _impl_.log_tag_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, _impl_.solver_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, _impl_.reduce_vehicle_cost_model_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, _impl_.max_callback_cache_size_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators)},
  { 40, -1, -1, sizeof(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters)},
  { 48, 100, -1, sizeof(::operations_research::RoutingSearchParameters)},
  { 146, -1, -1, sizeof(::operations_research::RoutingModelParameters)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_._instance,
  &::operations_research::_RoutingSearchParameters_ImprovementSearchLimitParameters_default_instance_._instance,
  &::operations_research::_RoutingSearchParameters_default_instance_._instance,
  &::operations_research::_RoutingModelParameters_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2ortools/constraint_solver/routing_para"
  "meters.proto\022\023operations_research\032\036googl"
  "e/protobuf/duration.proto\032-ortools/const"
  "raint_solver/routing_enums.proto\0321ortool"
  "s/constraint_solver/solver_parameters.pr"
  "oto\032 ortools/sat/sat_parameters.proto\032#o"
  "rtools/util/optional_boolean.proto\"\351*\n\027R"
  "outingSearchParameters\022Q\n\027first_solution"
  "_strategy\030\001 \001(\01620.operations_research.Fi"
  "rstSolutionStrategy.Value\022.\n&use_unfilte"
  "red_first_solution_strategy\030\002 \001(\010\022\037\n\027sav"
  "ings_neighbors_ratio\030\016 \001(\001\022&\n\036savings_ma"
  "x_memory_usage_bytes\030\027 \001(\001\022 \n\030savings_ad"
  "d_reverse_arcs\030\017 \001(\010\022\037\n\027savings_arc_coef"
  "ficient\030\022 \001(\001\022\037\n\027savings_parallel_routes"
  "\030\023 \001(\010\022/\n\'cheapest_insertion_farthest_se"
  "eds_ratio\030\020 \001(\001\0229\n1cheapest_insertion_fi"
  "rst_solution_neighbors_ratio\030\025 \001(\001\0227\n/ch"
  "eapest_insertion_first_solution_min_neig"
  "hbors\030, \001(\005\0226\n.cheapest_insertion_ls_ope"
  "rator_neighbors_ratio\030\037 \001(\001\0224\n,cheapest_"
  "insertion_ls_operator_min_neighbors\030- \001("
  "\005\022P\nHcheapest_insertion_first_solution_u"
  "se_neighbors_ratio_for_initialization\030. "
  "\001(\010\0222\n*cheapest_insertion_add_unperforme"
  "d_entries\030( \001(\010\022}\n1local_cheapest_insert"
  "ion_pickup_delivery_strategy\0301 \001(\0162B.ope"
  "rations_research.RoutingSearchParameters"
  ".PairInsertionStrategy\022)\n!christofides_u"
  "se_minimum_matching\030\036 \001(\010\022m\n\026local_searc"
  "h_operators\030\003 \001(\0132M.operations_research."
  "RoutingSearchParameters.LocalSearchNeigh"
  "borhoodOperators\0224\n,use_multi_armed_band"
  "it_concatenate_operators\030) \001(\010\022\?\n7multi_"
  "armed_bandit_compound_operator_memory_co"
  "efficient\030* \001(\001\022D\n<multi_armed_bandit_co"
  "mpound_operator_exploration_coefficient\030"
  "+ \001(\001\0225\n-relocate_expensive_chain_num_ar"
  "cs_to_consider\030\024 \001(\005\022:\n2heuristic_expens"
  "ive_chain_lns_num_arcs_to_consider\030  \001(\005"
  "\022+\n#heuristic_close_nodes_lns_num_nodes\030"
  "# \001(\005\022W\n\032local_search_metaheuristic\030\004 \001("
  "\01623.operations_research.LocalSearchMetah"
  "euristic.Value\022.\n&guided_local_search_la"
  "mbda_coefficient\030\005 \001(\001\022@\n8guided_local_s"
  "earch_reset_penalties_on_new_best_soluti"
  "on\0303 \001(\010\022\036\n\026use_depth_first_search\030\006 \001(\010"
  "\0224\n\006use_cp\030\034 \001(\0162$.operations_research.O"
  "ptionalBoolean\0228\n\nuse_cp_sat\030\033 \001(\0162$.ope"
  "rations_research.OptionalBoolean\022D\n\026use_"
  "generalized_cp_sat\030/ \001(\0162$.operations_re"
  "search.OptionalBoolean\022>\n\016sat_parameters"
  "\0300 \001(\0132&.operations_research.sat.SatPara"
  "meters\022)\n!fallback_to_cp_sat_size_thresh"
  "old\0304 \001(\005\022c\n\034continuous_scheduling_solve"
  "r\030! \001(\0162=.operations_research.RoutingSea"
  "rchParameters.SchedulingSolver\022f\n\037mixed_"
  "integer_scheduling_solver\030\" \001(\0162=.operat"
  "ions_research.RoutingSearchParameters.Sc"
  "hedulingSolver\022C\n6disable_scheduling_bew"
  "are_this_may_degrade_performance\0302 \001(\010H\000"
  "\210\001\001\022\031\n\021optimization_step\030\007 \001(\001\022&\n\036number"
  "_of_solutions_to_collect\030\021 \001(\005\022\026\n\016soluti"
  "on_limit\030\010 \001(\003\022-\n\ntime_limit\030\t \001(\0132\031.goo"
  "gle.protobuf.Duration\0221\n\016lns_time_limit\030"
  "\n \001(\0132\031.google.protobuf.Duration\022s\n\034impr"
  "ovement_limit_parameters\030% \001(\0132M.operati"
  "ons_research.RoutingSearchParameters.Imp"
  "rovementSearchLimitParameters\022\034\n\024use_ful"
  "l_propagation\030\013 \001(\010\022\022\n\nlog_search\030\r \001(\010\022"
  "\037\n\027log_cost_scaling_factor\030\026 \001(\001\022\027\n\017log_"
  "cost_offset\030\035 \001(\001\022\017\n\007log_tag\030$ \001(\t\032\244\023\n L"
  "ocalSearchNeighborhoodOperators\022:\n\014use_r"
  "elocate\030\001 \001(\0162$.operations_research.Opti"
  "onalBoolean\022\?\n\021use_relocate_pair\030\002 \001(\0162$"
  ".operations_research.OptionalBoolean\022E\n\027"
  "use_light_relocate_pair\030\030 \001(\0162$.operatio"
  "ns_research.OptionalBoolean\022D\n\026use_reloc"
  "ate_neighbors\030\003 \001(\0162$.operations_researc"
  "h.OptionalBoolean\022B\n\024use_relocate_subtri"
  "p\030\031 \001(\0162$.operations_research.OptionalBo"
  "olean\022:\n\014use_exchange\030\004 \001(\0162$.operations"
  "_research.OptionalBoolean\022\?\n\021use_exchang"
  "e_pair\030\026 \001(\0162$.operations_research.Optio"
  "nalBoolean\022B\n\024use_exchange_subtrip\030\032 \001(\016"
  "2$.operations_research.OptionalBoolean\0227"
  "\n\tuse_cross\030\005 \001(\0162$.operations_research."
  "OptionalBoolean\022@\n\022use_cross_exchange\030\006 "
  "\001(\0162$.operations_research.OptionalBoolea"
  "n\022J\n\034use_relocate_expensive_chain\030\027 \001(\0162"
  "$.operations_research.OptionalBoolean\0229\n"
  "\013use_two_opt\030\007 \001(\0162$.operations_research"
  ".OptionalBoolean\0228\n\nuse_or_opt\030\010 \001(\0162$.o"
  "perations_research.OptionalBoolean\022\?\n\021us"
  "e_lin_kernighan\030\t \001(\0162$.operations_resea"
  "rch.OptionalBoolean\0229\n\013use_tsp_opt\030\n \001(\016"
  "2$.operations_research.OptionalBoolean\022="
  "\n\017use_make_active\030\013 \001(\0162$.operations_res"
  "earch.OptionalBoolean\022J\n\034use_relocate_an"
  "d_make_active\030\025 \001(\0162$.operations_researc"
  "h.OptionalBoolean\022\?\n\021use_make_inactive\030\014"
  " \001(\0162$.operations_research.OptionalBoole"
  "an\022E\n\027use_make_chain_inactive\030\r \001(\0162$.op"
  "erations_research.OptionalBoolean\022=\n\017use"
  "_swap_active\030\016 \001(\0162$.operations_research"
  ".OptionalBoolean\022F\n\030use_extended_swap_ac"
  "tive\030\017 \001(\0162$.operations_research.Optiona"
  "lBoolean\022K\n\035use_shortest_path_swap_activ"
  "e\030\" \001(\0162$.operations_research.OptionalBo"
  "olean\022G\n\031use_node_pair_swap_active\030\024 \001(\016"
  "2$.operations_research.OptionalBoolean\022:"
  "\n\014use_path_lns\030\020 \001(\0162$.operations_resear"
  "ch.OptionalBoolean\022\?\n\021use_full_path_lns\030"
  "\021 \001(\0162$.operations_research.OptionalBool"
  "ean\0229\n\013use_tsp_lns\030\022 \001(\0162$.operations_re"
  "search.OptionalBoolean\022>\n\020use_inactive_l"
  "ns\030\023 \001(\0162$.operations_research.OptionalB"
  "oolean\022T\n&use_global_cheapest_insertion_"
  "path_lns\030\033 \001(\0162$.operations_research.Opt"
  "ionalBoolean\022S\n%use_local_cheapest_inser"
  "tion_path_lns\030\034 \001(\0162$.operations_researc"
  "h.OptionalBoolean\022l\n>use_relocate_path_g"
  "lobal_cheapest_insertion_insert_unperfor"
  "med\030! \001(\0162$.operations_research.Optional"
  "Boolean\022_\n1use_global_cheapest_insertion"
  "_expensive_chain_lns\030\035 \001(\0162$.operations_"
  "research.OptionalBoolean\022^\n0use_local_ch"
  "eapest_insertion_expensive_chain_lns\030\036 \001"
  "(\0162$.operations_research.OptionalBoolean"
  "\022[\n-use_global_cheapest_insertion_close_"
  "nodes_lns\030\037 \001(\0162$.operations_research.Op"
  "tionalBoolean\022Z\n,use_local_cheapest_inse"
  "rtion_close_nodes_lns\030  \001(\0162$.operations"
  "_research.OptionalBoolean\032u\n Improvement"
  "SearchLimitParameters\022$\n\034improvement_rat"
  "e_coefficient\030& \001(\001\022+\n#improvement_rate_"
  "solutions_distance\030\' \001(\005\"\222\001\n\025PairInserti"
  "onStrategy\022\r\n\tAUTOMATIC\020\000\022\"\n\036BEST_PICKUP"
  "_THEN_BEST_DELIVERY\020\001\022\035\n\031BEST_PICKUP_DEL"
  "IVERY_PAIR\020\002\022\'\n#BEST_PICKUP_DELIVERY_PAI"
  "R_MULTITOUR\020\003\"T\n\020SchedulingSolver\022\024\n\020SCH"
  "EDULING_UNSET\020\000\022\023\n\017SCHEDULING_GLOP\020\001\022\025\n\021"
  "SCHEDULING_CP_SAT\020\002B9\n7_disable_scheduli"
  "ng_beware_this_may_degrade_performance\"\250"
  "\001\n\026RoutingModelParameters\022J\n\021solver_para"
  "meters\030\001 \001(\0132/.operations_research.Const"
  "raintSolverParameters\022!\n\031reduce_vehicle_"
  "cost_model\030\002 \001(\010\022\037\n\027max_callback_cache_s"
  "ize\030\003 \001(\005BI\n#com.google.ortools.constrai"
  "ntsolverP\001\252\002\037Google.OrTools.ConstraintSo"
  "lverb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto,
  &::descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto,
  &::descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto,
  &::descriptor_table_ortools_2futil_2foptional_5fboolean_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto = {
    false, false, 6012, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto,
    "ortools/constraint_solver/routing_parameters.proto",
    &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once, descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto::offsets,
    file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto,
    file_level_service_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_getter() {
  return &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto(&descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingSearchParameters_PairInsertionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[0];
}
bool RoutingSearchParameters_PairInsertionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::AUTOMATIC;
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::BEST_PICKUP_THEN_BEST_DELIVERY;
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::BEST_PICKUP_DELIVERY_PAIR;
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::BEST_PICKUP_DELIVERY_PAIR_MULTITOUR;
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::PairInsertionStrategy_MIN;
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::PairInsertionStrategy_MAX;
constexpr int RoutingSearchParameters::PairInsertionStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingSearchParameters_SchedulingSolver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[1];
}
bool RoutingSearchParameters_SchedulingSolver_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SCHEDULING_UNSET;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SCHEDULING_GLOP;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SCHEDULING_CP_SAT;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SchedulingSolver_MIN;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SchedulingSolver_MAX;
constexpr int RoutingSearchParameters::SchedulingSolver_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RoutingSearchParameters_LocalSearchNeighborhoodOperators::_Internal {
 public:
};

RoutingSearchParameters_LocalSearchNeighborhoodOperators::RoutingSearchParameters_LocalSearchNeighborhoodOperators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
}
RoutingSearchParameters_LocalSearchNeighborhoodOperators::RoutingSearchParameters_LocalSearchNeighborhoodOperators(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSearchParameters_LocalSearchNeighborhoodOperators* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.use_relocate_){}
    , decltype(_impl_.use_relocate_pair_){}
    , decltype(_impl_.use_relocate_neighbors_){}
    , decltype(_impl_.use_exchange_){}
    , decltype(_impl_.use_cross_){}
    , decltype(_impl_.use_cross_exchange_){}
    , decltype(_impl_.use_two_opt_){}
    , decltype(_impl_.use_or_opt_){}
    , decltype(_impl_.use_lin_kernighan_){}
    , decltype(_impl_.use_tsp_opt_){}
    , decltype(_impl_.use_make_active_){}
    , decltype(_impl_.use_make_inactive_){}
    , decltype(_impl_.use_make_chain_inactive_){}
    , decltype(_impl_.use_swap_active_){}
    , decltype(_impl_.use_extended_swap_active_){}
    , decltype(_impl_.use_path_lns_){}
    , decltype(_impl_.use_full_path_lns_){}
    , decltype(_impl_.use_tsp_lns_){}
    , decltype(_impl_.use_inactive_lns_){}
    , decltype(_impl_.use_node_pair_swap_active_){}
    , decltype(_impl_.use_relocate_and_make_active_){}
    , decltype(_impl_.use_exchange_pair_){}
    , decltype(_impl_.use_relocate_expensive_chain_){}
    , decltype(_impl_.use_light_relocate_pair_){}
    , decltype(_impl_.use_relocate_subtrip_){}
    , decltype(_impl_.use_exchange_subtrip_){}
    , decltype(_impl_.use_global_cheapest_insertion_path_lns_){}
    , decltype(_impl_.use_local_cheapest_insertion_path_lns_){}
    , decltype(_impl_.use_global_cheapest_insertion_expensive_chain_lns_){}
    , decltype(_impl_.use_local_cheapest_insertion_expensive_chain_lns_){}
    , decltype(_impl_.use_global_cheapest_insertion_close_nodes_lns_){}
    , decltype(_impl_.use_local_cheapest_insertion_close_nodes_lns_){}
    , decltype(_impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_){}
    , decltype(_impl_.use_shortest_path_swap_active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.use_relocate_, &from._impl_.use_relocate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_shortest_path_swap_active_) -
    reinterpret_cast<char*>(&_impl_.use_relocate_)) + sizeof(_impl_.use_shortest_path_swap_active_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
}

inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.use_relocate_){0}
    , decltype(_impl_.use_relocate_pair_){0}
    , decltype(_impl_.use_relocate_neighbors_){0}
    , decltype(_impl_.use_exchange_){0}
    , decltype(_impl_.use_cross_){0}
    , decltype(_impl_.use_cross_exchange_){0}
    , decltype(_impl_.use_two_opt_){0}
    , decltype(_impl_.use_or_opt_){0}
    , decltype(_impl_.use_lin_kernighan_){0}
    , decltype(_impl_.use_tsp_opt_){0}
    , decltype(_impl_.use_make_active_){0}
    , decltype(_impl_.use_make_inactive_){0}
    , decltype(_impl_.use_make_chain_inactive_){0}
    , decltype(_impl_.use_swap_active_){0}
    , decltype(_impl_.use_extended_swap_active_){0}
    , decltype(_impl_.use_path_lns_){0}
    , decltype(_impl_.use_full_path_lns_){0}
    , decltype(_impl_.use_tsp_lns_){0}
    , decltype(_impl_.use_inactive_lns_){0}
    , decltype(_impl_.use_node_pair_swap_active_){0}
    , decltype(_impl_.use_relocate_and_make_active_){0}
    , decltype(_impl_.use_exchange_pair_){0}
    , decltype(_impl_.use_relocate_expensive_chain_){0}
    , decltype(_impl_.use_light_relocate_pair_){0}
    , decltype(_impl_.use_relocate_subtrip_){0}
    , decltype(_impl_.use_exchange_subtrip_){0}
    , decltype(_impl_.use_global_cheapest_insertion_path_lns_){0}
    , decltype(_impl_.use_local_cheapest_insertion_path_lns_){0}
    , decltype(_impl_.use_global_cheapest_insertion_expensive_chain_lns_){0}
    , decltype(_impl_.use_local_cheapest_insertion_expensive_chain_lns_){0}
    , decltype(_impl_.use_global_cheapest_insertion_close_nodes_lns_){0}
    , decltype(_impl_.use_local_cheapest_insertion_close_nodes_lns_){0}
    , decltype(_impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_){0}
    , decltype(_impl_.use_shortest_path_swap_active_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSearchParameters_LocalSearchNeighborhoodOperators::~RoutingSearchParameters_LocalSearchNeighborhoodOperators() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.use_relocate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_shortest_path_swap_active_) -
      reinterpret_cast<char*>(&_impl_.use_relocate_)) + sizeof(_impl_.use_shortest_path_swap_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSearchParameters_LocalSearchNeighborhoodOperators::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.OptionalBoolean use_relocate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_neighbors(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cross = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cross(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cross_exchange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cross_exchange(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_two_opt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_two_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_or_opt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_or_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_lin_kernighan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_lin_kernighan(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_tsp_opt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_tsp_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_active = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_inactive = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_inactive(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_chain_inactive(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_swap_active = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_extended_swap_active = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_extended_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_path_lns = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_full_path_lns = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_full_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_tsp_lns = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_tsp_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_inactive_lns = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_inactive_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_node_pair_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_and_make_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange_pair = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_expensive_chain(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_light_relocate_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_subtrip(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange_subtrip(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_global_cheapest_insertion_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_local_cheapest_insertion_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_global_cheapest_insertion_expensive_chain_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_local_cheapest_insertion_expensive_chain_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_global_cheapest_insertion_close_nodes_lns = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_global_cheapest_insertion_close_nodes_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_local_cheapest_insertion_close_nodes_lns = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_local_cheapest_insertion_close_nodes_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_path_global_cheapest_insertion_insert_unperformed(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_shortest_path_swap_active = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_shortest_path_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSearchParameters_LocalSearchNeighborhoodOperators::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.OptionalBoolean use_relocate = 1;
  if (this->_internal_use_relocate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_use_relocate(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_pair = 2;
  if (this->_internal_use_relocate_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_use_relocate_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
  if (this->_internal_use_relocate_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_use_relocate_neighbors(), target);
  }

  // .operations_research.OptionalBoolean use_exchange = 4;
  if (this->_internal_use_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_use_exchange(), target);
  }

  // .operations_research.OptionalBoolean use_cross = 5;
  if (this->_internal_use_cross() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_use_cross(), target);
  }

  // .operations_research.OptionalBoolean use_cross_exchange = 6;
  if (this->_internal_use_cross_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_use_cross_exchange(), target);
  }

  // .operations_research.OptionalBoolean use_two_opt = 7;
  if (this->_internal_use_two_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_use_two_opt(), target);
  }

  // .operations_research.OptionalBoolean use_or_opt = 8;
  if (this->_internal_use_or_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_use_or_opt(), target);
  }

  // .operations_research.OptionalBoolean use_lin_kernighan = 9;
  if (this->_internal_use_lin_kernighan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_use_lin_kernighan(), target);
  }

  // .operations_research.OptionalBoolean use_tsp_opt = 10;
  if (this->_internal_use_tsp_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_use_tsp_opt(), target);
  }

  // .operations_research.OptionalBoolean use_make_active = 11;
  if (this->_internal_use_make_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_use_make_active(), target);
  }

  // .operations_research.OptionalBoolean use_make_inactive = 12;
  if (this->_internal_use_make_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_use_make_inactive(), target);
  }

  // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
  if (this->_internal_use_make_chain_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_use_make_chain_inactive(), target);
  }

  // .operations_research.OptionalBoolean use_swap_active = 14;
  if (this->_internal_use_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_use_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_extended_swap_active = 15;
  if (this->_internal_use_extended_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_use_extended_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_path_lns = 16;
  if (this->_internal_use_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_use_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_full_path_lns = 17;
  if (this->_internal_use_full_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_use_full_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_tsp_lns = 18;
  if (this->_internal_use_tsp_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_use_tsp_lns(), target);
  }

  // .operations_research.OptionalBoolean use_inactive_lns = 19;
  if (this->_internal_use_inactive_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_use_inactive_lns(), target);
  }

  // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
  if (this->_internal_use_node_pair_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_use_node_pair_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
  if (this->_internal_use_relocate_and_make_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_use_relocate_and_make_active(), target);
  }

  // .operations_research.OptionalBoolean use_exchange_pair = 22;
  if (this->_internal_use_exchange_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_use_exchange_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
  if (this->_internal_use_relocate_expensive_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_use_relocate_expensive_chain(), target);
  }

  // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
  if (this->_internal_use_light_relocate_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_use_light_relocate_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
  if (this->_internal_use_relocate_subtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_use_relocate_subtrip(), target);
  }

  // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
  if (this->_internal_use_exchange_subtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_use_exchange_subtrip(), target);
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
  if (this->_internal_use_global_cheapest_insertion_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_use_global_cheapest_insertion_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
  if (this->_internal_use_local_cheapest_insertion_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_use_local_cheapest_insertion_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
  if (this->_internal_use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_use_global_cheapest_insertion_expensive_chain_lns(), target);
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
  if (this->_internal_use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_use_local_cheapest_insertion_expensive_chain_lns(), target);
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_close_nodes_lns = 31;
  if (this->_internal_use_global_cheapest_insertion_close_nodes_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_use_global_cheapest_insertion_close_nodes_lns(), target);
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_close_nodes_lns = 32;
  if (this->_internal_use_local_cheapest_insertion_close_nodes_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_use_local_cheapest_insertion_close_nodes_lns(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed = 33;
  if (this->_internal_use_relocate_path_global_cheapest_insertion_insert_unperformed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_use_relocate_path_global_cheapest_insertion_insert_unperformed(), target);
  }

  // .operations_research.OptionalBoolean use_shortest_path_swap_active = 34;
  if (this->_internal_use_shortest_path_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_use_shortest_path_swap_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  return target;
}

size_t RoutingSearchParameters_LocalSearchNeighborhoodOperators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.OptionalBoolean use_relocate = 1;
  if (this->_internal_use_relocate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate());
  }

  // .operations_research.OptionalBoolean use_relocate_pair = 2;
  if (this->_internal_use_relocate_pair() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
  if (this->_internal_use_relocate_neighbors() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_neighbors());
  }

  // .operations_research.OptionalBoolean use_exchange = 4;
  if (this->_internal_use_exchange() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_exchange());
  }

  // .operations_research.OptionalBoolean use_cross = 5;
  if (this->_internal_use_cross() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_cross());
  }

  // .operations_research.OptionalBoolean use_cross_exchange = 6;
  if (this->_internal_use_cross_exchange() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_cross_exchange());
  }

  // .operations_research.OptionalBoolean use_two_opt = 7;
  if (this->_internal_use_two_opt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_two_opt());
  }

  // .operations_research.OptionalBoolean use_or_opt = 8;
  if (this->_internal_use_or_opt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_or_opt());
  }

  // .operations_research.OptionalBoolean use_lin_kernighan = 9;
  if (this->_internal_use_lin_kernighan() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_lin_kernighan());
  }

  // .operations_research.OptionalBoolean use_tsp_opt = 10;
  if (this->_internal_use_tsp_opt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_tsp_opt());
  }

  // .operations_research.OptionalBoolean use_make_active = 11;
  if (this->_internal_use_make_active() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_make_active());
  }

  // .operations_research.OptionalBoolean use_make_inactive = 12;
  if (this->_internal_use_make_inactive() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_make_inactive());
  }

  // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
  if (this->_internal_use_make_chain_inactive() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_make_chain_inactive());
  }

  // .operations_research.OptionalBoolean use_swap_active = 14;
  if (this->_internal_use_swap_active() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_swap_active());
  }

  // .operations_research.OptionalBoolean use_extended_swap_active = 15;
  if (this->_internal_use_extended_swap_active() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_extended_swap_active());
  }

  // .operations_research.OptionalBoolean use_path_lns = 16;
  if (this->_internal_use_path_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_path_lns());
  }

  // .operations_research.OptionalBoolean use_full_path_lns = 17;
  if (this->_internal_use_full_path_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_full_path_lns());
  }

  // .operations_research.OptionalBoolean use_tsp_lns = 18;
  if (this->_internal_use_tsp_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_tsp_lns());
  }

  // .operations_research.OptionalBoolean use_inactive_lns = 19;
  if (this->_internal_use_inactive_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_inactive_lns());
  }

  // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
  if (this->_internal_use_node_pair_swap_active() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_node_pair_swap_active());
  }

  // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
  if (this->_internal_use_relocate_and_make_active() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_and_make_active());
  }

  // .operations_research.OptionalBoolean use_exchange_pair = 22;
  if (this->_internal_use_exchange_pair() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_exchange_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
  if (this->_internal_use_relocate_expensive_chain() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_expensive_chain());
  }

  // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
  if (this->_internal_use_light_relocate_pair() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_light_relocate_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
  if (this->_internal_use_relocate_subtrip() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_subtrip());
  }

  // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
  if (this->_internal_use_exchange_subtrip() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_exchange_subtrip());
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
  if (this->_internal_use_global_cheapest_insertion_path_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_global_cheapest_insertion_path_lns());
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
  if (this->_internal_use_local_cheapest_insertion_path_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_local_cheapest_insertion_path_lns());
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
  if (this->_internal_use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_global_cheapest_insertion_expensive_chain_lns());
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
  if (this->_internal_use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_local_cheapest_insertion_expensive_chain_lns());
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_close_nodes_lns = 31;
  if (this->_internal_use_global_cheapest_insertion_close_nodes_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_global_cheapest_insertion_close_nodes_lns());
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_close_nodes_lns = 32;
  if (this->_internal_use_local_cheapest_insertion_close_nodes_lns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_local_cheapest_insertion_close_nodes_lns());
  }

  // .operations_research.OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed = 33;
  if (this->_internal_use_relocate_path_global_cheapest_insertion_insert_unperformed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_relocate_path_global_cheapest_insertion_insert_unperformed());
  }

  // .operations_research.OptionalBoolean use_shortest_path_swap_active = 34;
  if (this->_internal_use_shortest_path_swap_active() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_shortest_path_swap_active());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSearchParameters_LocalSearchNeighborhoodOperators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSearchParameters_LocalSearchNeighborhoodOperators::GetClassData() const { return &_class_data_; }


void RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(&to_msg);
  auto& from = static_cast<const RoutingSearchParameters_LocalSearchNeighborhoodOperators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_use_relocate() != 0) {
    _this->_internal_set_use_relocate(from._internal_use_relocate());
  }
  if (from._internal_use_relocate_pair() != 0) {
    _this->_internal_set_use_relocate_pair(from._internal_use_relocate_pair());
  }
  if (from._internal_use_relocate_neighbors() != 0) {
    _this->_internal_set_use_relocate_neighbors(from._internal_use_relocate_neighbors());
  }
  if (from._internal_use_exchange() != 0) {
    _this->_internal_set_use_exchange(from._internal_use_exchange());
  }
  if (from._internal_use_cross() != 0) {
    _this->_internal_set_use_cross(from._internal_use_cross());
  }
  if (from._internal_use_cross_exchange() != 0) {
    _this->_internal_set_use_cross_exchange(from._internal_use_cross_exchange());
  }
  if (from._internal_use_two_opt() != 0) {
    _this->_internal_set_use_two_opt(from._internal_use_two_opt());
  }
  if (from._internal_use_or_opt() != 0) {
    _this->_internal_set_use_or_opt(from._internal_use_or_opt());
  }
  if (from._internal_use_lin_kernighan() != 0) {
    _this->_internal_set_use_lin_kernighan(from._internal_use_lin_kernighan());
  }
  if (from._internal_use_tsp_opt() != 0) {
    _this->_internal_set_use_tsp_opt(from._internal_use_tsp_opt());
  }
  if (from._internal_use_make_active() != 0) {
    _this->_internal_set_use_make_active(from._internal_use_make_active());
  }
  if (from._internal_use_make_inactive() != 0) {
    _this->_internal_set_use_make_inactive(from._internal_use_make_inactive());
  }
  if (from._internal_use_make_chain_inactive() != 0) {
    _this->_internal_set_use_make_chain_inactive(from._internal_use_make_chain_inactive());
  }
  if (from._internal_use_swap_active() != 0) {
    _this->_internal_set_use_swap_active(from._internal_use_swap_active());
  }
  if (from._internal_use_extended_swap_active() != 0) {
    _this->_internal_set_use_extended_swap_active(from._internal_use_extended_swap_active());
  }
  if (from._internal_use_path_lns() != 0) {
    _this->_internal_set_use_path_lns(from._internal_use_path_lns());
  }
  if (from._internal_use_full_path_lns() != 0) {
    _this->_internal_set_use_full_path_lns(from._internal_use_full_path_lns());
  }
  if (from._internal_use_tsp_lns() != 0) {
    _this->_internal_set_use_tsp_lns(from._internal_use_tsp_lns());
  }
  if (from._internal_use_inactive_lns() != 0) {
    _this->_internal_set_use_inactive_lns(from._internal_use_inactive_lns());
  }
  if (from._internal_use_node_pair_swap_active() != 0) {
    _this->_internal_set_use_node_pair_swap_active(from._internal_use_node_pair_swap_active());
  }
  if (from._internal_use_relocate_and_make_active() != 0) {
    _this->_internal_set_use_relocate_and_make_active(from._internal_use_relocate_and_make_active());
  }
  if (from._internal_use_exchange_pair() != 0) {
    _this->_internal_set_use_exchange_pair(from._internal_use_exchange_pair());
  }
  if (from._internal_use_relocate_expensive_chain() != 0) {
    _this->_internal_set_use_relocate_expensive_chain(from._internal_use_relocate_expensive_chain());
  }
  if (from._internal_use_light_relocate_pair() != 0) {
    _this->_internal_set_use_light_relocate_pair(from._internal_use_light_relocate_pair());
  }
  if (from._internal_use_relocate_subtrip() != 0) {
    _this->_internal_set_use_relocate_subtrip(from._internal_use_relocate_subtrip());
  }
  if (from._internal_use_exchange_subtrip() != 0) {
    _this->_internal_set_use_exchange_subtrip(from._internal_use_exchange_subtrip());
  }
  if (from._internal_use_global_cheapest_insertion_path_lns() != 0) {
    _this->_internal_set_use_global_cheapest_insertion_path_lns(from._internal_use_global_cheapest_insertion_path_lns());
  }
  if (from._internal_use_local_cheapest_insertion_path_lns() != 0) {
    _this->_internal_set_use_local_cheapest_insertion_path_lns(from._internal_use_local_cheapest_insertion_path_lns());
  }
  if (from._internal_use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    _this->_internal_set_use_global_cheapest_insertion_expensive_chain_lns(from._internal_use_global_cheapest_insertion_expensive_chain_lns());
  }
  if (from._internal_use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    _this->_internal_set_use_local_cheapest_insertion_expensive_chain_lns(from._internal_use_local_cheapest_insertion_expensive_chain_lns());
  }
  if (from._internal_use_global_cheapest_insertion_close_nodes_lns() != 0) {
    _this->_internal_set_use_global_cheapest_insertion_close_nodes_lns(from._internal_use_global_cheapest_insertion_close_nodes_lns());
  }
  if (from._internal_use_local_cheapest_insertion_close_nodes_lns() != 0) {
    _this->_internal_set_use_local_cheapest_insertion_close_nodes_lns(from._internal_use_local_cheapest_insertion_close_nodes_lns());
  }
  if (from._internal_use_relocate_path_global_cheapest_insertion_insert_unperformed() != 0) {
    _this->_internal_set_use_relocate_path_global_cheapest_insertion_insert_unperformed(from._internal_use_relocate_path_global_cheapest_insertion_insert_unperformed());
  }
  if (from._internal_use_shortest_path_swap_active() != 0) {
    _this->_internal_set_use_shortest_path_swap_active(from._internal_use_shortest_path_swap_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::CopyFrom(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSearchParameters_LocalSearchNeighborhoodOperators::IsInitialized() const {
  return true;
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::InternalSwap(RoutingSearchParameters_LocalSearchNeighborhoodOperators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_shortest_path_swap_active_)
      + sizeof(RoutingSearchParameters_LocalSearchNeighborhoodOperators::_impl_.use_shortest_path_swap_active_)
      - PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_LocalSearchNeighborhoodOperators, _impl_.use_relocate_)>(
          reinterpret_cast<char*>(&_impl_.use_relocate_),
          reinterpret_cast<char*>(&other->_impl_.use_relocate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSearchParameters_LocalSearchNeighborhoodOperators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[0]);
}

// ===================================================================

class RoutingSearchParameters_ImprovementSearchLimitParameters::_Internal {
 public:
};

RoutingSearchParameters_ImprovementSearchLimitParameters::RoutingSearchParameters_ImprovementSearchLimitParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
}
RoutingSearchParameters_ImprovementSearchLimitParameters::RoutingSearchParameters_ImprovementSearchLimitParameters(const RoutingSearchParameters_ImprovementSearchLimitParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSearchParameters_ImprovementSearchLimitParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.improvement_rate_coefficient_){}
    , decltype(_impl_.improvement_rate_solutions_distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.improvement_rate_coefficient_, &from._impl_.improvement_rate_coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.improvement_rate_solutions_distance_) -
    reinterpret_cast<char*>(&_impl_.improvement_rate_coefficient_)) + sizeof(_impl_.improvement_rate_solutions_distance_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
}

inline void RoutingSearchParameters_ImprovementSearchLimitParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.improvement_rate_coefficient_){0}
    , decltype(_impl_.improvement_rate_solutions_distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSearchParameters_ImprovementSearchLimitParameters::~RoutingSearchParameters_ImprovementSearchLimitParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSearchParameters_ImprovementSearchLimitParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSearchParameters_ImprovementSearchLimitParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSearchParameters_ImprovementSearchLimitParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.improvement_rate_coefficient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.improvement_rate_solutions_distance_) -
      reinterpret_cast<char*>(&_impl_.improvement_rate_coefficient_)) + sizeof(_impl_.improvement_rate_solutions_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSearchParameters_ImprovementSearchLimitParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double improvement_rate_coefficient = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.improvement_rate_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 improvement_rate_solutions_distance = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.improvement_rate_solutions_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSearchParameters_ImprovementSearchLimitParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double improvement_rate_coefficient = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_improvement_rate_coefficient = this->_internal_improvement_rate_coefficient();
  uint64_t raw_improvement_rate_coefficient;
  memcpy(&raw_improvement_rate_coefficient, &tmp_improvement_rate_coefficient, sizeof(tmp_improvement_rate_coefficient));
  if (raw_improvement_rate_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_improvement_rate_coefficient(), target);
  }

  // int32 improvement_rate_solutions_distance = 39;
  if (this->_internal_improvement_rate_solutions_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_improvement_rate_solutions_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  return target;
}

size_t RoutingSearchParameters_ImprovementSearchLimitParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double improvement_rate_coefficient = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_improvement_rate_coefficient = this->_internal_improvement_rate_coefficient();
  uint64_t raw_improvement_rate_coefficient;
  memcpy(&raw_improvement_rate_coefficient, &tmp_improvement_rate_coefficient, sizeof(tmp_improvement_rate_coefficient));
  if (raw_improvement_rate_coefficient != 0) {
    total_size += 2 + 8;
  }

  // int32 improvement_rate_solutions_distance = 39;
  if (this->_internal_improvement_rate_solutions_distance() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_improvement_rate_solutions_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSearchParameters_ImprovementSearchLimitParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSearchParameters_ImprovementSearchLimitParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSearchParameters_ImprovementSearchLimitParameters::GetClassData() const { return &_class_data_; }


void RoutingSearchParameters_ImprovementSearchLimitParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSearchParameters_ImprovementSearchLimitParameters*>(&to_msg);
  auto& from = static_cast<const RoutingSearchParameters_ImprovementSearchLimitParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_improvement_rate_coefficient = from._internal_improvement_rate_coefficient();
  uint64_t raw_improvement_rate_coefficient;
  memcpy(&raw_improvement_rate_coefficient, &tmp_improvement_rate_coefficient, sizeof(tmp_improvement_rate_coefficient));
  if (raw_improvement_rate_coefficient != 0) {
    _this->_internal_set_improvement_rate_coefficient(from._internal_improvement_rate_coefficient());
  }
  if (from._internal_improvement_rate_solutions_distance() != 0) {
    _this->_internal_set_improvement_rate_solutions_distance(from._internal_improvement_rate_solutions_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSearchParameters_ImprovementSearchLimitParameters::CopyFrom(const RoutingSearchParameters_ImprovementSearchLimitParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSearchParameters_ImprovementSearchLimitParameters::IsInitialized() const {
  return true;
}

void RoutingSearchParameters_ImprovementSearchLimitParameters::InternalSwap(RoutingSearchParameters_ImprovementSearchLimitParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_ImprovementSearchLimitParameters, _impl_.improvement_rate_solutions_distance_)
      + sizeof(RoutingSearchParameters_ImprovementSearchLimitParameters::_impl_.improvement_rate_solutions_distance_)
      - PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_ImprovementSearchLimitParameters, _impl_.improvement_rate_coefficient_)>(
          reinterpret_cast<char*>(&_impl_.improvement_rate_coefficient_),
          reinterpret_cast<char*>(&other->_impl_.improvement_rate_coefficient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSearchParameters_ImprovementSearchLimitParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[1]);
}

// ===================================================================

class RoutingSearchParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingSearchParameters>()._impl_._has_bits_);
  static const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& local_search_operators(const RoutingSearchParameters* msg);
  static const ::operations_research::sat::SatParameters& sat_parameters(const RoutingSearchParameters* msg);
  static void set_has_disable_scheduling_beware_this_may_degrade_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_limit(const RoutingSearchParameters* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& lns_time_limit(const RoutingSearchParameters* msg);
  static const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters& improvement_limit_parameters(const RoutingSearchParameters* msg);
};

const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators&
RoutingSearchParameters::_Internal::local_search_operators(const RoutingSearchParameters* msg) {
  return *msg->_impl_.local_search_operators_;
}
const ::operations_research::sat::SatParameters&
RoutingSearchParameters::_Internal::sat_parameters(const RoutingSearchParameters* msg) {
  return *msg->_impl_.sat_parameters_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RoutingSearchParameters::_Internal::time_limit(const RoutingSearchParameters* msg) {
  return *msg->_impl_.time_limit_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RoutingSearchParameters::_Internal::lns_time_limit(const RoutingSearchParameters* msg) {
  return *msg->_impl_.lns_time_limit_;
}
const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters&
RoutingSearchParameters::_Internal::improvement_limit_parameters(const RoutingSearchParameters* msg) {
  return *msg->_impl_.improvement_limit_parameters_;
}
void RoutingSearchParameters::clear_sat_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.sat_parameters_ != nullptr) {
    delete _impl_.sat_parameters_;
  }
  _impl_.sat_parameters_ = nullptr;
}
void RoutingSearchParameters::clear_time_limit() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_limit_ != nullptr) {
    delete _impl_.time_limit_;
  }
  _impl_.time_limit_ = nullptr;
}
void RoutingSearchParameters::clear_lns_time_limit() {
  if (GetArenaForAllocation() == nullptr && _impl_.lns_time_limit_ != nullptr) {
    delete _impl_.lns_time_limit_;
  }
  _impl_.lns_time_limit_ = nullptr;
}
RoutingSearchParameters::RoutingSearchParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingSearchParameters)
}
RoutingSearchParameters::RoutingSearchParameters(const RoutingSearchParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSearchParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_tag_){}
    , decltype(_impl_.local_search_operators_){nullptr}
    , decltype(_impl_.time_limit_){nullptr}
    , decltype(_impl_.lns_time_limit_){nullptr}
    , decltype(_impl_.improvement_limit_parameters_){nullptr}
    , decltype(_impl_.sat_parameters_){nullptr}
    , decltype(_impl_.first_solution_strategy_){}
    , decltype(_impl_.local_search_metaheuristic_){}
    , decltype(_impl_.guided_local_search_lambda_coefficient_){}
    , decltype(_impl_.optimization_step_){}
    , decltype(_impl_.solution_limit_){}
    , decltype(_impl_.savings_neighbors_ratio_){}
    , decltype(_impl_.cheapest_insertion_farthest_seeds_ratio_){}
    , decltype(_impl_.savings_arc_coefficient_){}
    , decltype(_impl_.number_of_solutions_to_collect_){}
    , decltype(_impl_.relocate_expensive_chain_num_arcs_to_consider_){}
    , decltype(_impl_.use_depth_first_search_){}
    , decltype(_impl_.disable_scheduling_beware_this_may_degrade_performance_){}
    , decltype(_impl_.use_full_propagation_){}
    , decltype(_impl_.log_search_){}
    , decltype(_impl_.use_unfiltered_first_solution_strategy_){}
    , decltype(_impl_.savings_add_reverse_arcs_){}
    , decltype(_impl_.savings_parallel_routes_){}
    , decltype(_impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_){}
    , decltype(_impl_.cheapest_insertion_first_solution_neighbors_ratio_){}
    , decltype(_impl_.log_cost_scaling_factor_){}
    , decltype(_impl_.savings_max_memory_usage_bytes_){}
    , decltype(_impl_.use_cp_sat_){}
    , decltype(_impl_.use_cp_){}
    , decltype(_impl_.log_cost_offset_){}
    , decltype(_impl_.cheapest_insertion_ls_operator_neighbors_ratio_){}
    , decltype(_impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_){}
    , decltype(_impl_.continuous_scheduling_solver_){}
    , decltype(_impl_.mixed_integer_scheduling_solver_){}
    , decltype(_impl_.heuristic_close_nodes_lns_num_nodes_){}
    , decltype(_impl_.cheapest_insertion_add_unperformed_entries_){}
    , decltype(_impl_.christofides_use_minimum_matching_){}
    , decltype(_impl_.use_multi_armed_bandit_concatenate_operators_){}
    , decltype(_impl_.guided_local_search_reset_penalties_on_new_best_solution_){}
    , decltype(_impl_.cheapest_insertion_first_solution_min_neighbors_){}
    , decltype(_impl_.multi_armed_bandit_compound_operator_memory_coefficient_){}
    , decltype(_impl_.multi_armed_bandit_compound_operator_exploration_coefficient_){}
    , decltype(_impl_.cheapest_insertion_ls_operator_min_neighbors_){}
    , decltype(_impl_.use_generalized_cp_sat_){}
    , decltype(_impl_.local_cheapest_insertion_pickup_delivery_strategy_){}
    , decltype(_impl_.fallback_to_cp_sat_size_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_tag().empty()) {
    _this->_impl_.log_tag_.Set(from._internal_log_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_local_search_operators()) {
    _this->_impl_.local_search_operators_ = new ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators(*from._impl_.local_search_operators_);
  }
  if (from._internal_has_time_limit()) {
    _this->_impl_.time_limit_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_limit_);
  }
  if (from._internal_has_lns_time_limit()) {
    _this->_impl_.lns_time_limit_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.lns_time_limit_);
  }
  if (from._internal_has_improvement_limit_parameters()) {
    _this->_impl_.improvement_limit_parameters_ = new ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters(*from._impl_.improvement_limit_parameters_);
  }
  if (from._internal_has_sat_parameters()) {
    _this->_impl_.sat_parameters_ = new ::operations_research::sat::SatParameters(*from._impl_.sat_parameters_);
  }
  ::memcpy(&_impl_.first_solution_strategy_, &from._impl_.first_solution_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fallback_to_cp_sat_size_threshold_) -
    reinterpret_cast<char*>(&_impl_.first_solution_strategy_)) + sizeof(_impl_.fallback_to_cp_sat_size_threshold_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingSearchParameters)
}

inline void RoutingSearchParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_tag_){}
    , decltype(_impl_.local_search_operators_){nullptr}
    , decltype(_impl_.time_limit_){nullptr}
    , decltype(_impl_.lns_time_limit_){nullptr}
    , decltype(_impl_.improvement_limit_parameters_){nullptr}
    , decltype(_impl_.sat_parameters_){nullptr}
    , decltype(_impl_.first_solution_strategy_){0}
    , decltype(_impl_.local_search_metaheuristic_){0}
    , decltype(_impl_.guided_local_search_lambda_coefficient_){0}
    , decltype(_impl_.optimization_step_){0}
    , decltype(_impl_.solution_limit_){int64_t{0}}
    , decltype(_impl_.savings_neighbors_ratio_){0}
    , decltype(_impl_.cheapest_insertion_farthest_seeds_ratio_){0}
    , decltype(_impl_.savings_arc_coefficient_){0}
    , decltype(_impl_.number_of_solutions_to_collect_){0}
    , decltype(_impl_.relocate_expensive_chain_num_arcs_to_consider_){0}
    , decltype(_impl_.use_depth_first_search_){false}
    , decltype(_impl_.disable_scheduling_beware_this_may_degrade_performance_){false}
    , decltype(_impl_.use_full_propagation_){false}
    , decltype(_impl_.log_search_){false}
    , decltype(_impl_.use_unfiltered_first_solution_strategy_){false}
    , decltype(_impl_.savings_add_reverse_arcs_){false}
    , decltype(_impl_.savings_parallel_routes_){false}
    , decltype(_impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_){false}
    , decltype(_impl_.cheapest_insertion_first_solution_neighbors_ratio_){0}
    , decltype(_impl_.log_cost_scaling_factor_){0}
    , decltype(_impl_.savings_max_memory_usage_bytes_){0}
    , decltype(_impl_.use_cp_sat_){0}
    , decltype(_impl_.use_cp_){0}
    , decltype(_impl_.log_cost_offset_){0}
    , decltype(_impl_.cheapest_insertion_ls_operator_neighbors_ratio_){0}
    , decltype(_impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_){0}
    , decltype(_impl_.continuous_scheduling_solver_){0}
    , decltype(_impl_.mixed_integer_scheduling_solver_){0}
    , decltype(_impl_.heuristic_close_nodes_lns_num_nodes_){0}
    , decltype(_impl_.cheapest_insertion_add_unperformed_entries_){false}
    , decltype(_impl_.christofides_use_minimum_matching_){false}
    , decltype(_impl_.use_multi_armed_bandit_concatenate_operators_){false}
    , decltype(_impl_.guided_local_search_reset_penalties_on_new_best_solution_){false}
    , decltype(_impl_.cheapest_insertion_first_solution_min_neighbors_){0}
    , decltype(_impl_.multi_armed_bandit_compound_operator_memory_coefficient_){0}
    , decltype(_impl_.multi_armed_bandit_compound_operator_exploration_coefficient_){0}
    , decltype(_impl_.cheapest_insertion_ls_operator_min_neighbors_){0}
    , decltype(_impl_.use_generalized_cp_sat_){0}
    , decltype(_impl_.local_cheapest_insertion_pickup_delivery_strategy_){0}
    , decltype(_impl_.fallback_to_cp_sat_size_threshold_){0}
  };
  _impl_.log_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoutingSearchParameters::~RoutingSearchParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingSearchParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSearchParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.local_search_operators_;
  if (this != internal_default_instance()) delete _impl_.time_limit_;
  if (this != internal_default_instance()) delete _impl_.lns_time_limit_;
  if (this != internal_default_instance()) delete _impl_.improvement_limit_parameters_;
  if (this != internal_default_instance()) delete _impl_.sat_parameters_;
}

void RoutingSearchParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSearchParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingSearchParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_tag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.local_search_operators_ != nullptr) {
    delete _impl_.local_search_operators_;
  }
  _impl_.local_search_operators_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_limit_ != nullptr) {
    delete _impl_.time_limit_;
  }
  _impl_.time_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lns_time_limit_ != nullptr) {
    delete _impl_.lns_time_limit_;
  }
  _impl_.lns_time_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.improvement_limit_parameters_ != nullptr) {
    delete _impl_.improvement_limit_parameters_;
  }
  _impl_.improvement_limit_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sat_parameters_ != nullptr) {
    delete _impl_.sat_parameters_;
  }
  _impl_.sat_parameters_ = nullptr;
  ::memset(&_impl_.first_solution_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_depth_first_search_) -
      reinterpret_cast<char*>(&_impl_.first_solution_strategy_)) + sizeof(_impl_.use_depth_first_search_));
  _impl_.disable_scheduling_beware_this_may_degrade_performance_ = false;
  ::memset(&_impl_.use_full_propagation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fallback_to_cp_sat_size_threshold_) -
      reinterpret_cast<char*>(&_impl_.use_full_propagation_)) + sizeof(_impl_.fallback_to_cp_sat_size_threshold_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSearchParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_first_solution_strategy(static_cast<::operations_research::FirstSolutionStrategy_Value>(val));
        } else
          goto handle_unusual;
        continue;
      // bool use_unfiltered_first_solution_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.use_unfiltered_first_solution_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_search_operators(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_search_metaheuristic(static_cast<::operations_research::LocalSearchMetaheuristic_Value>(val));
        } else
          goto handle_unusual;
        continue;
      // double guided_local_search_lambda_coefficient = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.guided_local_search_lambda_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool use_depth_first_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.use_depth_first_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double optimization_step = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.optimization_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 solution_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.solution_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration lns_time_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lns_time_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_full_propagation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.use_full_propagation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log_search = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.log_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double savings_neighbors_ratio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.savings_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool savings_add_reverse_arcs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.savings_add_reverse_arcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cheapest_insertion_farthest_seeds_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.cheapest_insertion_farthest_seeds_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 number_of_solutions_to_collect = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.number_of_solutions_to_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double savings_arc_coefficient = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.savings_arc_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool savings_parallel_routes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.savings_parallel_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.relocate_expensive_chain_num_arcs_to_consider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cheapest_insertion_first_solution_neighbors_ratio = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.cheapest_insertion_first_solution_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double log_cost_scaling_factor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.log_cost_scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double savings_max_memory_usage_bytes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.savings_max_memory_usage_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cp_sat = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cp_sat(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cp(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // double log_cost_offset = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.log_cost_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool christofides_use_minimum_matching = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.christofides_use_minimum_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.cheapest_insertion_ls_operator_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_scheduling_solver(static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mixed_integer_scheduling_solver(static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 heuristic_close_nodes_lns_num_nodes = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.heuristic_close_nodes_lns_num_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log_tag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_log_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.RoutingSearchParameters.log_tag"));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters improvement_limit_parameters = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_improvement_limit_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cheapest_insertion_add_unperformed_entries = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cheapest_insertion_add_unperformed_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_multi_armed_bandit_concatenate_operators = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.use_multi_armed_bandit_concatenate_operators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double multi_armed_bandit_compound_operator_memory_coefficient = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.multi_armed_bandit_compound_operator_memory_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double multi_armed_bandit_compound_operator_exploration_coefficient = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.multi_armed_bandit_compound_operator_exploration_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 cheapest_insertion_first_solution_min_neighbors = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.cheapest_insertion_first_solution_min_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cheapest_insertion_ls_operator_min_neighbors = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.cheapest_insertion_ls_operator_min_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_generalized_cp_sat = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_generalized_cp_sat(static_cast<::operations_research::OptionalBoolean>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.sat.SatParameters sat_parameters = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sat_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_cheapest_insertion_pickup_delivery_strategy(static_cast<::operations_research::RoutingSearchParameters_PairInsertionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_scheduling_beware_this_may_degrade_performance = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_disable_scheduling_beware_this_may_degrade_performance(&has_bits);
          _impl_.disable_scheduling_beware_this_may_degrade_performance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool guided_local_search_reset_penalties_on_new_best_solution = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.guided_local_search_reset_penalties_on_new_best_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fallback_to_cp_sat_size_threshold = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.fallback_to_cp_sat_size_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSearchParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingSearchParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
  if (this->_internal_first_solution_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_first_solution_strategy(), target);
  }

  // bool use_unfiltered_first_solution_strategy = 2;
  if (this->_internal_use_unfiltered_first_solution_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_unfiltered_first_solution_strategy(), target);
  }

  // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
  if (this->_internal_has_local_search_operators()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::local_search_operators(this),
        _Internal::local_search_operators(this).GetCachedSize(), target, stream);
  }

  // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
  if (this->_internal_local_search_metaheuristic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_local_search_metaheuristic(), target);
  }

  // double guided_local_search_lambda_coefficient = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_guided_local_search_lambda_coefficient = this->_internal_guided_local_search_lambda_coefficient();
  uint64_t raw_guided_local_search_lambda_coefficient;
  memcpy(&raw_guided_local_search_lambda_coefficient, &tmp_guided_local_search_lambda_coefficient, sizeof(tmp_guided_local_search_lambda_coefficient));
  if (raw_guided_local_search_lambda_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_guided_local_search_lambda_coefficient(), target);
  }

  // bool use_depth_first_search = 6;
  if (this->_internal_use_depth_first_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_depth_first_search(), target);
  }

  // double optimization_step = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optimization_step = this->_internal_optimization_step();
  uint64_t raw_optimization_step;
  memcpy(&raw_optimization_step, &tmp_optimization_step, sizeof(tmp_optimization_step));
  if (raw_optimization_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_optimization_step(), target);
  }

  // int64 solution_limit = 8;
  if (this->_internal_solution_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_solution_limit(), target);
  }

  // .google.protobuf.Duration time_limit = 9;
  if (this->_internal_has_time_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::time_limit(this),
        _Internal::time_limit(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration lns_time_limit = 10;
  if (this->_internal_has_lns_time_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::lns_time_limit(this),
        _Internal::lns_time_limit(this).GetCachedSize(), target, stream);
  }

  // bool use_full_propagation = 11;
  if (this->_internal_use_full_propagation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_use_full_propagation(), target);
  }

  // bool log_search = 13;
  if (this->_internal_log_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_log_search(), target);
  }

  // double savings_neighbors_ratio = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_neighbors_ratio = this->_internal_savings_neighbors_ratio();
  uint64_t raw_savings_neighbors_ratio;
  memcpy(&raw_savings_neighbors_ratio, &tmp_savings_neighbors_ratio, sizeof(tmp_savings_neighbors_ratio));
  if (raw_savings_neighbors_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_savings_neighbors_ratio(), target);
  }

  // bool savings_add_reverse_arcs = 15;
  if (this->_internal_savings_add_reverse_arcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_savings_add_reverse_arcs(), target);
  }

  // double cheapest_insertion_farthest_seeds_ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_farthest_seeds_ratio = this->_internal_cheapest_insertion_farthest_seeds_ratio();
  uint64_t raw_cheapest_insertion_farthest_seeds_ratio;
  memcpy(&raw_cheapest_insertion_farthest_seeds_ratio, &tmp_cheapest_insertion_farthest_seeds_ratio, sizeof(tmp_cheapest_insertion_farthest_seeds_ratio));
  if (raw_cheapest_insertion_farthest_seeds_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_cheapest_insertion_farthest_seeds_ratio(), target);
  }

  // int32 number_of_solutions_to_collect = 17;
  if (this->_internal_number_of_solutions_to_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_number_of_solutions_to_collect(), target);
  }

  // double savings_arc_coefficient = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_arc_coefficient = this->_internal_savings_arc_coefficient();
  uint64_t raw_savings_arc_coefficient;
  memcpy(&raw_savings_arc_coefficient, &tmp_savings_arc_coefficient, sizeof(tmp_savings_arc_coefficient));
  if (raw_savings_arc_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_savings_arc_coefficient(), target);
  }

  // bool savings_parallel_routes = 19;
  if (this->_internal_savings_parallel_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_savings_parallel_routes(), target);
  }

  // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
  if (this->_internal_relocate_expensive_chain_num_arcs_to_consider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_relocate_expensive_chain_num_arcs_to_consider(), target);
  }

  // double cheapest_insertion_first_solution_neighbors_ratio = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_first_solution_neighbors_ratio = this->_internal_cheapest_insertion_first_solution_neighbors_ratio();
  uint64_t raw_cheapest_insertion_first_solution_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_first_solution_neighbors_ratio, &tmp_cheapest_insertion_first_solution_neighbors_ratio, sizeof(tmp_cheapest_insertion_first_solution_neighbors_ratio));
  if (raw_cheapest_insertion_first_solution_neighbors_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_cheapest_insertion_first_solution_neighbors_ratio(), target);
  }

  // double log_cost_scaling_factor = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_scaling_factor = this->_internal_log_cost_scaling_factor();
  uint64_t raw_log_cost_scaling_factor;
  memcpy(&raw_log_cost_scaling_factor, &tmp_log_cost_scaling_factor, sizeof(tmp_log_cost_scaling_factor));
  if (raw_log_cost_scaling_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_log_cost_scaling_factor(), target);
  }

  // double savings_max_memory_usage_bytes = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_max_memory_usage_bytes = this->_internal_savings_max_memory_usage_bytes();
  uint64_t raw_savings_max_memory_usage_bytes;
  memcpy(&raw_savings_max_memory_usage_bytes, &tmp_savings_max_memory_usage_bytes, sizeof(tmp_savings_max_memory_usage_bytes));
  if (raw_savings_max_memory_usage_bytes != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_savings_max_memory_usage_bytes(), target);
  }

  // .operations_research.OptionalBoolean use_cp_sat = 27;
  if (this->_internal_use_cp_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_use_cp_sat(), target);
  }

  // .operations_research.OptionalBoolean use_cp = 28;
  if (this->_internal_use_cp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_use_cp(), target);
  }

  // double log_cost_offset = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_offset = this->_internal_log_cost_offset();
  uint64_t raw_log_cost_offset;
  memcpy(&raw_log_cost_offset, &tmp_log_cost_offset, sizeof(tmp_log_cost_offset));
  if (raw_log_cost_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_log_cost_offset(), target);
  }

  // bool christofides_use_minimum_matching = 30;
  if (this->_internal_christofides_use_minimum_matching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_christofides_use_minimum_matching(), target);
  }

  // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_ls_operator_neighbors_ratio = this->_internal_cheapest_insertion_ls_operator_neighbors_ratio();
  uint64_t raw_cheapest_insertion_ls_operator_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_ls_operator_neighbors_ratio, &tmp_cheapest_insertion_ls_operator_neighbors_ratio, sizeof(tmp_cheapest_insertion_ls_operator_neighbors_ratio));
  if (raw_cheapest_insertion_ls_operator_neighbors_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_cheapest_insertion_ls_operator_neighbors_ratio(), target);
  }

  // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
  if (this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider(), target);
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
  if (this->_internal_continuous_scheduling_solver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_continuous_scheduling_solver(), target);
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
  if (this->_internal_mixed_integer_scheduling_solver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_mixed_integer_scheduling_solver(), target);
  }

  // int32 heuristic_close_nodes_lns_num_nodes = 35;
  if (this->_internal_heuristic_close_nodes_lns_num_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_heuristic_close_nodes_lns_num_nodes(), target);
  }

  // string log_tag = 36;
  if (!this->_internal_log_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_tag().data(), static_cast<int>(this->_internal_log_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.RoutingSearchParameters.log_tag");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_log_tag(), target);
  }

  // .operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters improvement_limit_parameters = 37;
  if (this->_internal_has_improvement_limit_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::improvement_limit_parameters(this),
        _Internal::improvement_limit_parameters(this).GetCachedSize(), target, stream);
  }

  // bool cheapest_insertion_add_unperformed_entries = 40;
  if (this->_internal_cheapest_insertion_add_unperformed_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_cheapest_insertion_add_unperformed_entries(), target);
  }

  // bool use_multi_armed_bandit_concatenate_operators = 41;
  if (this->_internal_use_multi_armed_bandit_concatenate_operators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_use_multi_armed_bandit_concatenate_operators(), target);
  }

  // double multi_armed_bandit_compound_operator_memory_coefficient = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_memory_coefficient = this->_internal_multi_armed_bandit_compound_operator_memory_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_memory_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_memory_coefficient, &tmp_multi_armed_bandit_compound_operator_memory_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_memory_coefficient));
  if (raw_multi_armed_bandit_compound_operator_memory_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_multi_armed_bandit_compound_operator_memory_coefficient(), target);
  }

  // double multi_armed_bandit_compound_operator_exploration_coefficient = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_exploration_coefficient = this->_internal_multi_armed_bandit_compound_operator_exploration_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_exploration_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_exploration_coefficient, &tmp_multi_armed_bandit_compound_operator_exploration_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_exploration_coefficient));
  if (raw_multi_armed_bandit_compound_operator_exploration_coefficient != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(43, this->_internal_multi_armed_bandit_compound_operator_exploration_coefficient(), target);
  }

  // int32 cheapest_insertion_first_solution_min_neighbors = 44;
  if (this->_internal_cheapest_insertion_first_solution_min_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_cheapest_insertion_first_solution_min_neighbors(), target);
  }

  // int32 cheapest_insertion_ls_operator_min_neighbors = 45;
  if (this->_internal_cheapest_insertion_ls_operator_min_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_cheapest_insertion_ls_operator_min_neighbors(), target);
  }

  // bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46;
  if (this->_internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(46, this->_internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(), target);
  }

  // .operations_research.OptionalBoolean use_generalized_cp_sat = 47;
  if (this->_internal_use_generalized_cp_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      47, this->_internal_use_generalized_cp_sat(), target);
  }

  // .operations_research.sat.SatParameters sat_parameters = 48;
  if (this->_internal_has_sat_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::sat_parameters(this),
        _Internal::sat_parameters(this).GetCachedSize(), target, stream);
  }

  // .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy = 49;
  if (this->_internal_local_cheapest_insertion_pickup_delivery_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      49, this->_internal_local_cheapest_insertion_pickup_delivery_strategy(), target);
  }

  // optional bool disable_scheduling_beware_this_may_degrade_performance = 50;
  if (_internal_has_disable_scheduling_beware_this_may_degrade_performance()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_disable_scheduling_beware_this_may_degrade_performance(), target);
  }

  // bool guided_local_search_reset_penalties_on_new_best_solution = 51;
  if (this->_internal_guided_local_search_reset_penalties_on_new_best_solution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_guided_local_search_reset_penalties_on_new_best_solution(), target);
  }

  // int32 fallback_to_cp_sat_size_threshold = 52;
  if (this->_internal_fallback_to_cp_sat_size_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_fallback_to_cp_sat_size_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingSearchParameters)
  return target;
}

size_t RoutingSearchParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingSearchParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_tag = 36;
  if (!this->_internal_log_tag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_tag());
  }

  // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
  if (this->_internal_has_local_search_operators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_search_operators_);
  }

  // .google.protobuf.Duration time_limit = 9;
  if (this->_internal_has_time_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_limit_);
  }

  // .google.protobuf.Duration lns_time_limit = 10;
  if (this->_internal_has_lns_time_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lns_time_limit_);
  }

  // .operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters improvement_limit_parameters = 37;
  if (this->_internal_has_improvement_limit_parameters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.improvement_limit_parameters_);
  }

  // .operations_research.sat.SatParameters sat_parameters = 48;
  if (this->_internal_has_sat_parameters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sat_parameters_);
  }

  // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
  if (this->_internal_first_solution_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_first_solution_strategy());
  }

  // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
  if (this->_internal_local_search_metaheuristic() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_local_search_metaheuristic());
  }

  // double guided_local_search_lambda_coefficient = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_guided_local_search_lambda_coefficient = this->_internal_guided_local_search_lambda_coefficient();
  uint64_t raw_guided_local_search_lambda_coefficient;
  memcpy(&raw_guided_local_search_lambda_coefficient, &tmp_guided_local_search_lambda_coefficient, sizeof(tmp_guided_local_search_lambda_coefficient));
  if (raw_guided_local_search_lambda_coefficient != 0) {
    total_size += 1 + 8;
  }

  // double optimization_step = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optimization_step = this->_internal_optimization_step();
  uint64_t raw_optimization_step;
  memcpy(&raw_optimization_step, &tmp_optimization_step, sizeof(tmp_optimization_step));
  if (raw_optimization_step != 0) {
    total_size += 1 + 8;
  }

  // int64 solution_limit = 8;
  if (this->_internal_solution_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_solution_limit());
  }

  // double savings_neighbors_ratio = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_neighbors_ratio = this->_internal_savings_neighbors_ratio();
  uint64_t raw_savings_neighbors_ratio;
  memcpy(&raw_savings_neighbors_ratio, &tmp_savings_neighbors_ratio, sizeof(tmp_savings_neighbors_ratio));
  if (raw_savings_neighbors_ratio != 0) {
    total_size += 1 + 8;
  }

  // double cheapest_insertion_farthest_seeds_ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_farthest_seeds_ratio = this->_internal_cheapest_insertion_farthest_seeds_ratio();
  uint64_t raw_cheapest_insertion_farthest_seeds_ratio;
  memcpy(&raw_cheapest_insertion_farthest_seeds_ratio, &tmp_cheapest_insertion_farthest_seeds_ratio, sizeof(tmp_cheapest_insertion_farthest_seeds_ratio));
  if (raw_cheapest_insertion_farthest_seeds_ratio != 0) {
    total_size += 2 + 8;
  }

  // double savings_arc_coefficient = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_arc_coefficient = this->_internal_savings_arc_coefficient();
  uint64_t raw_savings_arc_coefficient;
  memcpy(&raw_savings_arc_coefficient, &tmp_savings_arc_coefficient, sizeof(tmp_savings_arc_coefficient));
  if (raw_savings_arc_coefficient != 0) {
    total_size += 2 + 8;
  }

  // int32 number_of_solutions_to_collect = 17;
  if (this->_internal_number_of_solutions_to_collect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_number_of_solutions_to_collect());
  }

  // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
  if (this->_internal_relocate_expensive_chain_num_arcs_to_consider() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_relocate_expensive_chain_num_arcs_to_consider());
  }

  // bool use_depth_first_search = 6;
  if (this->_internal_use_depth_first_search() != 0) {
    total_size += 1 + 1;
  }

  // optional bool disable_scheduling_beware_this_may_degrade_performance = 50;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 1;
  }

  // bool use_full_propagation = 11;
  if (this->_internal_use_full_propagation() != 0) {
    total_size += 1 + 1;
  }

  // bool log_search = 13;
  if (this->_internal_log_search() != 0) {
    total_size += 1 + 1;
  }

  // bool use_unfiltered_first_solution_strategy = 2;
  if (this->_internal_use_unfiltered_first_solution_strategy() != 0) {
    total_size += 1 + 1;
  }

  // bool savings_add_reverse_arcs = 15;
  if (this->_internal_savings_add_reverse_arcs() != 0) {
    total_size += 1 + 1;
  }

  // bool savings_parallel_routes = 19;
  if (this->_internal_savings_parallel_routes() != 0) {
    total_size += 2 + 1;
  }

  // bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46;
  if (this->_internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() != 0) {
    total_size += 2 + 1;
  }

  // double cheapest_insertion_first_solution_neighbors_ratio = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_first_solution_neighbors_ratio = this->_internal_cheapest_insertion_first_solution_neighbors_ratio();
  uint64_t raw_cheapest_insertion_first_solution_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_first_solution_neighbors_ratio, &tmp_cheapest_insertion_first_solution_neighbors_ratio, sizeof(tmp_cheapest_insertion_first_solution_neighbors_ratio));
  if (raw_cheapest_insertion_first_solution_neighbors_ratio != 0) {
    total_size += 2 + 8;
  }

  // double log_cost_scaling_factor = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_scaling_factor = this->_internal_log_cost_scaling_factor();
  uint64_t raw_log_cost_scaling_factor;
  memcpy(&raw_log_cost_scaling_factor, &tmp_log_cost_scaling_factor, sizeof(tmp_log_cost_scaling_factor));
  if (raw_log_cost_scaling_factor != 0) {
    total_size += 2 + 8;
  }

  // double savings_max_memory_usage_bytes = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_max_memory_usage_bytes = this->_internal_savings_max_memory_usage_bytes();
  uint64_t raw_savings_max_memory_usage_bytes;
  memcpy(&raw_savings_max_memory_usage_bytes, &tmp_savings_max_memory_usage_bytes, sizeof(tmp_savings_max_memory_usage_bytes));
  if (raw_savings_max_memory_usage_bytes != 0) {
    total_size += 2 + 8;
  }

  // .operations_research.OptionalBoolean use_cp_sat = 27;
  if (this->_internal_use_cp_sat() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_cp_sat());
  }

  // .operations_research.OptionalBoolean use_cp = 28;
  if (this->_internal_use_cp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_cp());
  }

  // double log_cost_offset = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_offset = this->_internal_log_cost_offset();
  uint64_t raw_log_cost_offset;
  memcpy(&raw_log_cost_offset, &tmp_log_cost_offset, sizeof(tmp_log_cost_offset));
  if (raw_log_cost_offset != 0) {
    total_size += 2 + 8;
  }

  // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_ls_operator_neighbors_ratio = this->_internal_cheapest_insertion_ls_operator_neighbors_ratio();
  uint64_t raw_cheapest_insertion_ls_operator_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_ls_operator_neighbors_ratio, &tmp_cheapest_insertion_ls_operator_neighbors_ratio, sizeof(tmp_cheapest_insertion_ls_operator_neighbors_ratio));
  if (raw_cheapest_insertion_ls_operator_neighbors_ratio != 0) {
    total_size += 2 + 8;
  }

  // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
  if (this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider());
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
  if (this->_internal_continuous_scheduling_solver() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_continuous_scheduling_solver());
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
  if (this->_internal_mixed_integer_scheduling_solver() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mixed_integer_scheduling_solver());
  }

  // int32 heuristic_close_nodes_lns_num_nodes = 35;
  if (this->_internal_heuristic_close_nodes_lns_num_nodes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_heuristic_close_nodes_lns_num_nodes());
  }

  // bool cheapest_insertion_add_unperformed_entries = 40;
  if (this->_internal_cheapest_insertion_add_unperformed_entries() != 0) {
    total_size += 2 + 1;
  }

  // bool christofides_use_minimum_matching = 30;
  if (this->_internal_christofides_use_minimum_matching() != 0) {
    total_size += 2 + 1;
  }

  // bool use_multi_armed_bandit_concatenate_operators = 41;
  if (this->_internal_use_multi_armed_bandit_concatenate_operators() != 0) {
    total_size += 2 + 1;
  }

  // bool guided_local_search_reset_penalties_on_new_best_solution = 51;
  if (this->_internal_guided_local_search_reset_penalties_on_new_best_solution() != 0) {
    total_size += 2 + 1;
  }

  // int32 cheapest_insertion_first_solution_min_neighbors = 44;
  if (this->_internal_cheapest_insertion_first_solution_min_neighbors() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cheapest_insertion_first_solution_min_neighbors());
  }

  // double multi_armed_bandit_compound_operator_memory_coefficient = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_memory_coefficient = this->_internal_multi_armed_bandit_compound_operator_memory_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_memory_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_memory_coefficient, &tmp_multi_armed_bandit_compound_operator_memory_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_memory_coefficient));
  if (raw_multi_armed_bandit_compound_operator_memory_coefficient != 0) {
    total_size += 2 + 8;
  }

  // double multi_armed_bandit_compound_operator_exploration_coefficient = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_exploration_coefficient = this->_internal_multi_armed_bandit_compound_operator_exploration_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_exploration_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_exploration_coefficient, &tmp_multi_armed_bandit_compound_operator_exploration_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_exploration_coefficient));
  if (raw_multi_armed_bandit_compound_operator_exploration_coefficient != 0) {
    total_size += 2 + 8;
  }

  // int32 cheapest_insertion_ls_operator_min_neighbors = 45;
  if (this->_internal_cheapest_insertion_ls_operator_min_neighbors() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cheapest_insertion_ls_operator_min_neighbors());
  }

  // .operations_research.OptionalBoolean use_generalized_cp_sat = 47;
  if (this->_internal_use_generalized_cp_sat() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_generalized_cp_sat());
  }

  // .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy = 49;
  if (this->_internal_local_cheapest_insertion_pickup_delivery_strategy() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_local_cheapest_insertion_pickup_delivery_strategy());
  }

  // int32 fallback_to_cp_sat_size_threshold = 52;
  if (this->_internal_fallback_to_cp_sat_size_threshold() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fallback_to_cp_sat_size_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSearchParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSearchParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSearchParameters::GetClassData() const { return &_class_data_; }


void RoutingSearchParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSearchParameters*>(&to_msg);
  auto& from = static_cast<const RoutingSearchParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingSearchParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_tag().empty()) {
    _this->_internal_set_log_tag(from._internal_log_tag());
  }
  if (from._internal_has_local_search_operators()) {
    _this->_internal_mutable_local_search_operators()->::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeFrom(
        from._internal_local_search_operators());
  }
  if (from._internal_has_time_limit()) {
    _this->_internal_mutable_time_limit()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_limit());
  }
  if (from._internal_has_lns_time_limit()) {
    _this->_internal_mutable_lns_time_limit()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_lns_time_limit());
  }
  if (from._internal_has_improvement_limit_parameters()) {
    _this->_internal_mutable_improvement_limit_parameters()->::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters::MergeFrom(
        from._internal_improvement_limit_parameters());
  }
  if (from._internal_has_sat_parameters()) {
    _this->_internal_mutable_sat_parameters()->::operations_research::sat::SatParameters::MergeFrom(
        from._internal_sat_parameters());
  }
  if (from._internal_first_solution_strategy() != 0) {
    _this->_internal_set_first_solution_strategy(from._internal_first_solution_strategy());
  }
  if (from._internal_local_search_metaheuristic() != 0) {
    _this->_internal_set_local_search_metaheuristic(from._internal_local_search_metaheuristic());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_guided_local_search_lambda_coefficient = from._internal_guided_local_search_lambda_coefficient();
  uint64_t raw_guided_local_search_lambda_coefficient;
  memcpy(&raw_guided_local_search_lambda_coefficient, &tmp_guided_local_search_lambda_coefficient, sizeof(tmp_guided_local_search_lambda_coefficient));
  if (raw_guided_local_search_lambda_coefficient != 0) {
    _this->_internal_set_guided_local_search_lambda_coefficient(from._internal_guided_local_search_lambda_coefficient());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_optimization_step = from._internal_optimization_step();
  uint64_t raw_optimization_step;
  memcpy(&raw_optimization_step, &tmp_optimization_step, sizeof(tmp_optimization_step));
  if (raw_optimization_step != 0) {
    _this->_internal_set_optimization_step(from._internal_optimization_step());
  }
  if (from._internal_solution_limit() != 0) {
    _this->_internal_set_solution_limit(from._internal_solution_limit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_neighbors_ratio = from._internal_savings_neighbors_ratio();
  uint64_t raw_savings_neighbors_ratio;
  memcpy(&raw_savings_neighbors_ratio, &tmp_savings_neighbors_ratio, sizeof(tmp_savings_neighbors_ratio));
  if (raw_savings_neighbors_ratio != 0) {
    _this->_internal_set_savings_neighbors_ratio(from._internal_savings_neighbors_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_farthest_seeds_ratio = from._internal_cheapest_insertion_farthest_seeds_ratio();
  uint64_t raw_cheapest_insertion_farthest_seeds_ratio;
  memcpy(&raw_cheapest_insertion_farthest_seeds_ratio, &tmp_cheapest_insertion_farthest_seeds_ratio, sizeof(tmp_cheapest_insertion_farthest_seeds_ratio));
  if (raw_cheapest_insertion_farthest_seeds_ratio != 0) {
    _this->_internal_set_cheapest_insertion_farthest_seeds_ratio(from._internal_cheapest_insertion_farthest_seeds_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_arc_coefficient = from._internal_savings_arc_coefficient();
  uint64_t raw_savings_arc_coefficient;
  memcpy(&raw_savings_arc_coefficient, &tmp_savings_arc_coefficient, sizeof(tmp_savings_arc_coefficient));
  if (raw_savings_arc_coefficient != 0) {
    _this->_internal_set_savings_arc_coefficient(from._internal_savings_arc_coefficient());
  }
  if (from._internal_number_of_solutions_to_collect() != 0) {
    _this->_internal_set_number_of_solutions_to_collect(from._internal_number_of_solutions_to_collect());
  }
  if (from._internal_relocate_expensive_chain_num_arcs_to_consider() != 0) {
    _this->_internal_set_relocate_expensive_chain_num_arcs_to_consider(from._internal_relocate_expensive_chain_num_arcs_to_consider());
  }
  if (from._internal_use_depth_first_search() != 0) {
    _this->_internal_set_use_depth_first_search(from._internal_use_depth_first_search());
  }
  if (from._internal_has_disable_scheduling_beware_this_may_degrade_performance()) {
    _this->_internal_set_disable_scheduling_beware_this_may_degrade_performance(from._internal_disable_scheduling_beware_this_may_degrade_performance());
  }
  if (from._internal_use_full_propagation() != 0) {
    _this->_internal_set_use_full_propagation(from._internal_use_full_propagation());
  }
  if (from._internal_log_search() != 0) {
    _this->_internal_set_log_search(from._internal_log_search());
  }
  if (from._internal_use_unfiltered_first_solution_strategy() != 0) {
    _this->_internal_set_use_unfiltered_first_solution_strategy(from._internal_use_unfiltered_first_solution_strategy());
  }
  if (from._internal_savings_add_reverse_arcs() != 0) {
    _this->_internal_set_savings_add_reverse_arcs(from._internal_savings_add_reverse_arcs());
  }
  if (from._internal_savings_parallel_routes() != 0) {
    _this->_internal_set_savings_parallel_routes(from._internal_savings_parallel_routes());
  }
  if (from._internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() != 0) {
    _this->_internal_set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(from._internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_first_solution_neighbors_ratio = from._internal_cheapest_insertion_first_solution_neighbors_ratio();
  uint64_t raw_cheapest_insertion_first_solution_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_first_solution_neighbors_ratio, &tmp_cheapest_insertion_first_solution_neighbors_ratio, sizeof(tmp_cheapest_insertion_first_solution_neighbors_ratio));
  if (raw_cheapest_insertion_first_solution_neighbors_ratio != 0) {
    _this->_internal_set_cheapest_insertion_first_solution_neighbors_ratio(from._internal_cheapest_insertion_first_solution_neighbors_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_scaling_factor = from._internal_log_cost_scaling_factor();
  uint64_t raw_log_cost_scaling_factor;
  memcpy(&raw_log_cost_scaling_factor, &tmp_log_cost_scaling_factor, sizeof(tmp_log_cost_scaling_factor));
  if (raw_log_cost_scaling_factor != 0) {
    _this->_internal_set_log_cost_scaling_factor(from._internal_log_cost_scaling_factor());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_savings_max_memory_usage_bytes = from._internal_savings_max_memory_usage_bytes();
  uint64_t raw_savings_max_memory_usage_bytes;
  memcpy(&raw_savings_max_memory_usage_bytes, &tmp_savings_max_memory_usage_bytes, sizeof(tmp_savings_max_memory_usage_bytes));
  if (raw_savings_max_memory_usage_bytes != 0) {
    _this->_internal_set_savings_max_memory_usage_bytes(from._internal_savings_max_memory_usage_bytes());
  }
  if (from._internal_use_cp_sat() != 0) {
    _this->_internal_set_use_cp_sat(from._internal_use_cp_sat());
  }
  if (from._internal_use_cp() != 0) {
    _this->_internal_set_use_cp(from._internal_use_cp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_log_cost_offset = from._internal_log_cost_offset();
  uint64_t raw_log_cost_offset;
  memcpy(&raw_log_cost_offset, &tmp_log_cost_offset, sizeof(tmp_log_cost_offset));
  if (raw_log_cost_offset != 0) {
    _this->_internal_set_log_cost_offset(from._internal_log_cost_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cheapest_insertion_ls_operator_neighbors_ratio = from._internal_cheapest_insertion_ls_operator_neighbors_ratio();
  uint64_t raw_cheapest_insertion_ls_operator_neighbors_ratio;
  memcpy(&raw_cheapest_insertion_ls_operator_neighbors_ratio, &tmp_cheapest_insertion_ls_operator_neighbors_ratio, sizeof(tmp_cheapest_insertion_ls_operator_neighbors_ratio));
  if (raw_cheapest_insertion_ls_operator_neighbors_ratio != 0) {
    _this->_internal_set_cheapest_insertion_ls_operator_neighbors_ratio(from._internal_cheapest_insertion_ls_operator_neighbors_ratio());
  }
  if (from._internal_heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    _this->_internal_set_heuristic_expensive_chain_lns_num_arcs_to_consider(from._internal_heuristic_expensive_chain_lns_num_arcs_to_consider());
  }
  if (from._internal_continuous_scheduling_solver() != 0) {
    _this->_internal_set_continuous_scheduling_solver(from._internal_continuous_scheduling_solver());
  }
  if (from._internal_mixed_integer_scheduling_solver() != 0) {
    _this->_internal_set_mixed_integer_scheduling_solver(from._internal_mixed_integer_scheduling_solver());
  }
  if (from._internal_heuristic_close_nodes_lns_num_nodes() != 0) {
    _this->_internal_set_heuristic_close_nodes_lns_num_nodes(from._internal_heuristic_close_nodes_lns_num_nodes());
  }
  if (from._internal_cheapest_insertion_add_unperformed_entries() != 0) {
    _this->_internal_set_cheapest_insertion_add_unperformed_entries(from._internal_cheapest_insertion_add_unperformed_entries());
  }
  if (from._internal_christofides_use_minimum_matching() != 0) {
    _this->_internal_set_christofides_use_minimum_matching(from._internal_christofides_use_minimum_matching());
  }
  if (from._internal_use_multi_armed_bandit_concatenate_operators() != 0) {
    _this->_internal_set_use_multi_armed_bandit_concatenate_operators(from._internal_use_multi_armed_bandit_concatenate_operators());
  }
  if (from._internal_guided_local_search_reset_penalties_on_new_best_solution() != 0) {
    _this->_internal_set_guided_local_search_reset_penalties_on_new_best_solution(from._internal_guided_local_search_reset_penalties_on_new_best_solution());
  }
  if (from._internal_cheapest_insertion_first_solution_min_neighbors() != 0) {
    _this->_internal_set_cheapest_insertion_first_solution_min_neighbors(from._internal_cheapest_insertion_first_solution_min_neighbors());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_memory_coefficient = from._internal_multi_armed_bandit_compound_operator_memory_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_memory_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_memory_coefficient, &tmp_multi_armed_bandit_compound_operator_memory_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_memory_coefficient));
  if (raw_multi_armed_bandit_compound_operator_memory_coefficient != 0) {
    _this->_internal_set_multi_armed_bandit_compound_operator_memory_coefficient(from._internal_multi_armed_bandit_compound_operator_memory_coefficient());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi_armed_bandit_compound_operator_exploration_coefficient = from._internal_multi_armed_bandit_compound_operator_exploration_coefficient();
  uint64_t raw_multi_armed_bandit_compound_operator_exploration_coefficient;
  memcpy(&raw_multi_armed_bandit_compound_operator_exploration_coefficient, &tmp_multi_armed_bandit_compound_operator_exploration_coefficient, sizeof(tmp_multi_armed_bandit_compound_operator_exploration_coefficient));
  if (raw_multi_armed_bandit_compound_operator_exploration_coefficient != 0) {
    _this->_internal_set_multi_armed_bandit_compound_operator_exploration_coefficient(from._internal_multi_armed_bandit_compound_operator_exploration_coefficient());
  }
  if (from._internal_cheapest_insertion_ls_operator_min_neighbors() != 0) {
    _this->_internal_set_cheapest_insertion_ls_operator_min_neighbors(from._internal_cheapest_insertion_ls_operator_min_neighbors());
  }
  if (from._internal_use_generalized_cp_sat() != 0) {
    _this->_internal_set_use_generalized_cp_sat(from._internal_use_generalized_cp_sat());
  }
  if (from._internal_local_cheapest_insertion_pickup_delivery_strategy() != 0) {
    _this->_internal_set_local_cheapest_insertion_pickup_delivery_strategy(from._internal_local_cheapest_insertion_pickup_delivery_strategy());
  }
  if (from._internal_fallback_to_cp_sat_size_threshold() != 0) {
    _this->_internal_set_fallback_to_cp_sat_size_threshold(from._internal_fallback_to_cp_sat_size_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSearchParameters::CopyFrom(const RoutingSearchParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingSearchParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSearchParameters::IsInitialized() const {
  return true;
}

void RoutingSearchParameters::InternalSwap(RoutingSearchParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_tag_, lhs_arena,
      &other->_impl_.log_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSearchParameters, _impl_.fallback_to_cp_sat_size_threshold_)
      + sizeof(RoutingSearchParameters::_impl_.fallback_to_cp_sat_size_threshold_)
      - PROTOBUF_FIELD_OFFSET(RoutingSearchParameters, _impl_.local_search_operators_)>(
          reinterpret_cast<char*>(&_impl_.local_search_operators_),
          reinterpret_cast<char*>(&other->_impl_.local_search_operators_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSearchParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[2]);
}

// ===================================================================

class RoutingModelParameters::_Internal {
 public:
  static const ::operations_research::ConstraintSolverParameters& solver_parameters(const RoutingModelParameters* msg);
};

const ::operations_research::ConstraintSolverParameters&
RoutingModelParameters::_Internal::solver_parameters(const RoutingModelParameters* msg) {
  return *msg->_impl_.solver_parameters_;
}
void RoutingModelParameters::clear_solver_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.solver_parameters_ != nullptr) {
    delete _impl_.solver_parameters_;
  }
  _impl_.solver_parameters_ = nullptr;
}
RoutingModelParameters::RoutingModelParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingModelParameters)
}
RoutingModelParameters::RoutingModelParameters(const RoutingModelParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingModelParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.solver_parameters_){nullptr}
    , decltype(_impl_.reduce_vehicle_cost_model_){}
    , decltype(_impl_.max_callback_cache_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_parameters()) {
    _this->_impl_.solver_parameters_ = new ::operations_research::ConstraintSolverParameters(*from._impl_.solver_parameters_);
  }
  ::memcpy(&_impl_.reduce_vehicle_cost_model_, &from._impl_.reduce_vehicle_cost_model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_callback_cache_size_) -
    reinterpret_cast<char*>(&_impl_.reduce_vehicle_cost_model_)) + sizeof(_impl_.max_callback_cache_size_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingModelParameters)
}

inline void RoutingModelParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.solver_parameters_){nullptr}
    , decltype(_impl_.reduce_vehicle_cost_model_){false}
    , decltype(_impl_.max_callback_cache_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingModelParameters::~RoutingModelParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingModelParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingModelParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.solver_parameters_;
}

void RoutingModelParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingModelParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingModelParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.solver_parameters_ != nullptr) {
    delete _impl_.solver_parameters_;
  }
  _impl_.solver_parameters_ = nullptr;
  ::memset(&_impl_.reduce_vehicle_cost_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_callback_cache_size_) -
      reinterpret_cast<char*>(&_impl_.reduce_vehicle_cost_model_)) + sizeof(_impl_.max_callback_cache_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingModelParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.ConstraintSolverParameters solver_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reduce_vehicle_cost_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reduce_vehicle_cost_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_callback_cache_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_callback_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingModelParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingModelParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.ConstraintSolverParameters solver_parameters = 1;
  if (this->_internal_has_solver_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::solver_parameters(this),
        _Internal::solver_parameters(this).GetCachedSize(), target, stream);
  }

  // bool reduce_vehicle_cost_model = 2;
  if (this->_internal_reduce_vehicle_cost_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_reduce_vehicle_cost_model(), target);
  }

  // int32 max_callback_cache_size = 3;
  if (this->_internal_max_callback_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_callback_cache_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingModelParameters)
  return target;
}

size_t RoutingModelParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingModelParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.ConstraintSolverParameters solver_parameters = 1;
  if (this->_internal_has_solver_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.solver_parameters_);
  }

  // bool reduce_vehicle_cost_model = 2;
  if (this->_internal_reduce_vehicle_cost_model() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_callback_cache_size = 3;
  if (this->_internal_max_callback_cache_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_callback_cache_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingModelParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingModelParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingModelParameters::GetClassData() const { return &_class_data_; }


void RoutingModelParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingModelParameters*>(&to_msg);
  auto& from = static_cast<const RoutingModelParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingModelParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solver_parameters()) {
    _this->_internal_mutable_solver_parameters()->::operations_research::ConstraintSolverParameters::MergeFrom(
        from._internal_solver_parameters());
  }
  if (from._internal_reduce_vehicle_cost_model() != 0) {
    _this->_internal_set_reduce_vehicle_cost_model(from._internal_reduce_vehicle_cost_model());
  }
  if (from._internal_max_callback_cache_size() != 0) {
    _this->_internal_set_max_callback_cache_size(from._internal_max_callback_cache_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingModelParameters::CopyFrom(const RoutingModelParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingModelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingModelParameters::IsInitialized() const {
  return true;
}

void RoutingModelParameters::InternalSwap(RoutingModelParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingModelParameters, _impl_.max_callback_cache_size_)
      + sizeof(RoutingModelParameters::_impl_.max_callback_cache_size_)
      - PROTOBUF_FIELD_OFFSET(RoutingModelParameters, _impl_.solver_parameters_)>(
          reinterpret_cast<char*>(&_impl_.solver_parameters_),
          reinterpret_cast<char*>(&other->_impl_.solver_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingModelParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*
Arena::CreateMaybeMessage< ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*
Arena::CreateMaybeMessage< ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::RoutingSearchParameters*
Arena::CreateMaybeMessage< ::operations_research::RoutingSearchParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingSearchParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::RoutingModelParameters*
Arena::CreateMaybeMessage< ::operations_research::RoutingModelParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingModelParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
