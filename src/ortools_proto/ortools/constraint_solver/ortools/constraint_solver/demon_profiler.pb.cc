// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/demon_profiler.proto

#include "ortools/constraint_solver/demon_profiler.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
PROTOBUF_CONSTEXPR DemonRuns::DemonRuns(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_time_)*/{}
  , /*decltype(_impl_._start_time_cached_byte_size_)*/{0}
  , /*decltype(_impl_.end_time_)*/{}
  , /*decltype(_impl_._end_time_cached_byte_size_)*/{0}
  , /*decltype(_impl_.demon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failures_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DemonRunsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DemonRunsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DemonRunsDefaultTypeInternal() {}
  union {
    DemonRuns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DemonRunsDefaultTypeInternal _DemonRuns_default_instance_;
PROTOBUF_CONSTEXPR ConstraintRuns::ConstraintRuns(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.initial_propagation_start_time_)*/{}
  , /*decltype(_impl_._initial_propagation_start_time_cached_byte_size_)*/{0}
  , /*decltype(_impl_.initial_propagation_end_time_)*/{}
  , /*decltype(_impl_._initial_propagation_end_time_cached_byte_size_)*/{0}
  , /*decltype(_impl_.demons_)*/{}
  , /*decltype(_impl_.constraint_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failures_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConstraintRunsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstraintRunsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstraintRunsDefaultTypeInternal() {}
  union {
    ConstraintRuns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstraintRunsDefaultTypeInternal _ConstraintRuns_default_instance_;
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::DemonRuns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::DemonRuns, _impl_.demon_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::DemonRuns, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::DemonRuns, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::DemonRuns, _impl_.failures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _impl_.constraint_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _impl_.initial_propagation_start_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _impl_.initial_propagation_end_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _impl_.failures_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintRuns, _impl_.demons_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::DemonRuns)},
  { 10, -1, -1, sizeof(::operations_research::ConstraintRuns)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::_DemonRuns_default_instance_._instance,
  &::operations_research::_ConstraintRuns_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.ortools/constraint_solver/demon_profil"
  "er.proto\022\023operations_research\"U\n\tDemonRu"
  "ns\022\020\n\010demon_id\030\001 \001(\t\022\022\n\nstart_time\030\002 \003(\003"
  "\022\020\n\010end_time\030\003 \003(\003\022\020\n\010failures\030\004 \001(\003\"\267\001\n"
  "\016ConstraintRuns\022\025\n\rconstraint_id\030\001 \001(\t\022&"
  "\n\036initial_propagation_start_time\030\002 \003(\003\022$"
  "\n\034initial_propagation_end_time\030\003 \003(\003\022\020\n\010"
  "failures\030\004 \001(\003\022.\n\006demons\030\005 \003(\0132\036.operati"
  "ons_research.DemonRunsb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto = {
    false, false, 350, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto,
    "ortools/constraint_solver/demon_profiler.proto",
    &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto::offsets,
    file_level_metadata_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto,
    file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_getter() {
  return &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto(&descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto);
namespace operations_research {

// ===================================================================

class DemonRuns::_Internal {
 public:
};

DemonRuns::DemonRuns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.DemonRuns)
}
DemonRuns::DemonRuns(const DemonRuns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DemonRuns* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){from._impl_.start_time_}
    , /*decltype(_impl_._start_time_cached_byte_size_)*/{0}
    , decltype(_impl_.end_time_){from._impl_.end_time_}
    , /*decltype(_impl_._end_time_cached_byte_size_)*/{0}
    , decltype(_impl_.demon_id_){}
    , decltype(_impl_.failures_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.demon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.demon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_demon_id().empty()) {
    _this->_impl_.demon_id_.Set(from._internal_demon_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.failures_ = from._impl_.failures_;
  // @@protoc_insertion_point(copy_constructor:operations_research.DemonRuns)
}

inline void DemonRuns::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){arena}
    , /*decltype(_impl_._start_time_cached_byte_size_)*/{0}
    , decltype(_impl_.end_time_){arena}
    , /*decltype(_impl_._end_time_cached_byte_size_)*/{0}
    , decltype(_impl_.demon_id_){}
    , decltype(_impl_.failures_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.demon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.demon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DemonRuns::~DemonRuns() {
  // @@protoc_insertion_point(destructor:operations_research.DemonRuns)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DemonRuns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_time_.~RepeatedField();
  _impl_.end_time_.~RepeatedField();
  _impl_.demon_id_.Destroy();
}

void DemonRuns::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DemonRuns::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.DemonRuns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.start_time_.Clear();
  _impl_.end_time_.Clear();
  _impl_.demon_id_.ClearToEmpty();
  _impl_.failures_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemonRuns::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string demon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_demon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.DemonRuns.demon_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_start_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_start_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_end_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_end_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 failures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DemonRuns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.DemonRuns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string demon_id = 1;
  if (!this->_internal_demon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_demon_id().data(), static_cast<int>(this->_internal_demon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.DemonRuns.demon_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_demon_id(), target);
  }

  // repeated int64 start_time = 2;
  {
    int byte_size = _impl_._start_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_start_time(), byte_size, target);
    }
  }

  // repeated int64 end_time = 3;
  {
    int byte_size = _impl_._end_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_end_time(), byte_size, target);
    }
  }

  // int64 failures = 4;
  if (this->_internal_failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.DemonRuns)
  return target;
}

size_t DemonRuns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.DemonRuns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 start_time = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.start_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._start_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 end_time = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.end_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._end_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string demon_id = 1;
  if (!this->_internal_demon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_demon_id());
  }

  // int64 failures = 4;
  if (this->_internal_failures() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_failures());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DemonRuns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DemonRuns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DemonRuns::GetClassData() const { return &_class_data_; }


void DemonRuns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DemonRuns*>(&to_msg);
  auto& from = static_cast<const DemonRuns&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.DemonRuns)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.start_time_.MergeFrom(from._impl_.start_time_);
  _this->_impl_.end_time_.MergeFrom(from._impl_.end_time_);
  if (!from._internal_demon_id().empty()) {
    _this->_internal_set_demon_id(from._internal_demon_id());
  }
  if (from._internal_failures() != 0) {
    _this->_internal_set_failures(from._internal_failures());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DemonRuns::CopyFrom(const DemonRuns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.DemonRuns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemonRuns::IsInitialized() const {
  return true;
}

void DemonRuns::InternalSwap(DemonRuns* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.start_time_.InternalSwap(&other->_impl_.start_time_);
  _impl_.end_time_.InternalSwap(&other->_impl_.end_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.demon_id_, lhs_arena,
      &other->_impl_.demon_id_, rhs_arena
  );
  swap(_impl_.failures_, other->_impl_.failures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemonRuns::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto[0]);
}

// ===================================================================

class ConstraintRuns::_Internal {
 public:
};

ConstraintRuns::ConstraintRuns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.ConstraintRuns)
}
ConstraintRuns::ConstraintRuns(const ConstraintRuns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConstraintRuns* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_propagation_start_time_){from._impl_.initial_propagation_start_time_}
    , /*decltype(_impl_._initial_propagation_start_time_cached_byte_size_)*/{0}
    , decltype(_impl_.initial_propagation_end_time_){from._impl_.initial_propagation_end_time_}
    , /*decltype(_impl_._initial_propagation_end_time_cached_byte_size_)*/{0}
    , decltype(_impl_.demons_){from._impl_.demons_}
    , decltype(_impl_.constraint_id_){}
    , decltype(_impl_.failures_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.constraint_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_constraint_id().empty()) {
    _this->_impl_.constraint_id_.Set(from._internal_constraint_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.failures_ = from._impl_.failures_;
  // @@protoc_insertion_point(copy_constructor:operations_research.ConstraintRuns)
}

inline void ConstraintRuns::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.initial_propagation_start_time_){arena}
    , /*decltype(_impl_._initial_propagation_start_time_cached_byte_size_)*/{0}
    , decltype(_impl_.initial_propagation_end_time_){arena}
    , /*decltype(_impl_._initial_propagation_end_time_cached_byte_size_)*/{0}
    , decltype(_impl_.demons_){arena}
    , decltype(_impl_.constraint_id_){}
    , decltype(_impl_.failures_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.constraint_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constraint_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConstraintRuns::~ConstraintRuns() {
  // @@protoc_insertion_point(destructor:operations_research.ConstraintRuns)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConstraintRuns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initial_propagation_start_time_.~RepeatedField();
  _impl_.initial_propagation_end_time_.~RepeatedField();
  _impl_.demons_.~RepeatedPtrField();
  _impl_.constraint_id_.Destroy();
}

void ConstraintRuns::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConstraintRuns::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.ConstraintRuns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initial_propagation_start_time_.Clear();
  _impl_.initial_propagation_end_time_.Clear();
  _impl_.demons_.Clear();
  _impl_.constraint_id_.ClearToEmpty();
  _impl_.failures_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintRuns::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string constraint_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_constraint_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.ConstraintRuns.constraint_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 initial_propagation_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_initial_propagation_start_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_initial_propagation_start_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 initial_propagation_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_initial_propagation_end_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_initial_propagation_end_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 failures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.DemonRuns demons = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_demons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstraintRuns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.ConstraintRuns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string constraint_id = 1;
  if (!this->_internal_constraint_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_constraint_id().data(), static_cast<int>(this->_internal_constraint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.ConstraintRuns.constraint_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_constraint_id(), target);
  }

  // repeated int64 initial_propagation_start_time = 2;
  {
    int byte_size = _impl_._initial_propagation_start_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_initial_propagation_start_time(), byte_size, target);
    }
  }

  // repeated int64 initial_propagation_end_time = 3;
  {
    int byte_size = _impl_._initial_propagation_end_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_initial_propagation_end_time(), byte_size, target);
    }
  }

  // int64 failures = 4;
  if (this->_internal_failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_failures(), target);
  }

  // repeated .operations_research.DemonRuns demons = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_demons_size()); i < n; i++) {
    const auto& repfield = this->_internal_demons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.ConstraintRuns)
  return target;
}

size_t ConstraintRuns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.ConstraintRuns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 initial_propagation_start_time = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.initial_propagation_start_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._initial_propagation_start_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 initial_propagation_end_time = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.initial_propagation_end_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._initial_propagation_end_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .operations_research.DemonRuns demons = 5;
  total_size += 1UL * this->_internal_demons_size();
  for (const auto& msg : this->_impl_.demons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string constraint_id = 1;
  if (!this->_internal_constraint_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_constraint_id());
  }

  // int64 failures = 4;
  if (this->_internal_failures() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_failures());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstraintRuns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConstraintRuns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstraintRuns::GetClassData() const { return &_class_data_; }


void ConstraintRuns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConstraintRuns*>(&to_msg);
  auto& from = static_cast<const ConstraintRuns&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.ConstraintRuns)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.initial_propagation_start_time_.MergeFrom(from._impl_.initial_propagation_start_time_);
  _this->_impl_.initial_propagation_end_time_.MergeFrom(from._impl_.initial_propagation_end_time_);
  _this->_impl_.demons_.MergeFrom(from._impl_.demons_);
  if (!from._internal_constraint_id().empty()) {
    _this->_internal_set_constraint_id(from._internal_constraint_id());
  }
  if (from._internal_failures() != 0) {
    _this->_internal_set_failures(from._internal_failures());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstraintRuns::CopyFrom(const ConstraintRuns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.ConstraintRuns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintRuns::IsInitialized() const {
  return true;
}

void ConstraintRuns::InternalSwap(ConstraintRuns* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.initial_propagation_start_time_.InternalSwap(&other->_impl_.initial_propagation_start_time_);
  _impl_.initial_propagation_end_time_.InternalSwap(&other->_impl_.initial_propagation_end_time_);
  _impl_.demons_.InternalSwap(&other->_impl_.demons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.constraint_id_, lhs_arena,
      &other->_impl_.constraint_id_, rhs_arena
  );
  swap(_impl_.failures_, other->_impl_.failures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintRuns::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fdemon_5fprofiler_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::DemonRuns*
Arena::CreateMaybeMessage< ::operations_research::DemonRuns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::DemonRuns >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::ConstraintRuns*
Arena::CreateMaybeMessage< ::operations_research::ConstraintRuns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::ConstraintRuns >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
