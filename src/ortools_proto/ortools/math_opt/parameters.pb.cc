// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/parameters.proto

#include "ortools/math_opt/parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace math_opt {
PROTOBUF_CONSTEXPR StrictnessProto::StrictnessProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bad_parameter_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrictnessProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrictnessProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrictnessProtoDefaultTypeInternal() {}
  union {
    StrictnessProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrictnessProtoDefaultTypeInternal _StrictnessProto_default_instance_;
PROTOBUF_CONSTEXPR SolverInitializerProto::SolverInitializerProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gurobi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SolverInitializerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolverInitializerProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolverInitializerProtoDefaultTypeInternal() {}
  union {
    SolverInitializerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolverInitializerProtoDefaultTypeInternal _SolverInitializerProto_default_instance_;
PROTOBUF_CONSTEXPR SolveParametersProto::SolveParametersProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_limit_)*/nullptr
  , /*decltype(_impl_.gscip_)*/nullptr
  , /*decltype(_impl_.gurobi_)*/nullptr
  , /*decltype(_impl_.glop_)*/nullptr
  , /*decltype(_impl_.cp_sat_)*/nullptr
  , /*decltype(_impl_.iteration_limit_)*/int64_t{0}
  , /*decltype(_impl_.enable_output_)*/false
  , /*decltype(_impl_.threads_)*/0
  , /*decltype(_impl_.random_seed_)*/0
  , /*decltype(_impl_.lp_algorithm_)*/0
  , /*decltype(_impl_.presolve_)*/0
  , /*decltype(_impl_.cuts_)*/0
  , /*decltype(_impl_.heuristics_)*/0
  , /*decltype(_impl_.scaling_)*/0
  , /*decltype(_impl_.relative_gap_tolerance_)*/0
  , /*decltype(_impl_.absolute_gap_tolerance_)*/0
  , /*decltype(_impl_.cutoff_limit_)*/0
  , /*decltype(_impl_.objective_limit_)*/0
  , /*decltype(_impl_.best_bound_limit_)*/0
  , /*decltype(_impl_.node_limit_)*/int64_t{0}
  , /*decltype(_impl_.solution_limit_)*/0
  , /*decltype(_impl_.solution_pool_size_)*/0} {}
struct SolveParametersProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolveParametersProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolveParametersProtoDefaultTypeInternal() {}
  union {
    SolveParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolveParametersProtoDefaultTypeInternal _SolveParametersProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fmath_5fopt_2fparameters_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::StrictnessProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::StrictnessProto, _impl_.bad_parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolverInitializerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolverInitializerProto, _impl_.gurobi_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.iteration_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.node_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.cutoff_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.objective_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.best_bound_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.solution_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.enable_output_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.threads_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.random_seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.absolute_gap_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.relative_gap_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.solution_pool_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.lp_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.heuristics_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.gscip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.gurobi_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.glop_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveParametersProto, _impl_.cp_sat_),
  ~0u,
  0,
  8,
  5,
  6,
  7,
  9,
  ~0u,
  1,
  2,
  4,
  3,
  10,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::math_opt::StrictnessProto)},
  { 7, -1, -1, sizeof(::operations_research::math_opt::SolverInitializerProto)},
  { 14, 42, -1, sizeof(::operations_research::math_opt::SolveParametersProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::math_opt::_StrictnessProto_default_instance_._instance,
  &::operations_research::math_opt::_SolverInitializerProto_default_instance_._instance,
  &::operations_research::math_opt::_SolveParametersProto_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fmath_5fopt_2fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!ortools/math_opt/parameters.proto\022\034ope"
  "rations_research.math_opt\032\036google/protob"
  "uf/duration.proto\032%ortools/math_opt/solv"
  "ers/gurobi.proto\032\035ortools/glop/parameter"
  "s.proto\032\031ortools/gscip/gscip.proto\032 orto"
  "ols/sat/sat_parameters.proto\"(\n\017Strictne"
  "ssProto\022\025\n\rbad_parameter\030\001 \001(\010\"^\n\026Solver"
  "InitializerProto\022D\n\006gurobi\030\001 \001(\01324.opera"
  "tions_research.math_opt.GurobiInitialize"
  "rProto\"\267\t\n\024SolveParametersProto\022-\n\ntime_"
  "limit\030\001 \001(\0132\031.google.protobuf.Duration\022\034"
  "\n\017iteration_limit\030\002 \001(\003H\000\210\001\001\022\027\n\nnode_lim"
  "it\030\030 \001(\003H\001\210\001\001\022\031\n\014cutoff_limit\030\024 \001(\001H\002\210\001\001"
  "\022\034\n\017objective_limit\030\025 \001(\001H\003\210\001\001\022\035\n\020best_b"
  "ound_limit\030\026 \001(\001H\004\210\001\001\022\033\n\016solution_limit\030"
  "\027 \001(\005H\005\210\001\001\022\025\n\renable_output\030\003 \001(\010\022\024\n\007thr"
  "eads\030\004 \001(\005H\006\210\001\001\022\030\n\013random_seed\030\005 \001(\005H\007\210\001"
  "\001\022#\n\026absolute_gap_tolerance\030\022 \001(\001H\010\210\001\001\022#"
  "\n\026relative_gap_tolerance\030\021 \001(\001H\t\210\001\001\022\037\n\022s"
  "olution_pool_size\030\031 \001(\005H\n\210\001\001\022D\n\014lp_algor"
  "ithm\030\006 \001(\0162..operations_research.math_op"
  "t.LPAlgorithmProto\022=\n\010presolve\030\007 \001(\0162+.o"
  "perations_research.math_opt.EmphasisProt"
  "o\0229\n\004cuts\030\010 \001(\0162+.operations_research.ma"
  "th_opt.EmphasisProto\022\?\n\nheuristics\030\t \001(\016"
  "2+.operations_research.math_opt.Emphasis"
  "Proto\022<\n\007scaling\030\n \001(\0162+.operations_rese"
  "arch.math_opt.EmphasisProto\0223\n\005gscip\030\014 \001"
  "(\0132$.operations_research.GScipParameters"
  "\022C\n\006gurobi\030\r \001(\01323.operations_research.m"
  "ath_opt.GurobiParametersProto\0226\n\004glop\030\016 "
  "\001(\0132(.operations_research.glop.GlopParam"
  "eters\0226\n\006cp_sat\030\017 \001(\0132&.operations_resea"
  "rch.sat.SatParametersB\022\n\020_iteration_limi"
  "tB\r\n\013_node_limitB\017\n\r_cutoff_limitB\022\n\020_ob"
  "jective_limitB\023\n\021_best_bound_limitB\021\n\017_s"
  "olution_limitB\n\n\010_threadsB\016\n\014_random_see"
  "dB\031\n\027_absolute_gap_toleranceB\031\n\027_relativ"
  "e_gap_toleranceB\025\n\023_solution_pool_sizeJ\004"
  "\010\020\020\021J\004\010\023\020\024J\004\010\013\020\014*\255\001\n\017SolverTypeProto\022\033\n\027"
  "SOLVER_TYPE_UNSPECIFIED\020\000\022\025\n\021SOLVER_TYPE"
  "_GSCIP\020\001\022\026\n\022SOLVER_TYPE_GUROBI\020\002\022\024\n\020SOLV"
  "ER_TYPE_GLOP\020\003\022\026\n\022SOLVER_TYPE_CP_SAT\020\004\022\024"
  "\n\020SOLVER_TYPE_GLPK\020\006\"\004\010\005\020\005\"\004\010\007\020\007*\212\001\n\020LPA"
  "lgorithmProto\022\034\n\030LP_ALGORITHM_UNSPECIFIE"
  "D\020\000\022\037\n\033LP_ALGORITHM_PRIMAL_SIMPLEX\020\001\022\035\n\031"
  "LP_ALGORITHM_DUAL_SIMPLEX\020\002\022\030\n\024LP_ALGORI"
  "THM_BARRIER\020\003*\215\001\n\rEmphasisProto\022\030\n\024EMPHA"
  "SIS_UNSPECIFIED\020\000\022\020\n\014EMPHASIS_OFF\020\001\022\020\n\014E"
  "MPHASIS_LOW\020\002\022\023\n\017EMPHASIS_MEDIUM\020\003\022\021\n\rEM"
  "PHASIS_HIGH\020\004\022\026\n\022EMPHASIS_VERY_HIGH\020\005B\036\n"
  "\032com.google.ortools.mathoptP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ortools_2fglop_2fparameters_2eproto,
  &::descriptor_table_ortools_2fgscip_2fgscip_2eproto,
  &::descriptor_table_ortools_2fmath_5fopt_2fsolvers_2fgurobi_2eproto,
  &::descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto = {
    false, false, 2077, descriptor_table_protodef_ortools_2fmath_5fopt_2fparameters_2eproto,
    "ortools/math_opt/parameters.proto",
    &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_once, descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_deps, 5, 3,
    schemas, file_default_instances, TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto::offsets,
    file_level_metadata_ortools_2fmath_5fopt_2fparameters_2eproto, file_level_enum_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto,
    file_level_service_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_getter() {
  return &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fmath_5fopt_2fparameters_2eproto(&descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto);
namespace operations_research {
namespace math_opt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverTypeProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto[0];
}
bool SolverTypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LPAlgorithmProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto[1];
}
bool LPAlgorithmProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmphasisProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fparameters_2eproto[2];
}
bool EmphasisProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StrictnessProto::_Internal {
 public:
};

StrictnessProto::StrictnessProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.StrictnessProto)
}
StrictnessProto::StrictnessProto(const StrictnessProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrictnessProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_parameter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bad_parameter_ = from._impl_.bad_parameter_;
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.StrictnessProto)
}

inline void StrictnessProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_parameter_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StrictnessProto::~StrictnessProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.StrictnessProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrictnessProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StrictnessProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrictnessProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.StrictnessProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bad_parameter_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrictnessProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bad_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bad_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrictnessProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.StrictnessProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bad_parameter = 1;
  if (this->_internal_bad_parameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bad_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.StrictnessProto)
  return target;
}

size_t StrictnessProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.StrictnessProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bad_parameter = 1;
  if (this->_internal_bad_parameter() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrictnessProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrictnessProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrictnessProto::GetClassData() const { return &_class_data_; }


void StrictnessProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrictnessProto*>(&to_msg);
  auto& from = static_cast<const StrictnessProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.StrictnessProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bad_parameter() != 0) {
    _this->_internal_set_bad_parameter(from._internal_bad_parameter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrictnessProto::CopyFrom(const StrictnessProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.StrictnessProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrictnessProto::IsInitialized() const {
  return true;
}

void StrictnessProto::InternalSwap(StrictnessProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bad_parameter_, other->_impl_.bad_parameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrictnessProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fparameters_2eproto[0]);
}

// ===================================================================

class SolverInitializerProto::_Internal {
 public:
  static const ::operations_research::math_opt::GurobiInitializerProto& gurobi(const SolverInitializerProto* msg);
};

const ::operations_research::math_opt::GurobiInitializerProto&
SolverInitializerProto::_Internal::gurobi(const SolverInitializerProto* msg) {
  return *msg->_impl_.gurobi_;
}
void SolverInitializerProto::clear_gurobi() {
  if (GetArenaForAllocation() == nullptr && _impl_.gurobi_ != nullptr) {
    delete _impl_.gurobi_;
  }
  _impl_.gurobi_ = nullptr;
}
SolverInitializerProto::SolverInitializerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SolverInitializerProto)
}
SolverInitializerProto::SolverInitializerProto(const SolverInitializerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SolverInitializerProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gurobi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gurobi()) {
    _this->_impl_.gurobi_ = new ::operations_research::math_opt::GurobiInitializerProto(*from._impl_.gurobi_);
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SolverInitializerProto)
}

inline void SolverInitializerProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gurobi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SolverInitializerProto::~SolverInitializerProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SolverInitializerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SolverInitializerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gurobi_;
}

void SolverInitializerProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SolverInitializerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SolverInitializerProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gurobi_ != nullptr) {
    delete _impl_.gurobi_;
  }
  _impl_.gurobi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolverInitializerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gurobi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolverInitializerProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SolverInitializerProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
  if (this->_internal_has_gurobi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gurobi(this),
        _Internal::gurobi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SolverInitializerProto)
  return target;
}

size_t SolverInitializerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SolverInitializerProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
  if (this->_internal_has_gurobi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gurobi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolverInitializerProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SolverInitializerProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolverInitializerProto::GetClassData() const { return &_class_data_; }


void SolverInitializerProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SolverInitializerProto*>(&to_msg);
  auto& from = static_cast<const SolverInitializerProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SolverInitializerProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gurobi()) {
    _this->_internal_mutable_gurobi()->::operations_research::math_opt::GurobiInitializerProto::MergeFrom(
        from._internal_gurobi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolverInitializerProto::CopyFrom(const SolverInitializerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SolverInitializerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverInitializerProto::IsInitialized() const {
  return true;
}

void SolverInitializerProto::InternalSwap(SolverInitializerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gurobi_, other->_impl_.gurobi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverInitializerProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fparameters_2eproto[1]);
}

// ===================================================================

class SolveParametersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SolveParametersProto>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_limit(const SolveParametersProto* msg);
  static void set_has_iteration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_node_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cutoff_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_objective_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_bound_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_solution_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_absolute_gap_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_relative_gap_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_solution_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::operations_research::GScipParameters& gscip(const SolveParametersProto* msg);
  static const ::operations_research::math_opt::GurobiParametersProto& gurobi(const SolveParametersProto* msg);
  static const ::operations_research::glop::GlopParameters& glop(const SolveParametersProto* msg);
  static const ::operations_research::sat::SatParameters& cp_sat(const SolveParametersProto* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SolveParametersProto::_Internal::time_limit(const SolveParametersProto* msg) {
  return *msg->_impl_.time_limit_;
}
const ::operations_research::GScipParameters&
SolveParametersProto::_Internal::gscip(const SolveParametersProto* msg) {
  return *msg->_impl_.gscip_;
}
const ::operations_research::math_opt::GurobiParametersProto&
SolveParametersProto::_Internal::gurobi(const SolveParametersProto* msg) {
  return *msg->_impl_.gurobi_;
}
const ::operations_research::glop::GlopParameters&
SolveParametersProto::_Internal::glop(const SolveParametersProto* msg) {
  return *msg->_impl_.glop_;
}
const ::operations_research::sat::SatParameters&
SolveParametersProto::_Internal::cp_sat(const SolveParametersProto* msg) {
  return *msg->_impl_.cp_sat_;
}
void SolveParametersProto::clear_time_limit() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_limit_ != nullptr) {
    delete _impl_.time_limit_;
  }
  _impl_.time_limit_ = nullptr;
}
void SolveParametersProto::clear_gscip() {
  if (GetArenaForAllocation() == nullptr && _impl_.gscip_ != nullptr) {
    delete _impl_.gscip_;
  }
  _impl_.gscip_ = nullptr;
}
void SolveParametersProto::clear_gurobi() {
  if (GetArenaForAllocation() == nullptr && _impl_.gurobi_ != nullptr) {
    delete _impl_.gurobi_;
  }
  _impl_.gurobi_ = nullptr;
}
void SolveParametersProto::clear_glop() {
  if (GetArenaForAllocation() == nullptr && _impl_.glop_ != nullptr) {
    delete _impl_.glop_;
  }
  _impl_.glop_ = nullptr;
}
void SolveParametersProto::clear_cp_sat() {
  if (GetArenaForAllocation() == nullptr && _impl_.cp_sat_ != nullptr) {
    delete _impl_.cp_sat_;
  }
  _impl_.cp_sat_ = nullptr;
}
SolveParametersProto::SolveParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SolveParametersProto)
}
SolveParametersProto::SolveParametersProto(const SolveParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SolveParametersProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_limit_){nullptr}
    , decltype(_impl_.gscip_){nullptr}
    , decltype(_impl_.gurobi_){nullptr}
    , decltype(_impl_.glop_){nullptr}
    , decltype(_impl_.cp_sat_){nullptr}
    , decltype(_impl_.iteration_limit_){}
    , decltype(_impl_.enable_output_){}
    , decltype(_impl_.threads_){}
    , decltype(_impl_.random_seed_){}
    , decltype(_impl_.lp_algorithm_){}
    , decltype(_impl_.presolve_){}
    , decltype(_impl_.cuts_){}
    , decltype(_impl_.heuristics_){}
    , decltype(_impl_.scaling_){}
    , decltype(_impl_.relative_gap_tolerance_){}
    , decltype(_impl_.absolute_gap_tolerance_){}
    , decltype(_impl_.cutoff_limit_){}
    , decltype(_impl_.objective_limit_){}
    , decltype(_impl_.best_bound_limit_){}
    , decltype(_impl_.node_limit_){}
    , decltype(_impl_.solution_limit_){}
    , decltype(_impl_.solution_pool_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_limit()) {
    _this->_impl_.time_limit_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_limit_);
  }
  if (from._internal_has_gscip()) {
    _this->_impl_.gscip_ = new ::operations_research::GScipParameters(*from._impl_.gscip_);
  }
  if (from._internal_has_gurobi()) {
    _this->_impl_.gurobi_ = new ::operations_research::math_opt::GurobiParametersProto(*from._impl_.gurobi_);
  }
  if (from._internal_has_glop()) {
    _this->_impl_.glop_ = new ::operations_research::glop::GlopParameters(*from._impl_.glop_);
  }
  if (from._internal_has_cp_sat()) {
    _this->_impl_.cp_sat_ = new ::operations_research::sat::SatParameters(*from._impl_.cp_sat_);
  }
  ::memcpy(&_impl_.iteration_limit_, &from._impl_.iteration_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.solution_pool_size_) -
    reinterpret_cast<char*>(&_impl_.iteration_limit_)) + sizeof(_impl_.solution_pool_size_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SolveParametersProto)
}

inline void SolveParametersProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_limit_){nullptr}
    , decltype(_impl_.gscip_){nullptr}
    , decltype(_impl_.gurobi_){nullptr}
    , decltype(_impl_.glop_){nullptr}
    , decltype(_impl_.cp_sat_){nullptr}
    , decltype(_impl_.iteration_limit_){int64_t{0}}
    , decltype(_impl_.enable_output_){false}
    , decltype(_impl_.threads_){0}
    , decltype(_impl_.random_seed_){0}
    , decltype(_impl_.lp_algorithm_){0}
    , decltype(_impl_.presolve_){0}
    , decltype(_impl_.cuts_){0}
    , decltype(_impl_.heuristics_){0}
    , decltype(_impl_.scaling_){0}
    , decltype(_impl_.relative_gap_tolerance_){0}
    , decltype(_impl_.absolute_gap_tolerance_){0}
    , decltype(_impl_.cutoff_limit_){0}
    , decltype(_impl_.objective_limit_){0}
    , decltype(_impl_.best_bound_limit_){0}
    , decltype(_impl_.node_limit_){int64_t{0}}
    , decltype(_impl_.solution_limit_){0}
    , decltype(_impl_.solution_pool_size_){0}
  };
}

SolveParametersProto::~SolveParametersProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SolveParametersProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SolveParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_limit_;
  if (this != internal_default_instance()) delete _impl_.gscip_;
  if (this != internal_default_instance()) delete _impl_.gurobi_;
  if (this != internal_default_instance()) delete _impl_.glop_;
  if (this != internal_default_instance()) delete _impl_.cp_sat_;
}

void SolveParametersProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SolveParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SolveParametersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_limit_ != nullptr) {
    delete _impl_.time_limit_;
  }
  _impl_.time_limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gscip_ != nullptr) {
    delete _impl_.gscip_;
  }
  _impl_.gscip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gurobi_ != nullptr) {
    delete _impl_.gurobi_;
  }
  _impl_.gurobi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.glop_ != nullptr) {
    delete _impl_.glop_;
  }
  _impl_.glop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cp_sat_ != nullptr) {
    delete _impl_.cp_sat_;
  }
  _impl_.cp_sat_ = nullptr;
  _impl_.iteration_limit_ = int64_t{0};
  _impl_.enable_output_ = false;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.threads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.random_seed_) -
        reinterpret_cast<char*>(&_impl_.threads_)) + sizeof(_impl_.random_seed_));
  }
  ::memset(&_impl_.lp_algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scaling_) -
      reinterpret_cast<char*>(&_impl_.lp_algorithm_)) + sizeof(_impl_.scaling_));
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.relative_gap_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.best_bound_limit_) -
        reinterpret_cast<char*>(&_impl_.relative_gap_tolerance_)) + sizeof(_impl_.best_bound_limit_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.node_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.solution_pool_size_) -
        reinterpret_cast<char*>(&_impl_.node_limit_)) + sizeof(_impl_.solution_pool_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolveParametersProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration time_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 iteration_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_iteration_limit(&has_bits);
          _impl_.iteration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enable_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 threads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_threads(&has_bits);
          _impl_.threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 random_seed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_random_seed(&has_bits);
          _impl_.random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lp_algorithm(static_cast<::operations_research::math_opt::LPAlgorithmProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.EmphasisProto presolve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presolve(static_cast<::operations_research::math_opt::EmphasisProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.EmphasisProto cuts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cuts(static_cast<::operations_research::math_opt::EmphasisProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.EmphasisProto heuristics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_heuristics(static_cast<::operations_research::math_opt::EmphasisProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.EmphasisProto scaling = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scaling(static_cast<::operations_research::math_opt::EmphasisProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.GScipParameters gscip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gscip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.GurobiParametersProto gurobi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gurobi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.glop.GlopParameters glop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_glop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.sat.SatParameters cp_sat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_sat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_gap_tolerance = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_relative_gap_tolerance(&has_bits);
          _impl_.relative_gap_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double absolute_gap_tolerance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_absolute_gap_tolerance(&has_bits);
          _impl_.absolute_gap_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cutoff_limit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_cutoff_limit(&has_bits);
          _impl_.cutoff_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_limit = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_objective_limit(&has_bits);
          _impl_.objective_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double best_bound_limit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_best_bound_limit(&has_bits);
          _impl_.best_bound_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 solution_limit = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_solution_limit(&has_bits);
          _impl_.solution_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 node_limit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_node_limit(&has_bits);
          _impl_.node_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 solution_pool_size = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_solution_pool_size(&has_bits);
          _impl_.solution_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolveParametersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SolveParametersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_limit = 1;
  if (this->_internal_has_time_limit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_limit(this),
        _Internal::time_limit(this).GetCachedSize(), target, stream);
  }

  // optional int64 iteration_limit = 2;
  if (_internal_has_iteration_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_iteration_limit(), target);
  }

  // bool enable_output = 3;
  if (this->_internal_enable_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_output(), target);
  }

  // optional int32 threads = 4;
  if (_internal_has_threads()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_threads(), target);
  }

  // optional int32 random_seed = 5;
  if (_internal_has_random_seed()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_random_seed(), target);
  }

  // .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
  if (this->_internal_lp_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_lp_algorithm(), target);
  }

  // .operations_research.math_opt.EmphasisProto presolve = 7;
  if (this->_internal_presolve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_presolve(), target);
  }

  // .operations_research.math_opt.EmphasisProto cuts = 8;
  if (this->_internal_cuts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_cuts(), target);
  }

  // .operations_research.math_opt.EmphasisProto heuristics = 9;
  if (this->_internal_heuristics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_heuristics(), target);
  }

  // .operations_research.math_opt.EmphasisProto scaling = 10;
  if (this->_internal_scaling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_scaling(), target);
  }

  // .operations_research.GScipParameters gscip = 12;
  if (this->_internal_has_gscip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gscip(this),
        _Internal::gscip(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.GurobiParametersProto gurobi = 13;
  if (this->_internal_has_gurobi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::gurobi(this),
        _Internal::gurobi(this).GetCachedSize(), target, stream);
  }

  // .operations_research.glop.GlopParameters glop = 14;
  if (this->_internal_has_glop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::glop(this),
        _Internal::glop(this).GetCachedSize(), target, stream);
  }

  // .operations_research.sat.SatParameters cp_sat = 15;
  if (this->_internal_has_cp_sat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::cp_sat(this),
        _Internal::cp_sat(this).GetCachedSize(), target, stream);
  }

  // optional double relative_gap_tolerance = 17;
  if (_internal_has_relative_gap_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_relative_gap_tolerance(), target);
  }

  // optional double absolute_gap_tolerance = 18;
  if (_internal_has_absolute_gap_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_absolute_gap_tolerance(), target);
  }

  // optional double cutoff_limit = 20;
  if (_internal_has_cutoff_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_cutoff_limit(), target);
  }

  // optional double objective_limit = 21;
  if (_internal_has_objective_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_objective_limit(), target);
  }

  // optional double best_bound_limit = 22;
  if (_internal_has_best_bound_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_best_bound_limit(), target);
  }

  // optional int32 solution_limit = 23;
  if (_internal_has_solution_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_solution_limit(), target);
  }

  // optional int64 node_limit = 24;
  if (_internal_has_node_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_node_limit(), target);
  }

  // optional int32 solution_pool_size = 25;
  if (_internal_has_solution_pool_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_solution_pool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SolveParametersProto)
  return target;
}

size_t SolveParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SolveParametersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration time_limit = 1;
  if (this->_internal_has_time_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_limit_);
  }

  // .operations_research.GScipParameters gscip = 12;
  if (this->_internal_has_gscip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gscip_);
  }

  // .operations_research.math_opt.GurobiParametersProto gurobi = 13;
  if (this->_internal_has_gurobi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gurobi_);
  }

  // .operations_research.glop.GlopParameters glop = 14;
  if (this->_internal_has_glop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.glop_);
  }

  // .operations_research.sat.SatParameters cp_sat = 15;
  if (this->_internal_has_cp_sat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cp_sat_);
  }

  // optional int64 iteration_limit = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_iteration_limit());
  }

  // bool enable_output = 3;
  if (this->_internal_enable_output() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00000006u) {
    // optional int32 threads = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_threads());
    }

    // optional int32 random_seed = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_random_seed());
    }

  }
  // .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
  if (this->_internal_lp_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lp_algorithm());
  }

  // .operations_research.math_opt.EmphasisProto presolve = 7;
  if (this->_internal_presolve() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_presolve());
  }

  // .operations_research.math_opt.EmphasisProto cuts = 8;
  if (this->_internal_cuts() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cuts());
  }

  // .operations_research.math_opt.EmphasisProto heuristics = 9;
  if (this->_internal_heuristics() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_heuristics());
  }

  // .operations_research.math_opt.EmphasisProto scaling = 10;
  if (this->_internal_scaling() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scaling());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional double relative_gap_tolerance = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double absolute_gap_tolerance = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double cutoff_limit = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double objective_limit = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double best_bound_limit = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 node_limit = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_node_limit());
    }

    // optional int32 solution_limit = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_solution_limit());
    }

    // optional int32 solution_pool_size = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_solution_pool_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolveParametersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SolveParametersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolveParametersProto::GetClassData() const { return &_class_data_; }


void SolveParametersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SolveParametersProto*>(&to_msg);
  auto& from = static_cast<const SolveParametersProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SolveParametersProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_limit()) {
    _this->_internal_mutable_time_limit()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_limit());
  }
  if (from._internal_has_gscip()) {
    _this->_internal_mutable_gscip()->::operations_research::GScipParameters::MergeFrom(
        from._internal_gscip());
  }
  if (from._internal_has_gurobi()) {
    _this->_internal_mutable_gurobi()->::operations_research::math_opt::GurobiParametersProto::MergeFrom(
        from._internal_gurobi());
  }
  if (from._internal_has_glop()) {
    _this->_internal_mutable_glop()->::operations_research::glop::GlopParameters::MergeFrom(
        from._internal_glop());
  }
  if (from._internal_has_cp_sat()) {
    _this->_internal_mutable_cp_sat()->::operations_research::sat::SatParameters::MergeFrom(
        from._internal_cp_sat());
  }
  if (from._internal_has_iteration_limit()) {
    _this->_internal_set_iteration_limit(from._internal_iteration_limit());
  }
  if (from._internal_enable_output() != 0) {
    _this->_internal_set_enable_output(from._internal_enable_output());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.threads_ = from._impl_.threads_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.random_seed_ = from._impl_.random_seed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_lp_algorithm() != 0) {
    _this->_internal_set_lp_algorithm(from._internal_lp_algorithm());
  }
  if (from._internal_presolve() != 0) {
    _this->_internal_set_presolve(from._internal_presolve());
  }
  if (from._internal_cuts() != 0) {
    _this->_internal_set_cuts(from._internal_cuts());
  }
  if (from._internal_heuristics() != 0) {
    _this->_internal_set_heuristics(from._internal_heuristics());
  }
  if (from._internal_scaling() != 0) {
    _this->_internal_set_scaling(from._internal_scaling());
  }
  if (cached_has_bits & 0x000000f8u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.relative_gap_tolerance_ = from._impl_.relative_gap_tolerance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.absolute_gap_tolerance_ = from._impl_.absolute_gap_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cutoff_limit_ = from._impl_.cutoff_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.objective_limit_ = from._impl_.objective_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.best_bound_limit_ = from._impl_.best_bound_limit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.node_limit_ = from._impl_.node_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.solution_limit_ = from._impl_.solution_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.solution_pool_size_ = from._impl_.solution_pool_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolveParametersProto::CopyFrom(const SolveParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SolveParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolveParametersProto::IsInitialized() const {
  return true;
}

void SolveParametersProto::InternalSwap(SolveParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveParametersProto, _impl_.solution_pool_size_)
      + sizeof(SolveParametersProto::_impl_.solution_pool_size_)
      - PROTOBUF_FIELD_OFFSET(SolveParametersProto, _impl_.time_limit_)>(
          reinterpret_cast<char*>(&_impl_.time_limit_),
          reinterpret_cast<char*>(&other->_impl_.time_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolveParametersProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fparameters_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::StrictnessProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::StrictnessProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::StrictnessProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SolverInitializerProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SolverInitializerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SolverInitializerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SolveParametersProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SolveParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SolveParametersProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
