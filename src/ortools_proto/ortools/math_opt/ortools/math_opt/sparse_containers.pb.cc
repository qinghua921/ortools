// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/sparse_containers.proto

#include "ortools/math_opt/sparse_containers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace math_opt {
PROTOBUF_CONSTEXPR SparseDoubleVectorProto::SparseDoubleVectorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseDoubleVectorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseDoubleVectorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseDoubleVectorProtoDefaultTypeInternal() {}
  union {
    SparseDoubleVectorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseDoubleVectorProtoDefaultTypeInternal _SparseDoubleVectorProto_default_instance_;
PROTOBUF_CONSTEXPR SparseBoolVectorProto::SparseBoolVectorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseBoolVectorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseBoolVectorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseBoolVectorProtoDefaultTypeInternal() {}
  union {
    SparseBoolVectorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseBoolVectorProtoDefaultTypeInternal _SparseBoolVectorProto_default_instance_;
PROTOBUF_CONSTEXPR SparseInt32VectorProto::SparseInt32VectorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseInt32VectorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseInt32VectorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseInt32VectorProtoDefaultTypeInternal() {}
  union {
    SparseInt32VectorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseInt32VectorProtoDefaultTypeInternal _SparseInt32VectorProto_default_instance_;
PROTOBUF_CONSTEXPR SparseVectorFilterProto::SparseVectorFilterProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filtered_ids_)*/{}
  , /*decltype(_impl_._filtered_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skip_zero_values_)*/false
  , /*decltype(_impl_.filter_by_ids_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseVectorFilterProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseVectorFilterProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseVectorFilterProtoDefaultTypeInternal() {}
  union {
    SparseVectorFilterProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseVectorFilterProtoDefaultTypeInternal _SparseVectorFilterProto_default_instance_;
PROTOBUF_CONSTEXPR SparseDoubleMatrixProto::SparseDoubleMatrixProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_ids_)*/{}
  , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.column_ids_)*/{}
  , /*decltype(_impl_._column_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.coefficients_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SparseDoubleMatrixProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseDoubleMatrixProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseDoubleMatrixProtoDefaultTypeInternal() {}
  union {
    SparseDoubleMatrixProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseDoubleMatrixProtoDefaultTypeInternal _SparseDoubleMatrixProto_default_instance_;
PROTOBUF_CONSTEXPR LinearExpressionProto::LinearExpressionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.coefficients_)*/{}
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinearExpressionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearExpressionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearExpressionProtoDefaultTypeInternal() {}
  union {
    LinearExpressionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearExpressionProtoDefaultTypeInternal _LinearExpressionProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleVectorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleVectorProto, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleVectorProto, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseBoolVectorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseBoolVectorProto, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseBoolVectorProto, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseInt32VectorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseInt32VectorProto, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseInt32VectorProto, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseVectorFilterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseVectorFilterProto, _impl_.skip_zero_values_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseVectorFilterProto, _impl_.filter_by_ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseVectorFilterProto, _impl_.filtered_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleMatrixProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleMatrixProto, _impl_.row_ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleMatrixProto, _impl_.column_ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SparseDoubleMatrixProto, _impl_.coefficients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::LinearExpressionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::LinearExpressionProto, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::LinearExpressionProto, _impl_.coefficients_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::LinearExpressionProto, _impl_.offset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::math_opt::SparseDoubleVectorProto)},
  { 8, -1, -1, sizeof(::operations_research::math_opt::SparseBoolVectorProto)},
  { 16, -1, -1, sizeof(::operations_research::math_opt::SparseInt32VectorProto)},
  { 24, -1, -1, sizeof(::operations_research::math_opt::SparseVectorFilterProto)},
  { 33, -1, -1, sizeof(::operations_research::math_opt::SparseDoubleMatrixProto)},
  { 42, -1, -1, sizeof(::operations_research::math_opt::LinearExpressionProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_._instance,
  &::operations_research::math_opt::_SparseBoolVectorProto_default_instance_._instance,
  &::operations_research::math_opt::_SparseInt32VectorProto_default_instance_._instance,
  &::operations_research::math_opt::_SparseVectorFilterProto_default_instance_._instance,
  &::operations_research::math_opt::_SparseDoubleMatrixProto_default_instance_._instance,
  &::operations_research::math_opt::_LinearExpressionProto_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(ortools/math_opt/sparse_containers.pro"
  "to\022\034operations_research.math_opt\"6\n\027Spar"
  "seDoubleVectorProto\022\013\n\003ids\030\001 \003(\003\022\016\n\006valu"
  "es\030\002 \003(\001\"4\n\025SparseBoolVectorProto\022\013\n\003ids"
  "\030\001 \003(\003\022\016\n\006values\030\002 \003(\010\"5\n\026SparseInt32Vec"
  "torProto\022\013\n\003ids\030\001 \003(\003\022\016\n\006values\030\002 \003(\005\"`\n"
  "\027SparseVectorFilterProto\022\030\n\020skip_zero_va"
  "lues\030\001 \001(\010\022\025\n\rfilter_by_ids\030\002 \001(\010\022\024\n\014fil"
  "tered_ids\030\003 \003(\003\"T\n\027SparseDoubleMatrixPro"
  "to\022\017\n\007row_ids\030\001 \003(\003\022\022\n\ncolumn_ids\030\002 \003(\003\022"
  "\024\n\014coefficients\030\003 \003(\001\"J\n\025LinearExpressio"
  "nProto\022\013\n\003ids\030\001 \003(\003\022\024\n\014coefficients\030\002 \003("
  "\001\022\016\n\006offset\030\003 \001(\001B\036\n\032com.google.ortools."
  "mathoptP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto = {
    false, false, 537, descriptor_table_protodef_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto,
    "ortools/math_opt/sparse_containers.proto",
    &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto::offsets,
    file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto, file_level_enum_descriptors_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto,
    file_level_service_descriptors_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter() {
  return &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto(&descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto);
namespace operations_research {
namespace math_opt {

// ===================================================================

class SparseDoubleVectorProto::_Internal {
 public:
};

SparseDoubleVectorProto::SparseDoubleVectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SparseDoubleVectorProto)
}
SparseDoubleVectorProto::SparseDoubleVectorProto(const SparseDoubleVectorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseDoubleVectorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SparseDoubleVectorProto)
}

inline void SparseDoubleVectorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseDoubleVectorProto::~SparseDoubleVectorProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SparseDoubleVectorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseDoubleVectorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void SparseDoubleVectorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseDoubleVectorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SparseDoubleVectorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseDoubleVectorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseDoubleVectorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SparseDoubleVectorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated double values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SparseDoubleVectorProto)
  return target;
}

size_t SparseDoubleVectorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SparseDoubleVectorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseDoubleVectorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseDoubleVectorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseDoubleVectorProto::GetClassData() const { return &_class_data_; }


void SparseDoubleVectorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseDoubleVectorProto*>(&to_msg);
  auto& from = static_cast<const SparseDoubleVectorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SparseDoubleVectorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseDoubleVectorProto::CopyFrom(const SparseDoubleVectorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SparseDoubleVectorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseDoubleVectorProto::IsInitialized() const {
  return true;
}

void SparseDoubleVectorProto::InternalSwap(SparseDoubleVectorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseDoubleVectorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[0]);
}

// ===================================================================

class SparseBoolVectorProto::_Internal {
 public:
};

SparseBoolVectorProto::SparseBoolVectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SparseBoolVectorProto)
}
SparseBoolVectorProto::SparseBoolVectorProto(const SparseBoolVectorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseBoolVectorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SparseBoolVectorProto)
}

inline void SparseBoolVectorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseBoolVectorProto::~SparseBoolVectorProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SparseBoolVectorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseBoolVectorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void SparseBoolVectorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseBoolVectorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SparseBoolVectorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseBoolVectorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseBoolVectorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SparseBoolVectorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated bool values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SparseBoolVectorProto)
  return target;
}

size_t SparseBoolVectorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SparseBoolVectorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseBoolVectorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseBoolVectorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseBoolVectorProto::GetClassData() const { return &_class_data_; }


void SparseBoolVectorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseBoolVectorProto*>(&to_msg);
  auto& from = static_cast<const SparseBoolVectorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SparseBoolVectorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseBoolVectorProto::CopyFrom(const SparseBoolVectorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SparseBoolVectorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseBoolVectorProto::IsInitialized() const {
  return true;
}

void SparseBoolVectorProto::InternalSwap(SparseBoolVectorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseBoolVectorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[1]);
}

// ===================================================================

class SparseInt32VectorProto::_Internal {
 public:
};

SparseInt32VectorProto::SparseInt32VectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SparseInt32VectorProto)
}
SparseInt32VectorProto::SparseInt32VectorProto(const SparseInt32VectorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseInt32VectorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SparseInt32VectorProto)
}

inline void SparseInt32VectorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseInt32VectorProto::~SparseInt32VectorProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SparseInt32VectorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseInt32VectorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void SparseInt32VectorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseInt32VectorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SparseInt32VectorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseInt32VectorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseInt32VectorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SparseInt32VectorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated int32 values = 2;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SparseInt32VectorProto)
  return target;
}

size_t SparseInt32VectorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SparseInt32VectorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 values = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseInt32VectorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseInt32VectorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseInt32VectorProto::GetClassData() const { return &_class_data_; }


void SparseInt32VectorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseInt32VectorProto*>(&to_msg);
  auto& from = static_cast<const SparseInt32VectorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SparseInt32VectorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseInt32VectorProto::CopyFrom(const SparseInt32VectorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SparseInt32VectorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseInt32VectorProto::IsInitialized() const {
  return true;
}

void SparseInt32VectorProto::InternalSwap(SparseInt32VectorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseInt32VectorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[2]);
}

// ===================================================================

class SparseVectorFilterProto::_Internal {
 public:
};

SparseVectorFilterProto::SparseVectorFilterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SparseVectorFilterProto)
}
SparseVectorFilterProto::SparseVectorFilterProto(const SparseVectorFilterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseVectorFilterProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filtered_ids_){from._impl_.filtered_ids_}
    , /*decltype(_impl_._filtered_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.skip_zero_values_){}
    , decltype(_impl_.filter_by_ids_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skip_zero_values_, &from._impl_.skip_zero_values_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filter_by_ids_) -
    reinterpret_cast<char*>(&_impl_.skip_zero_values_)) + sizeof(_impl_.filter_by_ids_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SparseVectorFilterProto)
}

inline void SparseVectorFilterProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filtered_ids_){arena}
    , /*decltype(_impl_._filtered_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.skip_zero_values_){false}
    , decltype(_impl_.filter_by_ids_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseVectorFilterProto::~SparseVectorFilterProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SparseVectorFilterProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseVectorFilterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filtered_ids_.~RepeatedField();
}

void SparseVectorFilterProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseVectorFilterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SparseVectorFilterProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filtered_ids_.Clear();
  ::memset(&_impl_.skip_zero_values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filter_by_ids_) -
      reinterpret_cast<char*>(&_impl_.skip_zero_values_)) + sizeof(_impl_.filter_by_ids_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseVectorFilterProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool skip_zero_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skip_zero_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filter_by_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.filter_by_ids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 filtered_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_filtered_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_filtered_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseVectorFilterProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SparseVectorFilterProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool skip_zero_values = 1;
  if (this->_internal_skip_zero_values() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_skip_zero_values(), target);
  }

  // bool filter_by_ids = 2;
  if (this->_internal_filter_by_ids() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_filter_by_ids(), target);
  }

  // repeated int64 filtered_ids = 3;
  {
    int byte_size = _impl_._filtered_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_filtered_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SparseVectorFilterProto)
  return target;
}

size_t SparseVectorFilterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SparseVectorFilterProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 filtered_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.filtered_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._filtered_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool skip_zero_values = 1;
  if (this->_internal_skip_zero_values() != 0) {
    total_size += 1 + 1;
  }

  // bool filter_by_ids = 2;
  if (this->_internal_filter_by_ids() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseVectorFilterProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseVectorFilterProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseVectorFilterProto::GetClassData() const { return &_class_data_; }


void SparseVectorFilterProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseVectorFilterProto*>(&to_msg);
  auto& from = static_cast<const SparseVectorFilterProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SparseVectorFilterProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filtered_ids_.MergeFrom(from._impl_.filtered_ids_);
  if (from._internal_skip_zero_values() != 0) {
    _this->_internal_set_skip_zero_values(from._internal_skip_zero_values());
  }
  if (from._internal_filter_by_ids() != 0) {
    _this->_internal_set_filter_by_ids(from._internal_filter_by_ids());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseVectorFilterProto::CopyFrom(const SparseVectorFilterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SparseVectorFilterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVectorFilterProto::IsInitialized() const {
  return true;
}

void SparseVectorFilterProto::InternalSwap(SparseVectorFilterProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filtered_ids_.InternalSwap(&other->_impl_.filtered_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseVectorFilterProto, _impl_.filter_by_ids_)
      + sizeof(SparseVectorFilterProto::_impl_.filter_by_ids_)
      - PROTOBUF_FIELD_OFFSET(SparseVectorFilterProto, _impl_.skip_zero_values_)>(
          reinterpret_cast<char*>(&_impl_.skip_zero_values_),
          reinterpret_cast<char*>(&other->_impl_.skip_zero_values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseVectorFilterProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[3]);
}

// ===================================================================

class SparseDoubleMatrixProto::_Internal {
 public:
};

SparseDoubleMatrixProto::SparseDoubleMatrixProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SparseDoubleMatrixProto)
}
SparseDoubleMatrixProto::SparseDoubleMatrixProto(const SparseDoubleMatrixProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseDoubleMatrixProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_ids_){from._impl_.row_ids_}
    , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.column_ids_){from._impl_.column_ids_}
    , /*decltype(_impl_._column_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficients_){from._impl_.coefficients_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SparseDoubleMatrixProto)
}

inline void SparseDoubleMatrixProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_ids_){arena}
    , /*decltype(_impl_._row_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.column_ids_){arena}
    , /*decltype(_impl_._column_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficients_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SparseDoubleMatrixProto::~SparseDoubleMatrixProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SparseDoubleMatrixProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseDoubleMatrixProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_ids_.~RepeatedField();
  _impl_.column_ids_.~RepeatedField();
  _impl_.coefficients_.~RepeatedField();
}

void SparseDoubleMatrixProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseDoubleMatrixProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SparseDoubleMatrixProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_ids_.Clear();
  _impl_.column_ids_.Clear();
  _impl_.coefficients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseDoubleMatrixProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 row_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_row_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_row_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 column_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_column_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_column_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double coefficients = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseDoubleMatrixProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SparseDoubleMatrixProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 row_ids = 1;
  {
    int byte_size = _impl_._row_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_row_ids(), byte_size, target);
    }
  }

  // repeated int64 column_ids = 2;
  {
    int byte_size = _impl_._column_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_column_ids(), byte_size, target);
    }
  }

  // repeated double coefficients = 3;
  if (this->_internal_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_coefficients(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SparseDoubleMatrixProto)
  return target;
}

size_t SparseDoubleMatrixProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SparseDoubleMatrixProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 row_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.row_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._row_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 column_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.column_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._column_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double coefficients = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficients_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseDoubleMatrixProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseDoubleMatrixProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseDoubleMatrixProto::GetClassData() const { return &_class_data_; }


void SparseDoubleMatrixProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseDoubleMatrixProto*>(&to_msg);
  auto& from = static_cast<const SparseDoubleMatrixProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SparseDoubleMatrixProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_ids_.MergeFrom(from._impl_.row_ids_);
  _this->_impl_.column_ids_.MergeFrom(from._impl_.column_ids_);
  _this->_impl_.coefficients_.MergeFrom(from._impl_.coefficients_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseDoubleMatrixProto::CopyFrom(const SparseDoubleMatrixProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SparseDoubleMatrixProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseDoubleMatrixProto::IsInitialized() const {
  return true;
}

void SparseDoubleMatrixProto::InternalSwap(SparseDoubleMatrixProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.row_ids_.InternalSwap(&other->_impl_.row_ids_);
  _impl_.column_ids_.InternalSwap(&other->_impl_.column_ids_);
  _impl_.coefficients_.InternalSwap(&other->_impl_.coefficients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseDoubleMatrixProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[4]);
}

// ===================================================================

class LinearExpressionProto::_Internal {
 public:
};

LinearExpressionProto::LinearExpressionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.LinearExpressionProto)
}
LinearExpressionProto::LinearExpressionProto(const LinearExpressionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinearExpressionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficients_){from._impl_.coefficients_}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.LinearExpressionProto)
}

inline void LinearExpressionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficients_){arena}
    , decltype(_impl_.offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LinearExpressionProto::~LinearExpressionProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.LinearExpressionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearExpressionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.coefficients_.~RepeatedField();
}

void LinearExpressionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearExpressionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.LinearExpressionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.coefficients_.Clear();
  _impl_.offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearExpressionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearExpressionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.LinearExpressionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated double coefficients = 2;
  if (this->_internal_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coefficients(), target);
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.LinearExpressionProto)
  return target;
}

size_t LinearExpressionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.LinearExpressionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double coefficients = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficients_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearExpressionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinearExpressionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearExpressionProto::GetClassData() const { return &_class_data_; }


void LinearExpressionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinearExpressionProto*>(&to_msg);
  auto& from = static_cast<const LinearExpressionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.LinearExpressionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.coefficients_.MergeFrom(from._impl_.coefficients_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearExpressionProto::CopyFrom(const LinearExpressionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.LinearExpressionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearExpressionProto::IsInitialized() const {
  return true;
}

void LinearExpressionProto::InternalSwap(LinearExpressionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.coefficients_.InternalSwap(&other->_impl_.coefficients_);
  swap(_impl_.offset_, other->_impl_.offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearExpressionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SparseDoubleVectorProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SparseDoubleVectorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SparseDoubleVectorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SparseBoolVectorProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SparseBoolVectorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SparseBoolVectorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SparseInt32VectorProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SparseInt32VectorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SparseInt32VectorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SparseVectorFilterProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SparseVectorFilterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SparseVectorFilterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SparseDoubleMatrixProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SparseDoubleMatrixProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SparseDoubleMatrixProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::LinearExpressionProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::LinearExpressionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::LinearExpressionProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
