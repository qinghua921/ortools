// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/callback.proto

#include "ortools/math_opt/callback.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace math_opt {
PROTOBUF_CONSTEXPR CallbackDataProto_PresolveStats::CallbackDataProto_PresolveStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removed_variables_)*/int64_t{0}
  , /*decltype(_impl_.removed_constraints_)*/int64_t{0}
  , /*decltype(_impl_.bound_changes_)*/int64_t{0}
  , /*decltype(_impl_.coefficient_changes_)*/int64_t{0}} {}
struct CallbackDataProto_PresolveStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackDataProto_PresolveStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackDataProto_PresolveStatsDefaultTypeInternal() {}
  union {
    CallbackDataProto_PresolveStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackDataProto_PresolveStatsDefaultTypeInternal _CallbackDataProto_PresolveStats_default_instance_;
PROTOBUF_CONSTEXPR CallbackDataProto_SimplexStats::CallbackDataProto_SimplexStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteration_count_)*/int64_t{0}
  , /*decltype(_impl_.objective_value_)*/0
  , /*decltype(_impl_.primal_infeasibility_)*/0
  , /*decltype(_impl_.dual_infeasibility_)*/0
  , /*decltype(_impl_.is_pertubated_)*/false} {}
struct CallbackDataProto_SimplexStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackDataProto_SimplexStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackDataProto_SimplexStatsDefaultTypeInternal() {}
  union {
    CallbackDataProto_SimplexStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackDataProto_SimplexStatsDefaultTypeInternal _CallbackDataProto_SimplexStats_default_instance_;
PROTOBUF_CONSTEXPR CallbackDataProto_BarrierStats::CallbackDataProto_BarrierStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primal_objective_)*/0
  , /*decltype(_impl_.dual_objective_)*/0
  , /*decltype(_impl_.complementarity_)*/0
  , /*decltype(_impl_.primal_infeasibility_)*/0
  , /*decltype(_impl_.dual_infeasibility_)*/0
  , /*decltype(_impl_.iteration_count_)*/0} {}
struct CallbackDataProto_BarrierStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackDataProto_BarrierStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackDataProto_BarrierStatsDefaultTypeInternal() {}
  union {
    CallbackDataProto_BarrierStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackDataProto_BarrierStatsDefaultTypeInternal _CallbackDataProto_BarrierStats_default_instance_;
PROTOBUF_CONSTEXPR CallbackDataProto_MipStats::CallbackDataProto_MipStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primal_bound_)*/0
  , /*decltype(_impl_.dual_bound_)*/0
  , /*decltype(_impl_.explored_nodes_)*/int64_t{0}
  , /*decltype(_impl_.open_nodes_)*/int64_t{0}
  , /*decltype(_impl_.simplex_iterations_)*/int64_t{0}
  , /*decltype(_impl_.number_of_solutions_found_)*/0
  , /*decltype(_impl_.cutting_planes_in_lp_)*/0} {}
struct CallbackDataProto_MipStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackDataProto_MipStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackDataProto_MipStatsDefaultTypeInternal() {}
  union {
    CallbackDataProto_MipStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackDataProto_MipStatsDefaultTypeInternal _CallbackDataProto_MipStats_default_instance_;
PROTOBUF_CONSTEXPR CallbackDataProto::CallbackDataProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primal_solution_vector_)*/nullptr
  , /*decltype(_impl_.runtime_)*/nullptr
  , /*decltype(_impl_.presolve_stats_)*/nullptr
  , /*decltype(_impl_.simplex_stats_)*/nullptr
  , /*decltype(_impl_.barrier_stats_)*/nullptr
  , /*decltype(_impl_.mip_stats_)*/nullptr
  , /*decltype(_impl_.event_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackDataProtoDefaultTypeInternal() {}
  union {
    CallbackDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackDataProtoDefaultTypeInternal _CallbackDataProto_default_instance_;
PROTOBUF_CONSTEXPR CallbackResultProto_GeneratedLinearConstraint::CallbackResultProto_GeneratedLinearConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linear_expression_)*/nullptr
  , /*decltype(_impl_.lower_bound_)*/0
  , /*decltype(_impl_.upper_bound_)*/0
  , /*decltype(_impl_.is_lazy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackResultProto_GeneratedLinearConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackResultProto_GeneratedLinearConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackResultProto_GeneratedLinearConstraintDefaultTypeInternal() {}
  union {
    CallbackResultProto_GeneratedLinearConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackResultProto_GeneratedLinearConstraintDefaultTypeInternal _CallbackResultProto_GeneratedLinearConstraint_default_instance_;
PROTOBUF_CONSTEXPR CallbackResultProto::CallbackResultProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cuts_)*/{}
  , /*decltype(_impl_.suggested_solutions_)*/{}
  , /*decltype(_impl_.terminate_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackResultProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackResultProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackResultProtoDefaultTypeInternal() {}
  union {
    CallbackResultProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackResultProtoDefaultTypeInternal _CallbackResultProto_default_instance_;
PROTOBUF_CONSTEXPR CallbackRegistrationProto::CallbackRegistrationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_registration_)*/{}
  , /*decltype(_impl_._request_registration_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mip_solution_filter_)*/nullptr
  , /*decltype(_impl_.mip_node_filter_)*/nullptr
  , /*decltype(_impl_.add_cuts_)*/false
  , /*decltype(_impl_.add_lazy_constraints_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackRegistrationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackRegistrationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackRegistrationProtoDefaultTypeInternal() {}
  union {
    CallbackRegistrationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackRegistrationProtoDefaultTypeInternal _CallbackRegistrationProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fmath_5fopt_2fcallback_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fmath_5fopt_2fcallback_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fmath_5fopt_2fcallback_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _impl_.removed_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _impl_.removed_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _impl_.bound_changes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_PresolveStats, _impl_.coefficient_changes_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_.iteration_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_.objective_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_.primal_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_.dual_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_SimplexStats, _impl_.is_pertubated_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.iteration_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.primal_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.dual_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.complementarity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.primal_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_BarrierStats, _impl_.dual_infeasibility_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.primal_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.dual_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.explored_nodes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.open_nodes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.simplex_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.number_of_solutions_found_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto_MipStats, _impl_.cutting_planes_in_lp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.primal_solution_vector_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.presolve_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.simplex_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.barrier_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackDataProto, _impl_.mip_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint, _impl_.linear_expression_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint, _impl_.is_lazy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto, _impl_.terminate_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto, _impl_.cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackResultProto, _impl_.suggested_solutions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _impl_.request_registration_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _impl_.mip_solution_filter_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _impl_.mip_node_filter_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _impl_.add_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::CallbackRegistrationProto, _impl_.add_lazy_constraints_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::operations_research::math_opt::CallbackDataProto_PresolveStats)},
  { 14, 25, -1, sizeof(::operations_research::math_opt::CallbackDataProto_SimplexStats)},
  { 30, 42, -1, sizeof(::operations_research::math_opt::CallbackDataProto_BarrierStats)},
  { 48, 61, -1, sizeof(::operations_research::math_opt::CallbackDataProto_MipStats)},
  { 68, -1, -1, sizeof(::operations_research::math_opt::CallbackDataProto)},
  { 81, -1, -1, sizeof(::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint)},
  { 91, -1, -1, sizeof(::operations_research::math_opt::CallbackResultProto)},
  { 100, -1, -1, sizeof(::operations_research::math_opt::CallbackRegistrationProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::math_opt::_CallbackDataProto_PresolveStats_default_instance_._instance,
  &::operations_research::math_opt::_CallbackDataProto_SimplexStats_default_instance_._instance,
  &::operations_research::math_opt::_CallbackDataProto_BarrierStats_default_instance_._instance,
  &::operations_research::math_opt::_CallbackDataProto_MipStats_default_instance_._instance,
  &::operations_research::math_opt::_CallbackDataProto_default_instance_._instance,
  &::operations_research::math_opt::_CallbackResultProto_GeneratedLinearConstraint_default_instance_._instance,
  &::operations_research::math_opt::_CallbackResultProto_default_instance_._instance,
  &::operations_research::math_opt::_CallbackRegistrationProto_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fmath_5fopt_2fcallback_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037ortools/math_opt/callback.proto\022\034opera"
  "tions_research.math_opt\032\036google/protobuf"
  "/duration.proto\032(ortools/math_opt/sparse"
  "_containers.proto\"\346\r\n\021CallbackDataProto\022"
  "\?\n\005event\030\001 \001(\01620.operations_research.mat"
  "h_opt.CallbackEventProto\022U\n\026primal_solut"
  "ion_vector\030\002 \001(\01325.operations_research.m"
  "ath_opt.SparseDoubleVectorProto\022*\n\007runti"
  "me\030\003 \001(\0132\031.google.protobuf.Duration\022U\n\016p"
  "resolve_stats\030\004 \001(\0132=.operations_researc"
  "h.math_opt.CallbackDataProto.PresolveSta"
  "ts\022S\n\rsimplex_stats\030\005 \001(\0132<.operations_r"
  "esearch.math_opt.CallbackDataProto.Simpl"
  "exStats\022S\n\rbarrier_stats\030\006 \001(\0132<.operati"
  "ons_research.math_opt.CallbackDataProto."
  "BarrierStats\022K\n\tmip_stats\030\007 \001(\01328.operat"
  "ions_research.math_opt.CallbackDataProto"
  ".MipStats\032\347\001\n\rPresolveStats\022\036\n\021removed_v"
  "ariables\030\001 \001(\003H\000\210\001\001\022 \n\023removed_constrain"
  "ts\030\002 \001(\003H\001\210\001\001\022\032\n\rbound_changes\030\003 \001(\003H\002\210\001"
  "\001\022 \n\023coefficient_changes\030\004 \001(\003H\003\210\001\001B\024\n\022_"
  "removed_variablesB\026\n\024_removed_constraint"
  "sB\020\n\016_bound_changesB\026\n\024_coefficient_chan"
  "ges\032\224\002\n\014SimplexStats\022\034\n\017iteration_count\030"
  "\001 \001(\003H\000\210\001\001\022\034\n\017objective_value\030\002 \001(\001H\001\210\001\001"
  "\022!\n\024primal_infeasibility\030\003 \001(\001H\002\210\001\001\022\037\n\022d"
  "ual_infeasibility\030\004 \001(\001H\003\210\001\001\022\032\n\ris_pertu"
  "bated\030\005 \001(\010H\004\210\001\001B\022\n\020_iteration_countB\022\n\020"
  "_objective_valueB\027\n\025_primal_infeasibilit"
  "yB\025\n\023_dual_infeasibilityB\020\n\016_is_pertubat"
  "ed\032\312\002\n\014BarrierStats\022\034\n\017iteration_count\030\001"
  " \001(\005H\000\210\001\001\022\035\n\020primal_objective\030\002 \001(\001H\001\210\001\001"
  "\022\033\n\016dual_objective\030\003 \001(\001H\002\210\001\001\022\034\n\017complem"
  "entarity\030\004 \001(\001H\003\210\001\001\022!\n\024primal_infeasibil"
  "ity\030\005 \001(\001H\004\210\001\001\022\037\n\022dual_infeasibility\030\006 \001"
  "(\001H\005\210\001\001B\022\n\020_iteration_countB\023\n\021_primal_o"
  "bjectiveB\021\n\017_dual_objectiveB\022\n\020_compleme"
  "ntarityB\027\n\025_primal_infeasibilityB\025\n\023_dua"
  "l_infeasibility\032\360\002\n\010MipStats\022\031\n\014primal_b"
  "ound\030\001 \001(\001H\000\210\001\001\022\027\n\ndual_bound\030\002 \001(\001H\001\210\001\001"
  "\022\033\n\016explored_nodes\030\003 \001(\003H\002\210\001\001\022\027\n\nopen_no"
  "des\030\004 \001(\003H\003\210\001\001\022\037\n\022simplex_iterations\030\005 \001"
  "(\003H\004\210\001\001\022&\n\031number_of_solutions_found\030\006 \001"
  "(\005H\005\210\001\001\022!\n\024cutting_planes_in_lp\030\007 \001(\005H\006\210"
  "\001\001B\017\n\r_primal_boundB\r\n\013_dual_boundB\021\n\017_e"
  "xplored_nodesB\r\n\013_open_nodesB\025\n\023_simplex"
  "_iterationsB\034\n\032_number_of_solutions_foun"
  "dB\027\n\025_cutting_planes_in_lp\"\202\003\n\023CallbackR"
  "esultProto\022\021\n\tterminate\030\001 \001(\010\022Y\n\004cuts\030\004 "
  "\003(\0132K.operations_research.math_opt.Callb"
  "ackResultProto.GeneratedLinearConstraint"
  "\022R\n\023suggested_solutions\030\005 \003(\01325.operatio"
  "ns_research.math_opt.SparseDoubleVectorP"
  "roto\032\250\001\n\031GeneratedLinearConstraint\022P\n\021li"
  "near_expression\030\001 \001(\01325.operations_resea"
  "rch.math_opt.SparseDoubleVectorProto\022\023\n\013"
  "lower_bound\030\002 \001(\001\022\023\n\013upper_bound\030\003 \001(\001\022\017"
  "\n\007is_lazy\030\004 \001(\010\"\277\002\n\031CallbackRegistration"
  "Proto\022N\n\024request_registration\030\001 \003(\01620.op"
  "erations_research.math_opt.CallbackEvent"
  "Proto\022R\n\023mip_solution_filter\030\002 \001(\01325.ope"
  "rations_research.math_opt.SparseVectorFi"
  "lterProto\022N\n\017mip_node_filter\030\003 \001(\01325.ope"
  "rations_research.math_opt.SparseVectorFi"
  "lterProto\022\020\n\010add_cuts\030\004 \001(\010\022\034\n\024add_lazy_"
  "constraints\030\005 \001(\010*\337\001\n\022CallbackEventProto"
  "\022\036\n\032CALLBACK_EVENT_UNSPECIFIED\020\000\022\033\n\027CALL"
  "BACK_EVENT_PRESOLVE\020\001\022\032\n\026CALLBACK_EVENT_"
  "SIMPLEX\020\002\022\026\n\022CALLBACK_EVENT_MIP\020\003\022\037\n\033CAL"
  "LBACK_EVENT_MIP_SOLUTION\020\004\022\033\n\027CALLBACK_E"
  "VENT_MIP_NODE\020\005\022\032\n\026CALLBACK_EVENT_BARRIE"
  "R\020\006B\036\n\032com.google.ortools.mathoptP\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto = {
    false, false, 2883, descriptor_table_protodef_ortools_2fmath_5fopt_2fcallback_2eproto,
    "ortools/math_opt/callback.proto",
    &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once, descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_ortools_2fmath_5fopt_2fcallback_2eproto::offsets,
    file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto, file_level_enum_descriptors_ortools_2fmath_5fopt_2fcallback_2eproto,
    file_level_service_descriptors_ortools_2fmath_5fopt_2fcallback_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter() {
  return &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fmath_5fopt_2fcallback_2eproto(&descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto);
namespace operations_research {
namespace math_opt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallbackEventProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fcallback_2eproto[0];
}
bool CallbackEventProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CallbackDataProto_PresolveStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackDataProto_PresolveStats>()._impl_._has_bits_);
  static void set_has_removed_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_removed_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bound_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coefficient_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CallbackDataProto_PresolveStats::CallbackDataProto_PresolveStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackDataProto.PresolveStats)
}
CallbackDataProto_PresolveStats::CallbackDataProto_PresolveStats(const CallbackDataProto_PresolveStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackDataProto_PresolveStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_variables_){}
    , decltype(_impl_.removed_constraints_){}
    , decltype(_impl_.bound_changes_){}
    , decltype(_impl_.coefficient_changes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.removed_variables_, &from._impl_.removed_variables_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coefficient_changes_) -
    reinterpret_cast<char*>(&_impl_.removed_variables_)) + sizeof(_impl_.coefficient_changes_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackDataProto.PresolveStats)
}

inline void CallbackDataProto_PresolveStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_variables_){int64_t{0}}
    , decltype(_impl_.removed_constraints_){int64_t{0}}
    , decltype(_impl_.bound_changes_){int64_t{0}}
    , decltype(_impl_.coefficient_changes_){int64_t{0}}
  };
}

CallbackDataProto_PresolveStats::~CallbackDataProto_PresolveStats() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackDataProto.PresolveStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackDataProto_PresolveStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackDataProto_PresolveStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackDataProto_PresolveStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackDataProto.PresolveStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.removed_variables_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.coefficient_changes_) -
        reinterpret_cast<char*>(&_impl_.removed_variables_)) + sizeof(_impl_.coefficient_changes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackDataProto_PresolveStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 removed_variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_removed_variables(&has_bits);
          _impl_.removed_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 removed_constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_removed_constraints(&has_bits);
          _impl_.removed_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 bound_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bound_changes(&has_bits);
          _impl_.bound_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 coefficient_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_coefficient_changes(&has_bits);
          _impl_.coefficient_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackDataProto_PresolveStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackDataProto.PresolveStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 removed_variables = 1;
  if (_internal_has_removed_variables()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_removed_variables(), target);
  }

  // optional int64 removed_constraints = 2;
  if (_internal_has_removed_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_removed_constraints(), target);
  }

  // optional int64 bound_changes = 3;
  if (_internal_has_bound_changes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_bound_changes(), target);
  }

  // optional int64 coefficient_changes = 4;
  if (_internal_has_coefficient_changes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_coefficient_changes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackDataProto.PresolveStats)
  return target;
}

size_t CallbackDataProto_PresolveStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackDataProto.PresolveStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 removed_variables = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_removed_variables());
    }

    // optional int64 removed_constraints = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_removed_constraints());
    }

    // optional int64 bound_changes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bound_changes());
    }

    // optional int64 coefficient_changes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_coefficient_changes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackDataProto_PresolveStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackDataProto_PresolveStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackDataProto_PresolveStats::GetClassData() const { return &_class_data_; }


void CallbackDataProto_PresolveStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackDataProto_PresolveStats*>(&to_msg);
  auto& from = static_cast<const CallbackDataProto_PresolveStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackDataProto.PresolveStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.removed_variables_ = from._impl_.removed_variables_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.removed_constraints_ = from._impl_.removed_constraints_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bound_changes_ = from._impl_.bound_changes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.coefficient_changes_ = from._impl_.coefficient_changes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackDataProto_PresolveStats::CopyFrom(const CallbackDataProto_PresolveStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackDataProto.PresolveStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackDataProto_PresolveStats::IsInitialized() const {
  return true;
}

void CallbackDataProto_PresolveStats::InternalSwap(CallbackDataProto_PresolveStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackDataProto_PresolveStats, _impl_.coefficient_changes_)
      + sizeof(CallbackDataProto_PresolveStats::_impl_.coefficient_changes_)
      - PROTOBUF_FIELD_OFFSET(CallbackDataProto_PresolveStats, _impl_.removed_variables_)>(
          reinterpret_cast<char*>(&_impl_.removed_variables_),
          reinterpret_cast<char*>(&other->_impl_.removed_variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackDataProto_PresolveStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[0]);
}

// ===================================================================

class CallbackDataProto_SimplexStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackDataProto_SimplexStats>()._impl_._has_bits_);
  static void set_has_iteration_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objective_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_primal_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dual_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_pertubated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CallbackDataProto_SimplexStats::CallbackDataProto_SimplexStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackDataProto.SimplexStats)
}
CallbackDataProto_SimplexStats::CallbackDataProto_SimplexStats(const CallbackDataProto_SimplexStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackDataProto_SimplexStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteration_count_){}
    , decltype(_impl_.objective_value_){}
    , decltype(_impl_.primal_infeasibility_){}
    , decltype(_impl_.dual_infeasibility_){}
    , decltype(_impl_.is_pertubated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.iteration_count_, &from._impl_.iteration_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_pertubated_) -
    reinterpret_cast<char*>(&_impl_.iteration_count_)) + sizeof(_impl_.is_pertubated_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackDataProto.SimplexStats)
}

inline void CallbackDataProto_SimplexStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteration_count_){int64_t{0}}
    , decltype(_impl_.objective_value_){0}
    , decltype(_impl_.primal_infeasibility_){0}
    , decltype(_impl_.dual_infeasibility_){0}
    , decltype(_impl_.is_pertubated_){false}
  };
}

CallbackDataProto_SimplexStats::~CallbackDataProto_SimplexStats() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackDataProto.SimplexStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackDataProto_SimplexStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackDataProto_SimplexStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackDataProto_SimplexStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackDataProto.SimplexStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.iteration_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_pertubated_) -
        reinterpret_cast<char*>(&_impl_.iteration_count_)) + sizeof(_impl_.is_pertubated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackDataProto_SimplexStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 iteration_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iteration_count(&has_bits);
          _impl_.iteration_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_objective_value(&has_bits);
          _impl_.objective_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_infeasibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_primal_infeasibility(&has_bits);
          _impl_.primal_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_infeasibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_dual_infeasibility(&has_bits);
          _impl_.dual_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pertubated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_pertubated(&has_bits);
          _impl_.is_pertubated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackDataProto_SimplexStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackDataProto.SimplexStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 iteration_count = 1;
  if (_internal_has_iteration_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_iteration_count(), target);
  }

  // optional double objective_value = 2;
  if (_internal_has_objective_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_objective_value(), target);
  }

  // optional double primal_infeasibility = 3;
  if (_internal_has_primal_infeasibility()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_primal_infeasibility(), target);
  }

  // optional double dual_infeasibility = 4;
  if (_internal_has_dual_infeasibility()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_dual_infeasibility(), target);
  }

  // optional bool is_pertubated = 5;
  if (_internal_has_is_pertubated()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_pertubated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackDataProto.SimplexStats)
  return target;
}

size_t CallbackDataProto_SimplexStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackDataProto.SimplexStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 iteration_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_iteration_count());
    }

    // optional double objective_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double primal_infeasibility = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double dual_infeasibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_pertubated = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackDataProto_SimplexStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackDataProto_SimplexStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackDataProto_SimplexStats::GetClassData() const { return &_class_data_; }


void CallbackDataProto_SimplexStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackDataProto_SimplexStats*>(&to_msg);
  auto& from = static_cast<const CallbackDataProto_SimplexStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackDataProto.SimplexStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.iteration_count_ = from._impl_.iteration_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objective_value_ = from._impl_.objective_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.primal_infeasibility_ = from._impl_.primal_infeasibility_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dual_infeasibility_ = from._impl_.dual_infeasibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_pertubated_ = from._impl_.is_pertubated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackDataProto_SimplexStats::CopyFrom(const CallbackDataProto_SimplexStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackDataProto.SimplexStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackDataProto_SimplexStats::IsInitialized() const {
  return true;
}

void CallbackDataProto_SimplexStats::InternalSwap(CallbackDataProto_SimplexStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackDataProto_SimplexStats, _impl_.is_pertubated_)
      + sizeof(CallbackDataProto_SimplexStats::_impl_.is_pertubated_)
      - PROTOBUF_FIELD_OFFSET(CallbackDataProto_SimplexStats, _impl_.iteration_count_)>(
          reinterpret_cast<char*>(&_impl_.iteration_count_),
          reinterpret_cast<char*>(&other->_impl_.iteration_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackDataProto_SimplexStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[1]);
}

// ===================================================================

class CallbackDataProto_BarrierStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackDataProto_BarrierStats>()._impl_._has_bits_);
  static void set_has_iteration_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_primal_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dual_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_complementarity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_primal_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dual_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CallbackDataProto_BarrierStats::CallbackDataProto_BarrierStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackDataProto.BarrierStats)
}
CallbackDataProto_BarrierStats::CallbackDataProto_BarrierStats(const CallbackDataProto_BarrierStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackDataProto_BarrierStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_objective_){}
    , decltype(_impl_.dual_objective_){}
    , decltype(_impl_.complementarity_){}
    , decltype(_impl_.primal_infeasibility_){}
    , decltype(_impl_.dual_infeasibility_){}
    , decltype(_impl_.iteration_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primal_objective_, &from._impl_.primal_objective_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iteration_count_) -
    reinterpret_cast<char*>(&_impl_.primal_objective_)) + sizeof(_impl_.iteration_count_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackDataProto.BarrierStats)
}

inline void CallbackDataProto_BarrierStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_objective_){0}
    , decltype(_impl_.dual_objective_){0}
    , decltype(_impl_.complementarity_){0}
    , decltype(_impl_.primal_infeasibility_){0}
    , decltype(_impl_.dual_infeasibility_){0}
    , decltype(_impl_.iteration_count_){0}
  };
}

CallbackDataProto_BarrierStats::~CallbackDataProto_BarrierStats() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackDataProto.BarrierStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackDataProto_BarrierStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackDataProto_BarrierStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackDataProto_BarrierStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackDataProto.BarrierStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.primal_objective_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iteration_count_) -
        reinterpret_cast<char*>(&_impl_.primal_objective_)) + sizeof(_impl_.iteration_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackDataProto_BarrierStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 iteration_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iteration_count(&has_bits);
          _impl_.iteration_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_objective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_primal_objective(&has_bits);
          _impl_.primal_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_objective = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dual_objective(&has_bits);
          _impl_.dual_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double complementarity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_complementarity(&has_bits);
          _impl_.complementarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_infeasibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_primal_infeasibility(&has_bits);
          _impl_.primal_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_infeasibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_dual_infeasibility(&has_bits);
          _impl_.dual_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackDataProto_BarrierStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackDataProto.BarrierStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 iteration_count = 1;
  if (_internal_has_iteration_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_iteration_count(), target);
  }

  // optional double primal_objective = 2;
  if (_internal_has_primal_objective()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_primal_objective(), target);
  }

  // optional double dual_objective = 3;
  if (_internal_has_dual_objective()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dual_objective(), target);
  }

  // optional double complementarity = 4;
  if (_internal_has_complementarity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_complementarity(), target);
  }

  // optional double primal_infeasibility = 5;
  if (_internal_has_primal_infeasibility()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_primal_infeasibility(), target);
  }

  // optional double dual_infeasibility = 6;
  if (_internal_has_dual_infeasibility()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dual_infeasibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackDataProto.BarrierStats)
  return target;
}

size_t CallbackDataProto_BarrierStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackDataProto.BarrierStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double primal_objective = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dual_objective = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double complementarity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double primal_infeasibility = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dual_infeasibility = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 iteration_count = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iteration_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackDataProto_BarrierStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackDataProto_BarrierStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackDataProto_BarrierStats::GetClassData() const { return &_class_data_; }


void CallbackDataProto_BarrierStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackDataProto_BarrierStats*>(&to_msg);
  auto& from = static_cast<const CallbackDataProto_BarrierStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackDataProto.BarrierStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.primal_objective_ = from._impl_.primal_objective_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dual_objective_ = from._impl_.dual_objective_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.complementarity_ = from._impl_.complementarity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.primal_infeasibility_ = from._impl_.primal_infeasibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dual_infeasibility_ = from._impl_.dual_infeasibility_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.iteration_count_ = from._impl_.iteration_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackDataProto_BarrierStats::CopyFrom(const CallbackDataProto_BarrierStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackDataProto.BarrierStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackDataProto_BarrierStats::IsInitialized() const {
  return true;
}

void CallbackDataProto_BarrierStats::InternalSwap(CallbackDataProto_BarrierStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackDataProto_BarrierStats, _impl_.iteration_count_)
      + sizeof(CallbackDataProto_BarrierStats::_impl_.iteration_count_)
      - PROTOBUF_FIELD_OFFSET(CallbackDataProto_BarrierStats, _impl_.primal_objective_)>(
          reinterpret_cast<char*>(&_impl_.primal_objective_),
          reinterpret_cast<char*>(&other->_impl_.primal_objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackDataProto_BarrierStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[2]);
}

// ===================================================================

class CallbackDataProto_MipStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackDataProto_MipStats>()._impl_._has_bits_);
  static void set_has_primal_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dual_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_explored_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_open_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_simplex_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_solutions_found(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cutting_planes_in_lp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CallbackDataProto_MipStats::CallbackDataProto_MipStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackDataProto.MipStats)
}
CallbackDataProto_MipStats::CallbackDataProto_MipStats(const CallbackDataProto_MipStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackDataProto_MipStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_bound_){}
    , decltype(_impl_.dual_bound_){}
    , decltype(_impl_.explored_nodes_){}
    , decltype(_impl_.open_nodes_){}
    , decltype(_impl_.simplex_iterations_){}
    , decltype(_impl_.number_of_solutions_found_){}
    , decltype(_impl_.cutting_planes_in_lp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primal_bound_, &from._impl_.primal_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cutting_planes_in_lp_) -
    reinterpret_cast<char*>(&_impl_.primal_bound_)) + sizeof(_impl_.cutting_planes_in_lp_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackDataProto.MipStats)
}

inline void CallbackDataProto_MipStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_bound_){0}
    , decltype(_impl_.dual_bound_){0}
    , decltype(_impl_.explored_nodes_){int64_t{0}}
    , decltype(_impl_.open_nodes_){int64_t{0}}
    , decltype(_impl_.simplex_iterations_){int64_t{0}}
    , decltype(_impl_.number_of_solutions_found_){0}
    , decltype(_impl_.cutting_planes_in_lp_){0}
  };
}

CallbackDataProto_MipStats::~CallbackDataProto_MipStats() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackDataProto.MipStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackDataProto_MipStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackDataProto_MipStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackDataProto_MipStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackDataProto.MipStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.primal_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cutting_planes_in_lp_) -
        reinterpret_cast<char*>(&_impl_.primal_bound_)) + sizeof(_impl_.cutting_planes_in_lp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackDataProto_MipStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double primal_bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_primal_bound(&has_bits);
          _impl_.primal_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_dual_bound(&has_bits);
          _impl_.dual_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 explored_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_explored_nodes(&has_bits);
          _impl_.explored_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 open_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_open_nodes(&has_bits);
          _impl_.open_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 simplex_iterations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_simplex_iterations(&has_bits);
          _impl_.simplex_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number_of_solutions_found = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_number_of_solutions_found(&has_bits);
          _impl_.number_of_solutions_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cutting_planes_in_lp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cutting_planes_in_lp(&has_bits);
          _impl_.cutting_planes_in_lp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackDataProto_MipStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackDataProto.MipStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double primal_bound = 1;
  if (_internal_has_primal_bound()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_primal_bound(), target);
  }

  // optional double dual_bound = 2;
  if (_internal_has_dual_bound()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dual_bound(), target);
  }

  // optional int64 explored_nodes = 3;
  if (_internal_has_explored_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_explored_nodes(), target);
  }

  // optional int64 open_nodes = 4;
  if (_internal_has_open_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_open_nodes(), target);
  }

  // optional int64 simplex_iterations = 5;
  if (_internal_has_simplex_iterations()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_simplex_iterations(), target);
  }

  // optional int32 number_of_solutions_found = 6;
  if (_internal_has_number_of_solutions_found()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_number_of_solutions_found(), target);
  }

  // optional int32 cutting_planes_in_lp = 7;
  if (_internal_has_cutting_planes_in_lp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_cutting_planes_in_lp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackDataProto.MipStats)
  return target;
}

size_t CallbackDataProto_MipStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackDataProto.MipStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double primal_bound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dual_bound = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 explored_nodes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_explored_nodes());
    }

    // optional int64 open_nodes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_open_nodes());
    }

    // optional int64 simplex_iterations = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_simplex_iterations());
    }

    // optional int32 number_of_solutions_found = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_solutions_found());
    }

    // optional int32 cutting_planes_in_lp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cutting_planes_in_lp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackDataProto_MipStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackDataProto_MipStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackDataProto_MipStats::GetClassData() const { return &_class_data_; }


void CallbackDataProto_MipStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackDataProto_MipStats*>(&to_msg);
  auto& from = static_cast<const CallbackDataProto_MipStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackDataProto.MipStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.primal_bound_ = from._impl_.primal_bound_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dual_bound_ = from._impl_.dual_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.explored_nodes_ = from._impl_.explored_nodes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.open_nodes_ = from._impl_.open_nodes_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.simplex_iterations_ = from._impl_.simplex_iterations_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.number_of_solutions_found_ = from._impl_.number_of_solutions_found_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cutting_planes_in_lp_ = from._impl_.cutting_planes_in_lp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackDataProto_MipStats::CopyFrom(const CallbackDataProto_MipStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackDataProto.MipStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackDataProto_MipStats::IsInitialized() const {
  return true;
}

void CallbackDataProto_MipStats::InternalSwap(CallbackDataProto_MipStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackDataProto_MipStats, _impl_.cutting_planes_in_lp_)
      + sizeof(CallbackDataProto_MipStats::_impl_.cutting_planes_in_lp_)
      - PROTOBUF_FIELD_OFFSET(CallbackDataProto_MipStats, _impl_.primal_bound_)>(
          reinterpret_cast<char*>(&_impl_.primal_bound_),
          reinterpret_cast<char*>(&other->_impl_.primal_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackDataProto_MipStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[3]);
}

// ===================================================================

class CallbackDataProto::_Internal {
 public:
  static const ::operations_research::math_opt::SparseDoubleVectorProto& primal_solution_vector(const CallbackDataProto* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& runtime(const CallbackDataProto* msg);
  static const ::operations_research::math_opt::CallbackDataProto_PresolveStats& presolve_stats(const CallbackDataProto* msg);
  static const ::operations_research::math_opt::CallbackDataProto_SimplexStats& simplex_stats(const CallbackDataProto* msg);
  static const ::operations_research::math_opt::CallbackDataProto_BarrierStats& barrier_stats(const CallbackDataProto* msg);
  static const ::operations_research::math_opt::CallbackDataProto_MipStats& mip_stats(const CallbackDataProto* msg);
};

const ::operations_research::math_opt::SparseDoubleVectorProto&
CallbackDataProto::_Internal::primal_solution_vector(const CallbackDataProto* msg) {
  return *msg->_impl_.primal_solution_vector_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CallbackDataProto::_Internal::runtime(const CallbackDataProto* msg) {
  return *msg->_impl_.runtime_;
}
const ::operations_research::math_opt::CallbackDataProto_PresolveStats&
CallbackDataProto::_Internal::presolve_stats(const CallbackDataProto* msg) {
  return *msg->_impl_.presolve_stats_;
}
const ::operations_research::math_opt::CallbackDataProto_SimplexStats&
CallbackDataProto::_Internal::simplex_stats(const CallbackDataProto* msg) {
  return *msg->_impl_.simplex_stats_;
}
const ::operations_research::math_opt::CallbackDataProto_BarrierStats&
CallbackDataProto::_Internal::barrier_stats(const CallbackDataProto* msg) {
  return *msg->_impl_.barrier_stats_;
}
const ::operations_research::math_opt::CallbackDataProto_MipStats&
CallbackDataProto::_Internal::mip_stats(const CallbackDataProto* msg) {
  return *msg->_impl_.mip_stats_;
}
void CallbackDataProto::clear_primal_solution_vector() {
  if (GetArenaForAllocation() == nullptr && _impl_.primal_solution_vector_ != nullptr) {
    delete _impl_.primal_solution_vector_;
  }
  _impl_.primal_solution_vector_ = nullptr;
}
void CallbackDataProto::clear_runtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.runtime_ != nullptr) {
    delete _impl_.runtime_;
  }
  _impl_.runtime_ = nullptr;
}
CallbackDataProto::CallbackDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackDataProto)
}
CallbackDataProto::CallbackDataProto(const CallbackDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackDataProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primal_solution_vector_){nullptr}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.presolve_stats_){nullptr}
    , decltype(_impl_.simplex_stats_){nullptr}
    , decltype(_impl_.barrier_stats_){nullptr}
    , decltype(_impl_.mip_stats_){nullptr}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primal_solution_vector()) {
    _this->_impl_.primal_solution_vector_ = new ::operations_research::math_opt::SparseDoubleVectorProto(*from._impl_.primal_solution_vector_);
  }
  if (from._internal_has_runtime()) {
    _this->_impl_.runtime_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.runtime_);
  }
  if (from._internal_has_presolve_stats()) {
    _this->_impl_.presolve_stats_ = new ::operations_research::math_opt::CallbackDataProto_PresolveStats(*from._impl_.presolve_stats_);
  }
  if (from._internal_has_simplex_stats()) {
    _this->_impl_.simplex_stats_ = new ::operations_research::math_opt::CallbackDataProto_SimplexStats(*from._impl_.simplex_stats_);
  }
  if (from._internal_has_barrier_stats()) {
    _this->_impl_.barrier_stats_ = new ::operations_research::math_opt::CallbackDataProto_BarrierStats(*from._impl_.barrier_stats_);
  }
  if (from._internal_has_mip_stats()) {
    _this->_impl_.mip_stats_ = new ::operations_research::math_opt::CallbackDataProto_MipStats(*from._impl_.mip_stats_);
  }
  _this->_impl_.event_ = from._impl_.event_;
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackDataProto)
}

inline void CallbackDataProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primal_solution_vector_){nullptr}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.presolve_stats_){nullptr}
    , decltype(_impl_.simplex_stats_){nullptr}
    , decltype(_impl_.barrier_stats_){nullptr}
    , decltype(_impl_.mip_stats_){nullptr}
    , decltype(_impl_.event_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackDataProto::~CallbackDataProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.primal_solution_vector_;
  if (this != internal_default_instance()) delete _impl_.runtime_;
  if (this != internal_default_instance()) delete _impl_.presolve_stats_;
  if (this != internal_default_instance()) delete _impl_.simplex_stats_;
  if (this != internal_default_instance()) delete _impl_.barrier_stats_;
  if (this != internal_default_instance()) delete _impl_.mip_stats_;
}

void CallbackDataProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.primal_solution_vector_ != nullptr) {
    delete _impl_.primal_solution_vector_;
  }
  _impl_.primal_solution_vector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.runtime_ != nullptr) {
    delete _impl_.runtime_;
  }
  _impl_.runtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.presolve_stats_ != nullptr) {
    delete _impl_.presolve_stats_;
  }
  _impl_.presolve_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.simplex_stats_ != nullptr) {
    delete _impl_.simplex_stats_;
  }
  _impl_.simplex_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.barrier_stats_ != nullptr) {
    delete _impl_.barrier_stats_;
  }
  _impl_.barrier_stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mip_stats_ != nullptr) {
    delete _impl_.mip_stats_;
  }
  _impl_.mip_stats_ = nullptr;
  _impl_.event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.CallbackEventProto event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::operations_research::math_opt::CallbackEventProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.SparseDoubleVectorProto primal_solution_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_primal_solution_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration runtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.CallbackDataProto.PresolveStats presolve_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_presolve_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.CallbackDataProto.SimplexStats simplex_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_simplex_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.CallbackDataProto.BarrierStats barrier_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_barrier_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.CallbackDataProto.MipStats mip_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mip_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.CallbackEventProto event = 1;
  if (this->_internal_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // .operations_research.math_opt.SparseDoubleVectorProto primal_solution_vector = 2;
  if (this->_internal_has_primal_solution_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::primal_solution_vector(this),
        _Internal::primal_solution_vector(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration runtime = 3;
  if (this->_internal_has_runtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::runtime(this),
        _Internal::runtime(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.CallbackDataProto.PresolveStats presolve_stats = 4;
  if (this->_internal_has_presolve_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::presolve_stats(this),
        _Internal::presolve_stats(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.CallbackDataProto.SimplexStats simplex_stats = 5;
  if (this->_internal_has_simplex_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::simplex_stats(this),
        _Internal::simplex_stats(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.CallbackDataProto.BarrierStats barrier_stats = 6;
  if (this->_internal_has_barrier_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::barrier_stats(this),
        _Internal::barrier_stats(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.CallbackDataProto.MipStats mip_stats = 7;
  if (this->_internal_has_mip_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mip_stats(this),
        _Internal::mip_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackDataProto)
  return target;
}

size_t CallbackDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.math_opt.SparseDoubleVectorProto primal_solution_vector = 2;
  if (this->_internal_has_primal_solution_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.primal_solution_vector_);
  }

  // .google.protobuf.Duration runtime = 3;
  if (this->_internal_has_runtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.runtime_);
  }

  // .operations_research.math_opt.CallbackDataProto.PresolveStats presolve_stats = 4;
  if (this->_internal_has_presolve_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.presolve_stats_);
  }

  // .operations_research.math_opt.CallbackDataProto.SimplexStats simplex_stats = 5;
  if (this->_internal_has_simplex_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.simplex_stats_);
  }

  // .operations_research.math_opt.CallbackDataProto.BarrierStats barrier_stats = 6;
  if (this->_internal_has_barrier_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.barrier_stats_);
  }

  // .operations_research.math_opt.CallbackDataProto.MipStats mip_stats = 7;
  if (this->_internal_has_mip_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mip_stats_);
  }

  // .operations_research.math_opt.CallbackEventProto event = 1;
  if (this->_internal_event() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackDataProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackDataProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackDataProto::GetClassData() const { return &_class_data_; }


void CallbackDataProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackDataProto*>(&to_msg);
  auto& from = static_cast<const CallbackDataProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackDataProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_primal_solution_vector()) {
    _this->_internal_mutable_primal_solution_vector()->::operations_research::math_opt::SparseDoubleVectorProto::MergeFrom(
        from._internal_primal_solution_vector());
  }
  if (from._internal_has_runtime()) {
    _this->_internal_mutable_runtime()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_runtime());
  }
  if (from._internal_has_presolve_stats()) {
    _this->_internal_mutable_presolve_stats()->::operations_research::math_opt::CallbackDataProto_PresolveStats::MergeFrom(
        from._internal_presolve_stats());
  }
  if (from._internal_has_simplex_stats()) {
    _this->_internal_mutable_simplex_stats()->::operations_research::math_opt::CallbackDataProto_SimplexStats::MergeFrom(
        from._internal_simplex_stats());
  }
  if (from._internal_has_barrier_stats()) {
    _this->_internal_mutable_barrier_stats()->::operations_research::math_opt::CallbackDataProto_BarrierStats::MergeFrom(
        from._internal_barrier_stats());
  }
  if (from._internal_has_mip_stats()) {
    _this->_internal_mutable_mip_stats()->::operations_research::math_opt::CallbackDataProto_MipStats::MergeFrom(
        from._internal_mip_stats());
  }
  if (from._internal_event() != 0) {
    _this->_internal_set_event(from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackDataProto::CopyFrom(const CallbackDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackDataProto::IsInitialized() const {
  return true;
}

void CallbackDataProto::InternalSwap(CallbackDataProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackDataProto, _impl_.event_)
      + sizeof(CallbackDataProto::_impl_.event_)
      - PROTOBUF_FIELD_OFFSET(CallbackDataProto, _impl_.primal_solution_vector_)>(
          reinterpret_cast<char*>(&_impl_.primal_solution_vector_),
          reinterpret_cast<char*>(&other->_impl_.primal_solution_vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackDataProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[4]);
}

// ===================================================================

class CallbackResultProto_GeneratedLinearConstraint::_Internal {
 public:
  static const ::operations_research::math_opt::SparseDoubleVectorProto& linear_expression(const CallbackResultProto_GeneratedLinearConstraint* msg);
};

const ::operations_research::math_opt::SparseDoubleVectorProto&
CallbackResultProto_GeneratedLinearConstraint::_Internal::linear_expression(const CallbackResultProto_GeneratedLinearConstraint* msg) {
  return *msg->_impl_.linear_expression_;
}
void CallbackResultProto_GeneratedLinearConstraint::clear_linear_expression() {
  if (GetArenaForAllocation() == nullptr && _impl_.linear_expression_ != nullptr) {
    delete _impl_.linear_expression_;
  }
  _impl_.linear_expression_ = nullptr;
}
CallbackResultProto_GeneratedLinearConstraint::CallbackResultProto_GeneratedLinearConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
}
CallbackResultProto_GeneratedLinearConstraint::CallbackResultProto_GeneratedLinearConstraint(const CallbackResultProto_GeneratedLinearConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackResultProto_GeneratedLinearConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_expression_){nullptr}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.upper_bound_){}
    , decltype(_impl_.is_lazy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_expression()) {
    _this->_impl_.linear_expression_ = new ::operations_research::math_opt::SparseDoubleVectorProto(*from._impl_.linear_expression_);
  }
  ::memcpy(&_impl_.lower_bound_, &from._impl_.lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_lazy_) -
    reinterpret_cast<char*>(&_impl_.lower_bound_)) + sizeof(_impl_.is_lazy_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
}

inline void CallbackResultProto_GeneratedLinearConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_expression_){nullptr}
    , decltype(_impl_.lower_bound_){0}
    , decltype(_impl_.upper_bound_){0}
    , decltype(_impl_.is_lazy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackResultProto_GeneratedLinearConstraint::~CallbackResultProto_GeneratedLinearConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackResultProto_GeneratedLinearConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.linear_expression_;
}

void CallbackResultProto_GeneratedLinearConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackResultProto_GeneratedLinearConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.linear_expression_ != nullptr) {
    delete _impl_.linear_expression_;
  }
  _impl_.linear_expression_ = nullptr;
  ::memset(&_impl_.lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_lazy_) -
      reinterpret_cast<char*>(&_impl_.lower_bound_)) + sizeof(_impl_.is_lazy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackResultProto_GeneratedLinearConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.SparseDoubleVectorProto linear_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lower_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double upper_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_lazy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_lazy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackResultProto_GeneratedLinearConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.SparseDoubleVectorProto linear_expression = 1;
  if (this->_internal_has_linear_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::linear_expression(this),
        _Internal::linear_expression(this).GetCachedSize(), target, stream);
  }

  // double lower_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = this->_internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_bound(), target);
  }

  // double upper_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = this->_internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_upper_bound(), target);
  }

  // bool is_lazy = 4;
  if (this->_internal_is_lazy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_lazy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  return target;
}

size_t CallbackResultProto_GeneratedLinearConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.math_opt.SparseDoubleVectorProto linear_expression = 1;
  if (this->_internal_has_linear_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linear_expression_);
  }

  // double lower_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = this->_internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    total_size += 1 + 8;
  }

  // double upper_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = this->_internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    total_size += 1 + 8;
  }

  // bool is_lazy = 4;
  if (this->_internal_is_lazy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackResultProto_GeneratedLinearConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackResultProto_GeneratedLinearConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackResultProto_GeneratedLinearConstraint::GetClassData() const { return &_class_data_; }


void CallbackResultProto_GeneratedLinearConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackResultProto_GeneratedLinearConstraint*>(&to_msg);
  auto& from = static_cast<const CallbackResultProto_GeneratedLinearConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linear_expression()) {
    _this->_internal_mutable_linear_expression()->::operations_research::math_opt::SparseDoubleVectorProto::MergeFrom(
        from._internal_linear_expression());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_bound = from._internal_lower_bound();
  uint64_t raw_lower_bound;
  memcpy(&raw_lower_bound, &tmp_lower_bound, sizeof(tmp_lower_bound));
  if (raw_lower_bound != 0) {
    _this->_internal_set_lower_bound(from._internal_lower_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_bound = from._internal_upper_bound();
  uint64_t raw_upper_bound;
  memcpy(&raw_upper_bound, &tmp_upper_bound, sizeof(tmp_upper_bound));
  if (raw_upper_bound != 0) {
    _this->_internal_set_upper_bound(from._internal_upper_bound());
  }
  if (from._internal_is_lazy() != 0) {
    _this->_internal_set_is_lazy(from._internal_is_lazy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackResultProto_GeneratedLinearConstraint::CopyFrom(const CallbackResultProto_GeneratedLinearConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackResultProto_GeneratedLinearConstraint::IsInitialized() const {
  return true;
}

void CallbackResultProto_GeneratedLinearConstraint::InternalSwap(CallbackResultProto_GeneratedLinearConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackResultProto_GeneratedLinearConstraint, _impl_.is_lazy_)
      + sizeof(CallbackResultProto_GeneratedLinearConstraint::_impl_.is_lazy_)
      - PROTOBUF_FIELD_OFFSET(CallbackResultProto_GeneratedLinearConstraint, _impl_.linear_expression_)>(
          reinterpret_cast<char*>(&_impl_.linear_expression_),
          reinterpret_cast<char*>(&other->_impl_.linear_expression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackResultProto_GeneratedLinearConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[5]);
}

// ===================================================================

class CallbackResultProto::_Internal {
 public:
};

void CallbackResultProto::clear_suggested_solutions() {
  _impl_.suggested_solutions_.Clear();
}
CallbackResultProto::CallbackResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackResultProto)
}
CallbackResultProto::CallbackResultProto(const CallbackResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackResultProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cuts_){from._impl_.cuts_}
    , decltype(_impl_.suggested_solutions_){from._impl_.suggested_solutions_}
    , decltype(_impl_.terminate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.terminate_ = from._impl_.terminate_;
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackResultProto)
}

inline void CallbackResultProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cuts_){arena}
    , decltype(_impl_.suggested_solutions_){arena}
    , decltype(_impl_.terminate_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackResultProto::~CallbackResultProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackResultProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cuts_.~RepeatedPtrField();
  _impl_.suggested_solutions_.~RepeatedPtrField();
}

void CallbackResultProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackResultProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cuts_.Clear();
  _impl_.suggested_solutions_.Clear();
  _impl_.terminate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackResultProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool terminate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.terminate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint cuts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cuts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.SparseDoubleVectorProto suggested_solutions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suggested_solutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackResultProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackResultProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool terminate = 1;
  if (this->_internal_terminate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_terminate(), target);
  }

  // repeated .operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint cuts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cuts_size()); i < n; i++) {
    const auto& repfield = this->_internal_cuts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.math_opt.SparseDoubleVectorProto suggested_solutions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_suggested_solutions_size()); i < n; i++) {
    const auto& repfield = this->_internal_suggested_solutions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackResultProto)
  return target;
}

size_t CallbackResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackResultProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.math_opt.CallbackResultProto.GeneratedLinearConstraint cuts = 4;
  total_size += 1UL * this->_internal_cuts_size();
  for (const auto& msg : this->_impl_.cuts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.math_opt.SparseDoubleVectorProto suggested_solutions = 5;
  total_size += 1UL * this->_internal_suggested_solutions_size();
  for (const auto& msg : this->_impl_.suggested_solutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool terminate = 1;
  if (this->_internal_terminate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackResultProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackResultProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackResultProto::GetClassData() const { return &_class_data_; }


void CallbackResultProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackResultProto*>(&to_msg);
  auto& from = static_cast<const CallbackResultProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackResultProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cuts_.MergeFrom(from._impl_.cuts_);
  _this->_impl_.suggested_solutions_.MergeFrom(from._impl_.suggested_solutions_);
  if (from._internal_terminate() != 0) {
    _this->_internal_set_terminate(from._internal_terminate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackResultProto::CopyFrom(const CallbackResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackResultProto::IsInitialized() const {
  return true;
}

void CallbackResultProto::InternalSwap(CallbackResultProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cuts_.InternalSwap(&other->_impl_.cuts_);
  _impl_.suggested_solutions_.InternalSwap(&other->_impl_.suggested_solutions_);
  swap(_impl_.terminate_, other->_impl_.terminate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackResultProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[6]);
}

// ===================================================================

class CallbackRegistrationProto::_Internal {
 public:
  static const ::operations_research::math_opt::SparseVectorFilterProto& mip_solution_filter(const CallbackRegistrationProto* msg);
  static const ::operations_research::math_opt::SparseVectorFilterProto& mip_node_filter(const CallbackRegistrationProto* msg);
};

const ::operations_research::math_opt::SparseVectorFilterProto&
CallbackRegistrationProto::_Internal::mip_solution_filter(const CallbackRegistrationProto* msg) {
  return *msg->_impl_.mip_solution_filter_;
}
const ::operations_research::math_opt::SparseVectorFilterProto&
CallbackRegistrationProto::_Internal::mip_node_filter(const CallbackRegistrationProto* msg) {
  return *msg->_impl_.mip_node_filter_;
}
void CallbackRegistrationProto::clear_mip_solution_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.mip_solution_filter_ != nullptr) {
    delete _impl_.mip_solution_filter_;
  }
  _impl_.mip_solution_filter_ = nullptr;
}
void CallbackRegistrationProto::clear_mip_node_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.mip_node_filter_ != nullptr) {
    delete _impl_.mip_node_filter_;
  }
  _impl_.mip_node_filter_ = nullptr;
}
CallbackRegistrationProto::CallbackRegistrationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.CallbackRegistrationProto)
}
CallbackRegistrationProto::CallbackRegistrationProto(const CallbackRegistrationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallbackRegistrationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_registration_){from._impl_.request_registration_}
    , /*decltype(_impl_._request_registration_cached_byte_size_)*/{0}
    , decltype(_impl_.mip_solution_filter_){nullptr}
    , decltype(_impl_.mip_node_filter_){nullptr}
    , decltype(_impl_.add_cuts_){}
    , decltype(_impl_.add_lazy_constraints_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mip_solution_filter()) {
    _this->_impl_.mip_solution_filter_ = new ::operations_research::math_opt::SparseVectorFilterProto(*from._impl_.mip_solution_filter_);
  }
  if (from._internal_has_mip_node_filter()) {
    _this->_impl_.mip_node_filter_ = new ::operations_research::math_opt::SparseVectorFilterProto(*from._impl_.mip_node_filter_);
  }
  ::memcpy(&_impl_.add_cuts_, &from._impl_.add_cuts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.add_lazy_constraints_) -
    reinterpret_cast<char*>(&_impl_.add_cuts_)) + sizeof(_impl_.add_lazy_constraints_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.CallbackRegistrationProto)
}

inline void CallbackRegistrationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_registration_){arena}
    , /*decltype(_impl_._request_registration_cached_byte_size_)*/{0}
    , decltype(_impl_.mip_solution_filter_){nullptr}
    , decltype(_impl_.mip_node_filter_){nullptr}
    , decltype(_impl_.add_cuts_){false}
    , decltype(_impl_.add_lazy_constraints_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackRegistrationProto::~CallbackRegistrationProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.CallbackRegistrationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackRegistrationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_registration_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.mip_solution_filter_;
  if (this != internal_default_instance()) delete _impl_.mip_node_filter_;
}

void CallbackRegistrationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackRegistrationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.CallbackRegistrationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_registration_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mip_solution_filter_ != nullptr) {
    delete _impl_.mip_solution_filter_;
  }
  _impl_.mip_solution_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mip_node_filter_ != nullptr) {
    delete _impl_.mip_node_filter_;
  }
  _impl_.mip_node_filter_ = nullptr;
  ::memset(&_impl_.add_cuts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.add_lazy_constraints_) -
      reinterpret_cast<char*>(&_impl_.add_cuts_)) + sizeof(_impl_.add_lazy_constraints_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackRegistrationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.math_opt.CallbackEventProto request_registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_request_registration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_request_registration(static_cast<::operations_research::math_opt::CallbackEventProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.SparseVectorFilterProto mip_solution_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mip_solution_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.SparseVectorFilterProto mip_node_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mip_node_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool add_cuts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.add_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool add_lazy_constraints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.add_lazy_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackRegistrationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.CallbackRegistrationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.math_opt.CallbackEventProto request_registration = 1;
  {
    int byte_size = _impl_._request_registration_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.request_registration_, byte_size, target);
    }
  }

  // .operations_research.math_opt.SparseVectorFilterProto mip_solution_filter = 2;
  if (this->_internal_has_mip_solution_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mip_solution_filter(this),
        _Internal::mip_solution_filter(this).GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.SparseVectorFilterProto mip_node_filter = 3;
  if (this->_internal_has_mip_node_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mip_node_filter(this),
        _Internal::mip_node_filter(this).GetCachedSize(), target, stream);
  }

  // bool add_cuts = 4;
  if (this->_internal_add_cuts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_add_cuts(), target);
  }

  // bool add_lazy_constraints = 5;
  if (this->_internal_add_lazy_constraints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_add_lazy_constraints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.CallbackRegistrationProto)
  return target;
}

size_t CallbackRegistrationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.CallbackRegistrationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.math_opt.CallbackEventProto request_registration = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_request_registration_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_request_registration(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._request_registration_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .operations_research.math_opt.SparseVectorFilterProto mip_solution_filter = 2;
  if (this->_internal_has_mip_solution_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mip_solution_filter_);
  }

  // .operations_research.math_opt.SparseVectorFilterProto mip_node_filter = 3;
  if (this->_internal_has_mip_node_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mip_node_filter_);
  }

  // bool add_cuts = 4;
  if (this->_internal_add_cuts() != 0) {
    total_size += 1 + 1;
  }

  // bool add_lazy_constraints = 5;
  if (this->_internal_add_lazy_constraints() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackRegistrationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallbackRegistrationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackRegistrationProto::GetClassData() const { return &_class_data_; }


void CallbackRegistrationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallbackRegistrationProto*>(&to_msg);
  auto& from = static_cast<const CallbackRegistrationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.CallbackRegistrationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.request_registration_.MergeFrom(from._impl_.request_registration_);
  if (from._internal_has_mip_solution_filter()) {
    _this->_internal_mutable_mip_solution_filter()->::operations_research::math_opt::SparseVectorFilterProto::MergeFrom(
        from._internal_mip_solution_filter());
  }
  if (from._internal_has_mip_node_filter()) {
    _this->_internal_mutable_mip_node_filter()->::operations_research::math_opt::SparseVectorFilterProto::MergeFrom(
        from._internal_mip_node_filter());
  }
  if (from._internal_add_cuts() != 0) {
    _this->_internal_set_add_cuts(from._internal_add_cuts());
  }
  if (from._internal_add_lazy_constraints() != 0) {
    _this->_internal_set_add_lazy_constraints(from._internal_add_lazy_constraints());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackRegistrationProto::CopyFrom(const CallbackRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.CallbackRegistrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackRegistrationProto::IsInitialized() const {
  return true;
}

void CallbackRegistrationProto::InternalSwap(CallbackRegistrationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.request_registration_.InternalSwap(&other->_impl_.request_registration_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackRegistrationProto, _impl_.add_lazy_constraints_)
      + sizeof(CallbackRegistrationProto::_impl_.add_lazy_constraints_)
      - PROTOBUF_FIELD_OFFSET(CallbackRegistrationProto, _impl_.mip_solution_filter_)>(
          reinterpret_cast<char*>(&_impl_.mip_solution_filter_),
          reinterpret_cast<char*>(&other->_impl_.mip_solution_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackRegistrationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fcallback_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fcallback_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackDataProto_PresolveStats*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackDataProto_PresolveStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackDataProto_PresolveStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackDataProto_SimplexStats*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackDataProto_SimplexStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackDataProto_SimplexStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackDataProto_BarrierStats*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackDataProto_BarrierStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackDataProto_BarrierStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackDataProto_MipStats*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackDataProto_MipStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackDataProto_MipStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackDataProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackDataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackResultProto_GeneratedLinearConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackResultProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::CallbackRegistrationProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::CallbackRegistrationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::CallbackRegistrationProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
