// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/solution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsolution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsolution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ortools/math_opt/sparse_containers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fmath_5fopt_2fsolution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fsolution_2eproto;
namespace operations_research {
namespace math_opt {
class BasisProto;
struct BasisProtoDefaultTypeInternal;
extern BasisProtoDefaultTypeInternal _BasisProto_default_instance_;
class DualRayProto;
struct DualRayProtoDefaultTypeInternal;
extern DualRayProtoDefaultTypeInternal _DualRayProto_default_instance_;
class DualSolutionProto;
struct DualSolutionProtoDefaultTypeInternal;
extern DualSolutionProtoDefaultTypeInternal _DualSolutionProto_default_instance_;
class PrimalRayProto;
struct PrimalRayProtoDefaultTypeInternal;
extern PrimalRayProtoDefaultTypeInternal _PrimalRayProto_default_instance_;
class PrimalSolutionProto;
struct PrimalSolutionProtoDefaultTypeInternal;
extern PrimalSolutionProtoDefaultTypeInternal _PrimalSolutionProto_default_instance_;
class PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse;
struct PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUseDefaultTypeInternal;
extern PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUseDefaultTypeInternal _PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse_default_instance_;
class SolutionProto;
struct SolutionProtoDefaultTypeInternal;
extern SolutionProtoDefaultTypeInternal _SolutionProto_default_instance_;
class SparseBasisStatusVector;
struct SparseBasisStatusVectorDefaultTypeInternal;
extern SparseBasisStatusVectorDefaultTypeInternal _SparseBasisStatusVector_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::math_opt::BasisProto* Arena::CreateMaybeMessage<::operations_research::math_opt::BasisProto>(Arena*);
template<> ::operations_research::math_opt::DualRayProto* Arena::CreateMaybeMessage<::operations_research::math_opt::DualRayProto>(Arena*);
template<> ::operations_research::math_opt::DualSolutionProto* Arena::CreateMaybeMessage<::operations_research::math_opt::DualSolutionProto>(Arena*);
template<> ::operations_research::math_opt::PrimalRayProto* Arena::CreateMaybeMessage<::operations_research::math_opt::PrimalRayProto>(Arena*);
template<> ::operations_research::math_opt::PrimalSolutionProto* Arena::CreateMaybeMessage<::operations_research::math_opt::PrimalSolutionProto>(Arena*);
template<> ::operations_research::math_opt::PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::operations_research::math_opt::PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse>(Arena*);
template<> ::operations_research::math_opt::SolutionProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SolutionProto>(Arena*);
template<> ::operations_research::math_opt::SparseBasisStatusVector* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseBasisStatusVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace math_opt {

enum SolutionStatusProto : int {
  SOLUTION_STATUS_UNSPECIFIED = 0,
  SOLUTION_STATUS_UNDETERMINED = 1,
  SOLUTION_STATUS_FEASIBLE = 2,
  SOLUTION_STATUS_INFEASIBLE = 3,
  SolutionStatusProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SolutionStatusProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SolutionStatusProto_IsValid(int value);
constexpr SolutionStatusProto SolutionStatusProto_MIN = SOLUTION_STATUS_UNSPECIFIED;
constexpr SolutionStatusProto SolutionStatusProto_MAX = SOLUTION_STATUS_INFEASIBLE;
constexpr int SolutionStatusProto_ARRAYSIZE = SolutionStatusProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionStatusProto_descriptor();
template<typename T>
inline const std::string& SolutionStatusProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionStatusProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionStatusProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionStatusProto_descriptor(), enum_t_value);
}
inline bool SolutionStatusProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolutionStatusProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionStatusProto>(
    SolutionStatusProto_descriptor(), name, value);
}
enum BasisStatusProto : int {
  BASIS_STATUS_UNSPECIFIED = 0,
  BASIS_STATUS_FREE = 1,
  BASIS_STATUS_AT_LOWER_BOUND = 2,
  BASIS_STATUS_AT_UPPER_BOUND = 3,
  BASIS_STATUS_FIXED_VALUE = 4,
  BASIS_STATUS_BASIC = 5,
  BasisStatusProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BasisStatusProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BasisStatusProto_IsValid(int value);
constexpr BasisStatusProto BasisStatusProto_MIN = BASIS_STATUS_UNSPECIFIED;
constexpr BasisStatusProto BasisStatusProto_MAX = BASIS_STATUS_BASIC;
constexpr int BasisStatusProto_ARRAYSIZE = BasisStatusProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasisStatusProto_descriptor();
template<typename T>
inline const std::string& BasisStatusProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasisStatusProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasisStatusProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasisStatusProto_descriptor(), enum_t_value);
}
inline bool BasisStatusProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BasisStatusProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasisStatusProto>(
    BasisStatusProto_descriptor(), name, value);
}
// ===================================================================

class PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse, 
    int64_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse, 
    int64_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse& other);
  static const PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse*>(&_PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};

// -------------------------------------------------------------------

class PrimalSolutionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.PrimalSolutionProto) */ {
 public:
  inline PrimalSolutionProto() : PrimalSolutionProto(nullptr) {}
  ~PrimalSolutionProto() override;
  explicit PROTOBUF_CONSTEXPR PrimalSolutionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimalSolutionProto(const PrimalSolutionProto& from);
  PrimalSolutionProto(PrimalSolutionProto&& from) noexcept
    : PrimalSolutionProto() {
    *this = ::std::move(from);
  }

  inline PrimalSolutionProto& operator=(const PrimalSolutionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimalSolutionProto& operator=(PrimalSolutionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimalSolutionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimalSolutionProto* internal_default_instance() {
    return reinterpret_cast<const PrimalSolutionProto*>(
               &_PrimalSolutionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrimalSolutionProto& a, PrimalSolutionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimalSolutionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimalSolutionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimalSolutionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimalSolutionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimalSolutionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimalSolutionProto& from) {
    PrimalSolutionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimalSolutionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.PrimalSolutionProto";
  }
  protected:
  explicit PrimalSolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAuxiliaryObjectiveValuesFieldNumber = 4,
    kVariableValuesFieldNumber = 1,
    kObjectiveValueFieldNumber = 2,
    kFeasibilityStatusFieldNumber = 3,
  };
  // map<int64, double> auxiliary_objective_values = 4;
  int auxiliary_objective_values_size() const;
  private:
  int _internal_auxiliary_objective_values_size() const;
  public:
  void clear_auxiliary_objective_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
      _internal_auxiliary_objective_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
      _internal_mutable_auxiliary_objective_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
      auxiliary_objective_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
      mutable_auxiliary_objective_values();

  // .operations_research.math_opt.SparseDoubleVectorProto variable_values = 1;
  bool has_variable_values() const;
  private:
  bool _internal_has_variable_values() const;
  public:
  void clear_variable_values();
  const ::operations_research::math_opt::SparseDoubleVectorProto& variable_values() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_variable_values();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_variable_values();
  void set_allocated_variable_values(::operations_research::math_opt::SparseDoubleVectorProto* variable_values);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_variable_values() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_variable_values();
  public:
  void unsafe_arena_set_allocated_variable_values(
      ::operations_research::math_opt::SparseDoubleVectorProto* variable_values);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_variable_values();

  // double objective_value = 2;
  void clear_objective_value();
  double objective_value() const;
  void set_objective_value(double value);
  private:
  double _internal_objective_value() const;
  void _internal_set_objective_value(double value);
  public:

  // .operations_research.math_opt.SolutionStatusProto feasibility_status = 3;
  void clear_feasibility_status();
  ::operations_research::math_opt::SolutionStatusProto feasibility_status() const;
  void set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value);
  private:
  ::operations_research::math_opt::SolutionStatusProto _internal_feasibility_status() const;
  void _internal_set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.PrimalSolutionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PrimalSolutionProto_AuxiliaryObjectiveValuesEntry_DoNotUse,
        int64_t, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> auxiliary_objective_values_;
    ::operations_research::math_opt::SparseDoubleVectorProto* variable_values_;
    double objective_value_;
    int feasibility_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class PrimalRayProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.PrimalRayProto) */ {
 public:
  inline PrimalRayProto() : PrimalRayProto(nullptr) {}
  ~PrimalRayProto() override;
  explicit PROTOBUF_CONSTEXPR PrimalRayProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimalRayProto(const PrimalRayProto& from);
  PrimalRayProto(PrimalRayProto&& from) noexcept
    : PrimalRayProto() {
    *this = ::std::move(from);
  }

  inline PrimalRayProto& operator=(const PrimalRayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimalRayProto& operator=(PrimalRayProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimalRayProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimalRayProto* internal_default_instance() {
    return reinterpret_cast<const PrimalRayProto*>(
               &_PrimalRayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrimalRayProto& a, PrimalRayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimalRayProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimalRayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimalRayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimalRayProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimalRayProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimalRayProto& from) {
    PrimalRayProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimalRayProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.PrimalRayProto";
  }
  protected:
  explicit PrimalRayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableValuesFieldNumber = 1,
  };
  // .operations_research.math_opt.SparseDoubleVectorProto variable_values = 1;
  bool has_variable_values() const;
  private:
  bool _internal_has_variable_values() const;
  public:
  void clear_variable_values();
  const ::operations_research::math_opt::SparseDoubleVectorProto& variable_values() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_variable_values();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_variable_values();
  void set_allocated_variable_values(::operations_research::math_opt::SparseDoubleVectorProto* variable_values);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_variable_values() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_variable_values();
  public:
  void unsafe_arena_set_allocated_variable_values(
      ::operations_research::math_opt::SparseDoubleVectorProto* variable_values);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_variable_values();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.PrimalRayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::operations_research::math_opt::SparseDoubleVectorProto* variable_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class DualSolutionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.DualSolutionProto) */ {
 public:
  inline DualSolutionProto() : DualSolutionProto(nullptr) {}
  ~DualSolutionProto() override;
  explicit PROTOBUF_CONSTEXPR DualSolutionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DualSolutionProto(const DualSolutionProto& from);
  DualSolutionProto(DualSolutionProto&& from) noexcept
    : DualSolutionProto() {
    *this = ::std::move(from);
  }

  inline DualSolutionProto& operator=(const DualSolutionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualSolutionProto& operator=(DualSolutionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DualSolutionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DualSolutionProto* internal_default_instance() {
    return reinterpret_cast<const DualSolutionProto*>(
               &_DualSolutionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DualSolutionProto& a, DualSolutionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DualSolutionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualSolutionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DualSolutionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DualSolutionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DualSolutionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DualSolutionProto& from) {
    DualSolutionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualSolutionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.DualSolutionProto";
  }
  protected:
  explicit DualSolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDualValuesFieldNumber = 1,
    kReducedCostsFieldNumber = 2,
    kObjectiveValueFieldNumber = 3,
    kFeasibilityStatusFieldNumber = 4,
  };
  // .operations_research.math_opt.SparseDoubleVectorProto dual_values = 1;
  bool has_dual_values() const;
  private:
  bool _internal_has_dual_values() const;
  public:
  void clear_dual_values();
  const ::operations_research::math_opt::SparseDoubleVectorProto& dual_values() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_dual_values();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_dual_values();
  void set_allocated_dual_values(::operations_research::math_opt::SparseDoubleVectorProto* dual_values);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_dual_values() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_dual_values();
  public:
  void unsafe_arena_set_allocated_dual_values(
      ::operations_research::math_opt::SparseDoubleVectorProto* dual_values);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_dual_values();

  // .operations_research.math_opt.SparseDoubleVectorProto reduced_costs = 2;
  bool has_reduced_costs() const;
  private:
  bool _internal_has_reduced_costs() const;
  public:
  void clear_reduced_costs();
  const ::operations_research::math_opt::SparseDoubleVectorProto& reduced_costs() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_reduced_costs();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_reduced_costs();
  void set_allocated_reduced_costs(::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_reduced_costs() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_reduced_costs();
  public:
  void unsafe_arena_set_allocated_reduced_costs(
      ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_reduced_costs();

  // optional double objective_value = 3;
  bool has_objective_value() const;
  private:
  bool _internal_has_objective_value() const;
  public:
  void clear_objective_value();
  double objective_value() const;
  void set_objective_value(double value);
  private:
  double _internal_objective_value() const;
  void _internal_set_objective_value(double value);
  public:

  // .operations_research.math_opt.SolutionStatusProto feasibility_status = 4;
  void clear_feasibility_status();
  ::operations_research::math_opt::SolutionStatusProto feasibility_status() const;
  void set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value);
  private:
  ::operations_research::math_opt::SolutionStatusProto _internal_feasibility_status() const;
  void _internal_set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.DualSolutionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::operations_research::math_opt::SparseDoubleVectorProto* dual_values_;
    ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs_;
    double objective_value_;
    int feasibility_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class DualRayProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.DualRayProto) */ {
 public:
  inline DualRayProto() : DualRayProto(nullptr) {}
  ~DualRayProto() override;
  explicit PROTOBUF_CONSTEXPR DualRayProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DualRayProto(const DualRayProto& from);
  DualRayProto(DualRayProto&& from) noexcept
    : DualRayProto() {
    *this = ::std::move(from);
  }

  inline DualRayProto& operator=(const DualRayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualRayProto& operator=(DualRayProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DualRayProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DualRayProto* internal_default_instance() {
    return reinterpret_cast<const DualRayProto*>(
               &_DualRayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DualRayProto& a, DualRayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DualRayProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualRayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DualRayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DualRayProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DualRayProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DualRayProto& from) {
    DualRayProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualRayProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.DualRayProto";
  }
  protected:
  explicit DualRayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDualValuesFieldNumber = 1,
    kReducedCostsFieldNumber = 2,
  };
  // .operations_research.math_opt.SparseDoubleVectorProto dual_values = 1;
  bool has_dual_values() const;
  private:
  bool _internal_has_dual_values() const;
  public:
  void clear_dual_values();
  const ::operations_research::math_opt::SparseDoubleVectorProto& dual_values() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_dual_values();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_dual_values();
  void set_allocated_dual_values(::operations_research::math_opt::SparseDoubleVectorProto* dual_values);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_dual_values() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_dual_values();
  public:
  void unsafe_arena_set_allocated_dual_values(
      ::operations_research::math_opt::SparseDoubleVectorProto* dual_values);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_dual_values();

  // .operations_research.math_opt.SparseDoubleVectorProto reduced_costs = 2;
  bool has_reduced_costs() const;
  private:
  bool _internal_has_reduced_costs() const;
  public:
  void clear_reduced_costs();
  const ::operations_research::math_opt::SparseDoubleVectorProto& reduced_costs() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseDoubleVectorProto* release_reduced_costs();
  ::operations_research::math_opt::SparseDoubleVectorProto* mutable_reduced_costs();
  void set_allocated_reduced_costs(::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs);
  private:
  const ::operations_research::math_opt::SparseDoubleVectorProto& _internal_reduced_costs() const;
  ::operations_research::math_opt::SparseDoubleVectorProto* _internal_mutable_reduced_costs();
  public:
  void unsafe_arena_set_allocated_reduced_costs(
      ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs);
  ::operations_research::math_opt::SparseDoubleVectorProto* unsafe_arena_release_reduced_costs();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.DualRayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::operations_research::math_opt::SparseDoubleVectorProto* dual_values_;
    ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class SparseBasisStatusVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseBasisStatusVector) */ {
 public:
  inline SparseBasisStatusVector() : SparseBasisStatusVector(nullptr) {}
  ~SparseBasisStatusVector() override;
  explicit PROTOBUF_CONSTEXPR SparseBasisStatusVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseBasisStatusVector(const SparseBasisStatusVector& from);
  SparseBasisStatusVector(SparseBasisStatusVector&& from) noexcept
    : SparseBasisStatusVector() {
    *this = ::std::move(from);
  }

  inline SparseBasisStatusVector& operator=(const SparseBasisStatusVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseBasisStatusVector& operator=(SparseBasisStatusVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseBasisStatusVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseBasisStatusVector* internal_default_instance() {
    return reinterpret_cast<const SparseBasisStatusVector*>(
               &_SparseBasisStatusVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SparseBasisStatusVector& a, SparseBasisStatusVector& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseBasisStatusVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseBasisStatusVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseBasisStatusVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseBasisStatusVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseBasisStatusVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseBasisStatusVector& from) {
    SparseBasisStatusVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseBasisStatusVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseBasisStatusVector";
  }
  protected:
  explicit SparseBasisStatusVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated .operations_research.math_opt.BasisStatusProto values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::operations_research::math_opt::BasisStatusProto _internal_values(int index) const;
  void _internal_add_values(::operations_research::math_opt::BasisStatusProto value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_values();
  public:
  ::operations_research::math_opt::BasisStatusProto values(int index) const;
  void set_values(int index, ::operations_research::math_opt::BasisStatusProto value);
  void add_values(::operations_research::math_opt::BasisStatusProto value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_values();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseBasisStatusVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class BasisProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.BasisProto) */ {
 public:
  inline BasisProto() : BasisProto(nullptr) {}
  ~BasisProto() override;
  explicit PROTOBUF_CONSTEXPR BasisProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasisProto(const BasisProto& from);
  BasisProto(BasisProto&& from) noexcept
    : BasisProto() {
    *this = ::std::move(from);
  }

  inline BasisProto& operator=(const BasisProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasisProto& operator=(BasisProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasisProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasisProto* internal_default_instance() {
    return reinterpret_cast<const BasisProto*>(
               &_BasisProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BasisProto& a, BasisProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BasisProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasisProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasisProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasisProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasisProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BasisProto& from) {
    BasisProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasisProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.BasisProto";
  }
  protected:
  explicit BasisProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintStatusFieldNumber = 1,
    kVariableStatusFieldNumber = 2,
    kBasicDualFeasibilityFieldNumber = 3,
  };
  // .operations_research.math_opt.SparseBasisStatusVector constraint_status = 1;
  bool has_constraint_status() const;
  private:
  bool _internal_has_constraint_status() const;
  public:
  void clear_constraint_status();
  const ::operations_research::math_opt::SparseBasisStatusVector& constraint_status() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseBasisStatusVector* release_constraint_status();
  ::operations_research::math_opt::SparseBasisStatusVector* mutable_constraint_status();
  void set_allocated_constraint_status(::operations_research::math_opt::SparseBasisStatusVector* constraint_status);
  private:
  const ::operations_research::math_opt::SparseBasisStatusVector& _internal_constraint_status() const;
  ::operations_research::math_opt::SparseBasisStatusVector* _internal_mutable_constraint_status();
  public:
  void unsafe_arena_set_allocated_constraint_status(
      ::operations_research::math_opt::SparseBasisStatusVector* constraint_status);
  ::operations_research::math_opt::SparseBasisStatusVector* unsafe_arena_release_constraint_status();

  // .operations_research.math_opt.SparseBasisStatusVector variable_status = 2;
  bool has_variable_status() const;
  private:
  bool _internal_has_variable_status() const;
  public:
  void clear_variable_status();
  const ::operations_research::math_opt::SparseBasisStatusVector& variable_status() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SparseBasisStatusVector* release_variable_status();
  ::operations_research::math_opt::SparseBasisStatusVector* mutable_variable_status();
  void set_allocated_variable_status(::operations_research::math_opt::SparseBasisStatusVector* variable_status);
  private:
  const ::operations_research::math_opt::SparseBasisStatusVector& _internal_variable_status() const;
  ::operations_research::math_opt::SparseBasisStatusVector* _internal_mutable_variable_status();
  public:
  void unsafe_arena_set_allocated_variable_status(
      ::operations_research::math_opt::SparseBasisStatusVector* variable_status);
  ::operations_research::math_opt::SparseBasisStatusVector* unsafe_arena_release_variable_status();

  // .operations_research.math_opt.SolutionStatusProto basic_dual_feasibility = 3;
  void clear_basic_dual_feasibility();
  ::operations_research::math_opt::SolutionStatusProto basic_dual_feasibility() const;
  void set_basic_dual_feasibility(::operations_research::math_opt::SolutionStatusProto value);
  private:
  ::operations_research::math_opt::SolutionStatusProto _internal_basic_dual_feasibility() const;
  void _internal_set_basic_dual_feasibility(::operations_research::math_opt::SolutionStatusProto value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.BasisProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::operations_research::math_opt::SparseBasisStatusVector* constraint_status_;
    ::operations_research::math_opt::SparseBasisStatusVector* variable_status_;
    int basic_dual_feasibility_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// -------------------------------------------------------------------

class SolutionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolutionProto) */ {
 public:
  inline SolutionProto() : SolutionProto(nullptr) {}
  ~SolutionProto() override;
  explicit PROTOBUF_CONSTEXPR SolutionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolutionProto(const SolutionProto& from);
  SolutionProto(SolutionProto&& from) noexcept
    : SolutionProto() {
    *this = ::std::move(from);
  }

  inline SolutionProto& operator=(const SolutionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolutionProto& operator=(SolutionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolutionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolutionProto* internal_default_instance() {
    return reinterpret_cast<const SolutionProto*>(
               &_SolutionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SolutionProto& a, SolutionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolutionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolutionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolutionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolutionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolutionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolutionProto& from) {
    SolutionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SolutionProto";
  }
  protected:
  explicit SolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimalSolutionFieldNumber = 1,
    kDualSolutionFieldNumber = 2,
    kBasisFieldNumber = 3,
  };
  // optional .operations_research.math_opt.PrimalSolutionProto primal_solution = 1;
  bool has_primal_solution() const;
  private:
  bool _internal_has_primal_solution() const;
  public:
  void clear_primal_solution();
  const ::operations_research::math_opt::PrimalSolutionProto& primal_solution() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::PrimalSolutionProto* release_primal_solution();
  ::operations_research::math_opt::PrimalSolutionProto* mutable_primal_solution();
  void set_allocated_primal_solution(::operations_research::math_opt::PrimalSolutionProto* primal_solution);
  private:
  const ::operations_research::math_opt::PrimalSolutionProto& _internal_primal_solution() const;
  ::operations_research::math_opt::PrimalSolutionProto* _internal_mutable_primal_solution();
  public:
  void unsafe_arena_set_allocated_primal_solution(
      ::operations_research::math_opt::PrimalSolutionProto* primal_solution);
  ::operations_research::math_opt::PrimalSolutionProto* unsafe_arena_release_primal_solution();

  // optional .operations_research.math_opt.DualSolutionProto dual_solution = 2;
  bool has_dual_solution() const;
  private:
  bool _internal_has_dual_solution() const;
  public:
  void clear_dual_solution();
  const ::operations_research::math_opt::DualSolutionProto& dual_solution() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::DualSolutionProto* release_dual_solution();
  ::operations_research::math_opt::DualSolutionProto* mutable_dual_solution();
  void set_allocated_dual_solution(::operations_research::math_opt::DualSolutionProto* dual_solution);
  private:
  const ::operations_research::math_opt::DualSolutionProto& _internal_dual_solution() const;
  ::operations_research::math_opt::DualSolutionProto* _internal_mutable_dual_solution();
  public:
  void unsafe_arena_set_allocated_dual_solution(
      ::operations_research::math_opt::DualSolutionProto* dual_solution);
  ::operations_research::math_opt::DualSolutionProto* unsafe_arena_release_dual_solution();

  // optional .operations_research.math_opt.BasisProto basis = 3;
  bool has_basis() const;
  private:
  bool _internal_has_basis() const;
  public:
  void clear_basis();
  const ::operations_research::math_opt::BasisProto& basis() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::BasisProto* release_basis();
  ::operations_research::math_opt::BasisProto* mutable_basis();
  void set_allocated_basis(::operations_research::math_opt::BasisProto* basis);
  private:
  const ::operations_research::math_opt::BasisProto& _internal_basis() const;
  ::operations_research::math_opt::BasisProto* _internal_mutable_basis();
  public:
  void unsafe_arena_set_allocated_basis(
      ::operations_research::math_opt::BasisProto* basis);
  ::operations_research::math_opt::BasisProto* unsafe_arena_release_basis();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolutionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::operations_research::math_opt::PrimalSolutionProto* primal_solution_;
    ::operations_research::math_opt::DualSolutionProto* dual_solution_;
    ::operations_research::math_opt::BasisProto* basis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsolution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PrimalSolutionProto

// .operations_research.math_opt.SparseDoubleVectorProto variable_values = 1;
inline bool PrimalSolutionProto::_internal_has_variable_values() const {
  return this != internal_default_instance() && _impl_.variable_values_ != nullptr;
}
inline bool PrimalSolutionProto::has_variable_values() const {
  return _internal_has_variable_values();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& PrimalSolutionProto::_internal_variable_values() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.variable_values_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& PrimalSolutionProto::variable_values() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.PrimalSolutionProto.variable_values)
  return _internal_variable_values();
}
inline void PrimalSolutionProto::unsafe_arena_set_allocated_variable_values(
    ::operations_research::math_opt::SparseDoubleVectorProto* variable_values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variable_values_);
  }
  _impl_.variable_values_ = variable_values;
  if (variable_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.PrimalSolutionProto.variable_values)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalSolutionProto::release_variable_values() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.variable_values_;
  _impl_.variable_values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalSolutionProto::unsafe_arena_release_variable_values() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.PrimalSolutionProto.variable_values)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.variable_values_;
  _impl_.variable_values_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalSolutionProto::_internal_mutable_variable_values() {
  
  if (_impl_.variable_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.variable_values_ = p;
  }
  return _impl_.variable_values_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalSolutionProto::mutable_variable_values() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_variable_values();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.PrimalSolutionProto.variable_values)
  return _msg;
}
inline void PrimalSolutionProto::set_allocated_variable_values(::operations_research::math_opt::SparseDoubleVectorProto* variable_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variable_values_);
  }
  if (variable_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variable_values));
    if (message_arena != submessage_arena) {
      variable_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_values, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.variable_values_ = variable_values;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.PrimalSolutionProto.variable_values)
}

// double objective_value = 2;
inline void PrimalSolutionProto::clear_objective_value() {
  _impl_.objective_value_ = 0;
}
inline double PrimalSolutionProto::_internal_objective_value() const {
  return _impl_.objective_value_;
}
inline double PrimalSolutionProto::objective_value() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.PrimalSolutionProto.objective_value)
  return _internal_objective_value();
}
inline void PrimalSolutionProto::_internal_set_objective_value(double value) {
  
  _impl_.objective_value_ = value;
}
inline void PrimalSolutionProto::set_objective_value(double value) {
  _internal_set_objective_value(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.PrimalSolutionProto.objective_value)
}

// map<int64, double> auxiliary_objective_values = 4;
inline int PrimalSolutionProto::_internal_auxiliary_objective_values_size() const {
  return _impl_.auxiliary_objective_values_.size();
}
inline int PrimalSolutionProto::auxiliary_objective_values_size() const {
  return _internal_auxiliary_objective_values_size();
}
inline void PrimalSolutionProto::clear_auxiliary_objective_values() {
  _impl_.auxiliary_objective_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
PrimalSolutionProto::_internal_auxiliary_objective_values() const {
  return _impl_.auxiliary_objective_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
PrimalSolutionProto::auxiliary_objective_values() const {
  // @@protoc_insertion_point(field_map:operations_research.math_opt.PrimalSolutionProto.auxiliary_objective_values)
  return _internal_auxiliary_objective_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
PrimalSolutionProto::_internal_mutable_auxiliary_objective_values() {
  return _impl_.auxiliary_objective_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
PrimalSolutionProto::mutable_auxiliary_objective_values() {
  // @@protoc_insertion_point(field_mutable_map:operations_research.math_opt.PrimalSolutionProto.auxiliary_objective_values)
  return _internal_mutable_auxiliary_objective_values();
}

// .operations_research.math_opt.SolutionStatusProto feasibility_status = 3;
inline void PrimalSolutionProto::clear_feasibility_status() {
  _impl_.feasibility_status_ = 0;
}
inline ::operations_research::math_opt::SolutionStatusProto PrimalSolutionProto::_internal_feasibility_status() const {
  return static_cast< ::operations_research::math_opt::SolutionStatusProto >(_impl_.feasibility_status_);
}
inline ::operations_research::math_opt::SolutionStatusProto PrimalSolutionProto::feasibility_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.PrimalSolutionProto.feasibility_status)
  return _internal_feasibility_status();
}
inline void PrimalSolutionProto::_internal_set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value) {
  
  _impl_.feasibility_status_ = value;
}
inline void PrimalSolutionProto::set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value) {
  _internal_set_feasibility_status(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.PrimalSolutionProto.feasibility_status)
}

// -------------------------------------------------------------------

// PrimalRayProto

// .operations_research.math_opt.SparseDoubleVectorProto variable_values = 1;
inline bool PrimalRayProto::_internal_has_variable_values() const {
  return this != internal_default_instance() && _impl_.variable_values_ != nullptr;
}
inline bool PrimalRayProto::has_variable_values() const {
  return _internal_has_variable_values();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& PrimalRayProto::_internal_variable_values() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.variable_values_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& PrimalRayProto::variable_values() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.PrimalRayProto.variable_values)
  return _internal_variable_values();
}
inline void PrimalRayProto::unsafe_arena_set_allocated_variable_values(
    ::operations_research::math_opt::SparseDoubleVectorProto* variable_values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variable_values_);
  }
  _impl_.variable_values_ = variable_values;
  if (variable_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.PrimalRayProto.variable_values)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalRayProto::release_variable_values() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.variable_values_;
  _impl_.variable_values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalRayProto::unsafe_arena_release_variable_values() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.PrimalRayProto.variable_values)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.variable_values_;
  _impl_.variable_values_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalRayProto::_internal_mutable_variable_values() {
  
  if (_impl_.variable_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.variable_values_ = p;
  }
  return _impl_.variable_values_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* PrimalRayProto::mutable_variable_values() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_variable_values();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.PrimalRayProto.variable_values)
  return _msg;
}
inline void PrimalRayProto::set_allocated_variable_values(::operations_research::math_opt::SparseDoubleVectorProto* variable_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variable_values_);
  }
  if (variable_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variable_values));
    if (message_arena != submessage_arena) {
      variable_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_values, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.variable_values_ = variable_values;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.PrimalRayProto.variable_values)
}

// -------------------------------------------------------------------

// DualSolutionProto

// .operations_research.math_opt.SparseDoubleVectorProto dual_values = 1;
inline bool DualSolutionProto::_internal_has_dual_values() const {
  return this != internal_default_instance() && _impl_.dual_values_ != nullptr;
}
inline bool DualSolutionProto::has_dual_values() const {
  return _internal_has_dual_values();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualSolutionProto::_internal_dual_values() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.dual_values_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualSolutionProto::dual_values() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualSolutionProto.dual_values)
  return _internal_dual_values();
}
inline void DualSolutionProto::unsafe_arena_set_allocated_dual_values(
    ::operations_research::math_opt::SparseDoubleVectorProto* dual_values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dual_values_);
  }
  _impl_.dual_values_ = dual_values;
  if (dual_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.DualSolutionProto.dual_values)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::release_dual_values() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.dual_values_;
  _impl_.dual_values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::unsafe_arena_release_dual_values() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.DualSolutionProto.dual_values)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.dual_values_;
  _impl_.dual_values_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::_internal_mutable_dual_values() {
  
  if (_impl_.dual_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.dual_values_ = p;
  }
  return _impl_.dual_values_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::mutable_dual_values() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_dual_values();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.DualSolutionProto.dual_values)
  return _msg;
}
inline void DualSolutionProto::set_allocated_dual_values(::operations_research::math_opt::SparseDoubleVectorProto* dual_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dual_values_);
  }
  if (dual_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dual_values));
    if (message_arena != submessage_arena) {
      dual_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dual_values, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dual_values_ = dual_values;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.DualSolutionProto.dual_values)
}

// .operations_research.math_opt.SparseDoubleVectorProto reduced_costs = 2;
inline bool DualSolutionProto::_internal_has_reduced_costs() const {
  return this != internal_default_instance() && _impl_.reduced_costs_ != nullptr;
}
inline bool DualSolutionProto::has_reduced_costs() const {
  return _internal_has_reduced_costs();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualSolutionProto::_internal_reduced_costs() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.reduced_costs_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualSolutionProto::reduced_costs() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualSolutionProto.reduced_costs)
  return _internal_reduced_costs();
}
inline void DualSolutionProto::unsafe_arena_set_allocated_reduced_costs(
    ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reduced_costs_);
  }
  _impl_.reduced_costs_ = reduced_costs;
  if (reduced_costs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.DualSolutionProto.reduced_costs)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::release_reduced_costs() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.reduced_costs_;
  _impl_.reduced_costs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::unsafe_arena_release_reduced_costs() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.DualSolutionProto.reduced_costs)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.reduced_costs_;
  _impl_.reduced_costs_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::_internal_mutable_reduced_costs() {
  
  if (_impl_.reduced_costs_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.reduced_costs_ = p;
  }
  return _impl_.reduced_costs_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualSolutionProto::mutable_reduced_costs() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_reduced_costs();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.DualSolutionProto.reduced_costs)
  return _msg;
}
inline void DualSolutionProto::set_allocated_reduced_costs(::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reduced_costs_);
  }
  if (reduced_costs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reduced_costs));
    if (message_arena != submessage_arena) {
      reduced_costs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduced_costs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reduced_costs_ = reduced_costs;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.DualSolutionProto.reduced_costs)
}

// optional double objective_value = 3;
inline bool DualSolutionProto::_internal_has_objective_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DualSolutionProto::has_objective_value() const {
  return _internal_has_objective_value();
}
inline void DualSolutionProto::clear_objective_value() {
  _impl_.objective_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double DualSolutionProto::_internal_objective_value() const {
  return _impl_.objective_value_;
}
inline double DualSolutionProto::objective_value() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualSolutionProto.objective_value)
  return _internal_objective_value();
}
inline void DualSolutionProto::_internal_set_objective_value(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.objective_value_ = value;
}
inline void DualSolutionProto::set_objective_value(double value) {
  _internal_set_objective_value(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.DualSolutionProto.objective_value)
}

// .operations_research.math_opt.SolutionStatusProto feasibility_status = 4;
inline void DualSolutionProto::clear_feasibility_status() {
  _impl_.feasibility_status_ = 0;
}
inline ::operations_research::math_opt::SolutionStatusProto DualSolutionProto::_internal_feasibility_status() const {
  return static_cast< ::operations_research::math_opt::SolutionStatusProto >(_impl_.feasibility_status_);
}
inline ::operations_research::math_opt::SolutionStatusProto DualSolutionProto::feasibility_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualSolutionProto.feasibility_status)
  return _internal_feasibility_status();
}
inline void DualSolutionProto::_internal_set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value) {
  
  _impl_.feasibility_status_ = value;
}
inline void DualSolutionProto::set_feasibility_status(::operations_research::math_opt::SolutionStatusProto value) {
  _internal_set_feasibility_status(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.DualSolutionProto.feasibility_status)
}

// -------------------------------------------------------------------

// DualRayProto

// .operations_research.math_opt.SparseDoubleVectorProto dual_values = 1;
inline bool DualRayProto::_internal_has_dual_values() const {
  return this != internal_default_instance() && _impl_.dual_values_ != nullptr;
}
inline bool DualRayProto::has_dual_values() const {
  return _internal_has_dual_values();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualRayProto::_internal_dual_values() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.dual_values_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualRayProto::dual_values() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualRayProto.dual_values)
  return _internal_dual_values();
}
inline void DualRayProto::unsafe_arena_set_allocated_dual_values(
    ::operations_research::math_opt::SparseDoubleVectorProto* dual_values) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dual_values_);
  }
  _impl_.dual_values_ = dual_values;
  if (dual_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.DualRayProto.dual_values)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::release_dual_values() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.dual_values_;
  _impl_.dual_values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::unsafe_arena_release_dual_values() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.DualRayProto.dual_values)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.dual_values_;
  _impl_.dual_values_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::_internal_mutable_dual_values() {
  
  if (_impl_.dual_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.dual_values_ = p;
  }
  return _impl_.dual_values_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::mutable_dual_values() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_dual_values();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.DualRayProto.dual_values)
  return _msg;
}
inline void DualRayProto::set_allocated_dual_values(::operations_research::math_opt::SparseDoubleVectorProto* dual_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dual_values_);
  }
  if (dual_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dual_values));
    if (message_arena != submessage_arena) {
      dual_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dual_values, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dual_values_ = dual_values;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.DualRayProto.dual_values)
}

// .operations_research.math_opt.SparseDoubleVectorProto reduced_costs = 2;
inline bool DualRayProto::_internal_has_reduced_costs() const {
  return this != internal_default_instance() && _impl_.reduced_costs_ != nullptr;
}
inline bool DualRayProto::has_reduced_costs() const {
  return _internal_has_reduced_costs();
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualRayProto::_internal_reduced_costs() const {
  const ::operations_research::math_opt::SparseDoubleVectorProto* p = _impl_.reduced_costs_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseDoubleVectorProto&>(
      ::operations_research::math_opt::_SparseDoubleVectorProto_default_instance_);
}
inline const ::operations_research::math_opt::SparseDoubleVectorProto& DualRayProto::reduced_costs() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.DualRayProto.reduced_costs)
  return _internal_reduced_costs();
}
inline void DualRayProto::unsafe_arena_set_allocated_reduced_costs(
    ::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reduced_costs_);
  }
  _impl_.reduced_costs_ = reduced_costs;
  if (reduced_costs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.DualRayProto.reduced_costs)
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::release_reduced_costs() {
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.reduced_costs_;
  _impl_.reduced_costs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::unsafe_arena_release_reduced_costs() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.DualRayProto.reduced_costs)
  
  ::operations_research::math_opt::SparseDoubleVectorProto* temp = _impl_.reduced_costs_;
  _impl_.reduced_costs_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::_internal_mutable_reduced_costs() {
  
  if (_impl_.reduced_costs_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(GetArenaForAllocation());
    _impl_.reduced_costs_ = p;
  }
  return _impl_.reduced_costs_;
}
inline ::operations_research::math_opt::SparseDoubleVectorProto* DualRayProto::mutable_reduced_costs() {
  ::operations_research::math_opt::SparseDoubleVectorProto* _msg = _internal_mutable_reduced_costs();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.DualRayProto.reduced_costs)
  return _msg;
}
inline void DualRayProto::set_allocated_reduced_costs(::operations_research::math_opt::SparseDoubleVectorProto* reduced_costs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reduced_costs_);
  }
  if (reduced_costs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reduced_costs));
    if (message_arena != submessage_arena) {
      reduced_costs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduced_costs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reduced_costs_ = reduced_costs;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.DualRayProto.reduced_costs)
}

// -------------------------------------------------------------------

// SparseBasisStatusVector

// repeated int64 ids = 1;
inline int SparseBasisStatusVector::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int SparseBasisStatusVector::ids_size() const {
  return _internal_ids_size();
}
inline void SparseBasisStatusVector::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t SparseBasisStatusVector::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t SparseBasisStatusVector::ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseBasisStatusVector.ids)
  return _internal_ids(index);
}
inline void SparseBasisStatusVector::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseBasisStatusVector.ids)
}
inline void SparseBasisStatusVector::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void SparseBasisStatusVector::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseBasisStatusVector.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseBasisStatusVector::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseBasisStatusVector::ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseBasisStatusVector.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseBasisStatusVector::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseBasisStatusVector::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseBasisStatusVector.ids)
  return _internal_mutable_ids();
}

// repeated .operations_research.math_opt.BasisStatusProto values = 2;
inline int SparseBasisStatusVector::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SparseBasisStatusVector::values_size() const {
  return _internal_values_size();
}
inline void SparseBasisStatusVector::clear_values() {
  _impl_.values_.Clear();
}
inline ::operations_research::math_opt::BasisStatusProto SparseBasisStatusVector::_internal_values(int index) const {
  return static_cast< ::operations_research::math_opt::BasisStatusProto >(_impl_.values_.Get(index));
}
inline ::operations_research::math_opt::BasisStatusProto SparseBasisStatusVector::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseBasisStatusVector.values)
  return _internal_values(index);
}
inline void SparseBasisStatusVector::set_values(int index, ::operations_research::math_opt::BasisStatusProto value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseBasisStatusVector.values)
}
inline void SparseBasisStatusVector::_internal_add_values(::operations_research::math_opt::BasisStatusProto value) {
  _impl_.values_.Add(value);
}
inline void SparseBasisStatusVector::add_values(::operations_research::math_opt::BasisStatusProto value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseBasisStatusVector.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SparseBasisStatusVector::values() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseBasisStatusVector.values)
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SparseBasisStatusVector::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SparseBasisStatusVector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseBasisStatusVector.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// BasisProto

// .operations_research.math_opt.SparseBasisStatusVector constraint_status = 1;
inline bool BasisProto::_internal_has_constraint_status() const {
  return this != internal_default_instance() && _impl_.constraint_status_ != nullptr;
}
inline bool BasisProto::has_constraint_status() const {
  return _internal_has_constraint_status();
}
inline void BasisProto::clear_constraint_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.constraint_status_ != nullptr) {
    delete _impl_.constraint_status_;
  }
  _impl_.constraint_status_ = nullptr;
}
inline const ::operations_research::math_opt::SparseBasisStatusVector& BasisProto::_internal_constraint_status() const {
  const ::operations_research::math_opt::SparseBasisStatusVector* p = _impl_.constraint_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseBasisStatusVector&>(
      ::operations_research::math_opt::_SparseBasisStatusVector_default_instance_);
}
inline const ::operations_research::math_opt::SparseBasisStatusVector& BasisProto::constraint_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.BasisProto.constraint_status)
  return _internal_constraint_status();
}
inline void BasisProto::unsafe_arena_set_allocated_constraint_status(
    ::operations_research::math_opt::SparseBasisStatusVector* constraint_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constraint_status_);
  }
  _impl_.constraint_status_ = constraint_status;
  if (constraint_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.BasisProto.constraint_status)
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::release_constraint_status() {
  
  ::operations_research::math_opt::SparseBasisStatusVector* temp = _impl_.constraint_status_;
  _impl_.constraint_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::unsafe_arena_release_constraint_status() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.BasisProto.constraint_status)
  
  ::operations_research::math_opt::SparseBasisStatusVector* temp = _impl_.constraint_status_;
  _impl_.constraint_status_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::_internal_mutable_constraint_status() {
  
  if (_impl_.constraint_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseBasisStatusVector>(GetArenaForAllocation());
    _impl_.constraint_status_ = p;
  }
  return _impl_.constraint_status_;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::mutable_constraint_status() {
  ::operations_research::math_opt::SparseBasisStatusVector* _msg = _internal_mutable_constraint_status();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.BasisProto.constraint_status)
  return _msg;
}
inline void BasisProto::set_allocated_constraint_status(::operations_research::math_opt::SparseBasisStatusVector* constraint_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.constraint_status_;
  }
  if (constraint_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constraint_status);
    if (message_arena != submessage_arena) {
      constraint_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.constraint_status_ = constraint_status;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.BasisProto.constraint_status)
}

// .operations_research.math_opt.SparseBasisStatusVector variable_status = 2;
inline bool BasisProto::_internal_has_variable_status() const {
  return this != internal_default_instance() && _impl_.variable_status_ != nullptr;
}
inline bool BasisProto::has_variable_status() const {
  return _internal_has_variable_status();
}
inline void BasisProto::clear_variable_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.variable_status_ != nullptr) {
    delete _impl_.variable_status_;
  }
  _impl_.variable_status_ = nullptr;
}
inline const ::operations_research::math_opt::SparseBasisStatusVector& BasisProto::_internal_variable_status() const {
  const ::operations_research::math_opt::SparseBasisStatusVector* p = _impl_.variable_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SparseBasisStatusVector&>(
      ::operations_research::math_opt::_SparseBasisStatusVector_default_instance_);
}
inline const ::operations_research::math_opt::SparseBasisStatusVector& BasisProto::variable_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.BasisProto.variable_status)
  return _internal_variable_status();
}
inline void BasisProto::unsafe_arena_set_allocated_variable_status(
    ::operations_research::math_opt::SparseBasisStatusVector* variable_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variable_status_);
  }
  _impl_.variable_status_ = variable_status;
  if (variable_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.BasisProto.variable_status)
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::release_variable_status() {
  
  ::operations_research::math_opt::SparseBasisStatusVector* temp = _impl_.variable_status_;
  _impl_.variable_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::unsafe_arena_release_variable_status() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.BasisProto.variable_status)
  
  ::operations_research::math_opt::SparseBasisStatusVector* temp = _impl_.variable_status_;
  _impl_.variable_status_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::_internal_mutable_variable_status() {
  
  if (_impl_.variable_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SparseBasisStatusVector>(GetArenaForAllocation());
    _impl_.variable_status_ = p;
  }
  return _impl_.variable_status_;
}
inline ::operations_research::math_opt::SparseBasisStatusVector* BasisProto::mutable_variable_status() {
  ::operations_research::math_opt::SparseBasisStatusVector* _msg = _internal_mutable_variable_status();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.BasisProto.variable_status)
  return _msg;
}
inline void BasisProto::set_allocated_variable_status(::operations_research::math_opt::SparseBasisStatusVector* variable_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.variable_status_;
  }
  if (variable_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(variable_status);
    if (message_arena != submessage_arena) {
      variable_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.variable_status_ = variable_status;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.BasisProto.variable_status)
}

// .operations_research.math_opt.SolutionStatusProto basic_dual_feasibility = 3;
inline void BasisProto::clear_basic_dual_feasibility() {
  _impl_.basic_dual_feasibility_ = 0;
}
inline ::operations_research::math_opt::SolutionStatusProto BasisProto::_internal_basic_dual_feasibility() const {
  return static_cast< ::operations_research::math_opt::SolutionStatusProto >(_impl_.basic_dual_feasibility_);
}
inline ::operations_research::math_opt::SolutionStatusProto BasisProto::basic_dual_feasibility() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.BasisProto.basic_dual_feasibility)
  return _internal_basic_dual_feasibility();
}
inline void BasisProto::_internal_set_basic_dual_feasibility(::operations_research::math_opt::SolutionStatusProto value) {
  
  _impl_.basic_dual_feasibility_ = value;
}
inline void BasisProto::set_basic_dual_feasibility(::operations_research::math_opt::SolutionStatusProto value) {
  _internal_set_basic_dual_feasibility(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.BasisProto.basic_dual_feasibility)
}

// -------------------------------------------------------------------

// SolutionProto

// optional .operations_research.math_opt.PrimalSolutionProto primal_solution = 1;
inline bool SolutionProto::_internal_has_primal_solution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.primal_solution_ != nullptr);
  return value;
}
inline bool SolutionProto::has_primal_solution() const {
  return _internal_has_primal_solution();
}
inline void SolutionProto::clear_primal_solution() {
  if (_impl_.primal_solution_ != nullptr) _impl_.primal_solution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::math_opt::PrimalSolutionProto& SolutionProto::_internal_primal_solution() const {
  const ::operations_research::math_opt::PrimalSolutionProto* p = _impl_.primal_solution_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::PrimalSolutionProto&>(
      ::operations_research::math_opt::_PrimalSolutionProto_default_instance_);
}
inline const ::operations_research::math_opt::PrimalSolutionProto& SolutionProto::primal_solution() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolutionProto.primal_solution)
  return _internal_primal_solution();
}
inline void SolutionProto::unsafe_arena_set_allocated_primal_solution(
    ::operations_research::math_opt::PrimalSolutionProto* primal_solution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primal_solution_);
  }
  _impl_.primal_solution_ = primal_solution;
  if (primal_solution) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolutionProto.primal_solution)
}
inline ::operations_research::math_opt::PrimalSolutionProto* SolutionProto::release_primal_solution() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::math_opt::PrimalSolutionProto* temp = _impl_.primal_solution_;
  _impl_.primal_solution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::PrimalSolutionProto* SolutionProto::unsafe_arena_release_primal_solution() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolutionProto.primal_solution)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::math_opt::PrimalSolutionProto* temp = _impl_.primal_solution_;
  _impl_.primal_solution_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::PrimalSolutionProto* SolutionProto::_internal_mutable_primal_solution() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.primal_solution_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::PrimalSolutionProto>(GetArenaForAllocation());
    _impl_.primal_solution_ = p;
  }
  return _impl_.primal_solution_;
}
inline ::operations_research::math_opt::PrimalSolutionProto* SolutionProto::mutable_primal_solution() {
  ::operations_research::math_opt::PrimalSolutionProto* _msg = _internal_mutable_primal_solution();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolutionProto.primal_solution)
  return _msg;
}
inline void SolutionProto::set_allocated_primal_solution(::operations_research::math_opt::PrimalSolutionProto* primal_solution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.primal_solution_;
  }
  if (primal_solution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primal_solution);
    if (message_arena != submessage_arena) {
      primal_solution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primal_solution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.primal_solution_ = primal_solution;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolutionProto.primal_solution)
}

// optional .operations_research.math_opt.DualSolutionProto dual_solution = 2;
inline bool SolutionProto::_internal_has_dual_solution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dual_solution_ != nullptr);
  return value;
}
inline bool SolutionProto::has_dual_solution() const {
  return _internal_has_dual_solution();
}
inline void SolutionProto::clear_dual_solution() {
  if (_impl_.dual_solution_ != nullptr) _impl_.dual_solution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::math_opt::DualSolutionProto& SolutionProto::_internal_dual_solution() const {
  const ::operations_research::math_opt::DualSolutionProto* p = _impl_.dual_solution_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::DualSolutionProto&>(
      ::operations_research::math_opt::_DualSolutionProto_default_instance_);
}
inline const ::operations_research::math_opt::DualSolutionProto& SolutionProto::dual_solution() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolutionProto.dual_solution)
  return _internal_dual_solution();
}
inline void SolutionProto::unsafe_arena_set_allocated_dual_solution(
    ::operations_research::math_opt::DualSolutionProto* dual_solution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dual_solution_);
  }
  _impl_.dual_solution_ = dual_solution;
  if (dual_solution) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolutionProto.dual_solution)
}
inline ::operations_research::math_opt::DualSolutionProto* SolutionProto::release_dual_solution() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::math_opt::DualSolutionProto* temp = _impl_.dual_solution_;
  _impl_.dual_solution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::DualSolutionProto* SolutionProto::unsafe_arena_release_dual_solution() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolutionProto.dual_solution)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::math_opt::DualSolutionProto* temp = _impl_.dual_solution_;
  _impl_.dual_solution_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::DualSolutionProto* SolutionProto::_internal_mutable_dual_solution() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dual_solution_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::DualSolutionProto>(GetArenaForAllocation());
    _impl_.dual_solution_ = p;
  }
  return _impl_.dual_solution_;
}
inline ::operations_research::math_opt::DualSolutionProto* SolutionProto::mutable_dual_solution() {
  ::operations_research::math_opt::DualSolutionProto* _msg = _internal_mutable_dual_solution();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolutionProto.dual_solution)
  return _msg;
}
inline void SolutionProto::set_allocated_dual_solution(::operations_research::math_opt::DualSolutionProto* dual_solution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dual_solution_;
  }
  if (dual_solution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dual_solution);
    if (message_arena != submessage_arena) {
      dual_solution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dual_solution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dual_solution_ = dual_solution;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolutionProto.dual_solution)
}

// optional .operations_research.math_opt.BasisProto basis = 3;
inline bool SolutionProto::_internal_has_basis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basis_ != nullptr);
  return value;
}
inline bool SolutionProto::has_basis() const {
  return _internal_has_basis();
}
inline void SolutionProto::clear_basis() {
  if (_impl_.basis_ != nullptr) _impl_.basis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::math_opt::BasisProto& SolutionProto::_internal_basis() const {
  const ::operations_research::math_opt::BasisProto* p = _impl_.basis_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::BasisProto&>(
      ::operations_research::math_opt::_BasisProto_default_instance_);
}
inline const ::operations_research::math_opt::BasisProto& SolutionProto::basis() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolutionProto.basis)
  return _internal_basis();
}
inline void SolutionProto::unsafe_arena_set_allocated_basis(
    ::operations_research::math_opt::BasisProto* basis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basis_);
  }
  _impl_.basis_ = basis;
  if (basis) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolutionProto.basis)
}
inline ::operations_research::math_opt::BasisProto* SolutionProto::release_basis() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::math_opt::BasisProto* temp = _impl_.basis_;
  _impl_.basis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::BasisProto* SolutionProto::unsafe_arena_release_basis() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolutionProto.basis)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::math_opt::BasisProto* temp = _impl_.basis_;
  _impl_.basis_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::BasisProto* SolutionProto::_internal_mutable_basis() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.basis_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::BasisProto>(GetArenaForAllocation());
    _impl_.basis_ = p;
  }
  return _impl_.basis_;
}
inline ::operations_research::math_opt::BasisProto* SolutionProto::mutable_basis() {
  ::operations_research::math_opt::BasisProto* _msg = _internal_mutable_basis();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolutionProto.basis)
  return _msg;
}
inline void SolutionProto::set_allocated_basis(::operations_research::math_opt::BasisProto* basis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basis_;
  }
  if (basis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basis);
    if (message_arena != submessage_arena) {
      basis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basis, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.basis_ = basis;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolutionProto.basis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace math_opt
}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::math_opt::SolutionStatusProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::SolutionStatusProto>() {
  return ::operations_research::math_opt::SolutionStatusProto_descriptor();
}
template <> struct is_proto_enum< ::operations_research::math_opt::BasisStatusProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::BasisStatusProto>() {
  return ::operations_research::math_opt::BasisStatusProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsolution_2eproto
