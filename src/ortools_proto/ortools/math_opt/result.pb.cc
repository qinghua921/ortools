// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/result.proto

#include "ortools/math_opt/result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace math_opt {
PROTOBUF_CONSTEXPR ProblemStatusProto::ProblemStatusProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primal_status_)*/0
  , /*decltype(_impl_.dual_status_)*/0
  , /*decltype(_impl_.primal_or_dual_infeasible_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProblemStatusProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProblemStatusProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProblemStatusProtoDefaultTypeInternal() {}
  union {
    ProblemStatusProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProblemStatusProtoDefaultTypeInternal _ProblemStatusProto_default_instance_;
PROTOBUF_CONSTEXPR SolveStatsProto::SolveStatsProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.solve_time_)*/nullptr
  , /*decltype(_impl_.problem_status_)*/nullptr
  , /*decltype(_impl_.best_primal_bound_)*/0
  , /*decltype(_impl_.best_dual_bound_)*/0
  , /*decltype(_impl_.simplex_iterations_)*/int64_t{0}
  , /*decltype(_impl_.barrier_iterations_)*/int64_t{0}
  , /*decltype(_impl_.node_count_)*/int64_t{0}
  , /*decltype(_impl_.first_order_iterations_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SolveStatsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolveStatsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolveStatsProtoDefaultTypeInternal() {}
  union {
    SolveStatsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolveStatsProtoDefaultTypeInternal _SolveStatsProto_default_instance_;
PROTOBUF_CONSTEXPR TerminationProto::TerminationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminationProtoDefaultTypeInternal() {}
  union {
    TerminationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminationProtoDefaultTypeInternal _TerminationProto_default_instance_;
PROTOBUF_CONSTEXPR SolveResultProto::SolveResultProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.solutions_)*/{}
  , /*decltype(_impl_.primal_rays_)*/{}
  , /*decltype(_impl_.dual_rays_)*/{}
  , /*decltype(_impl_.termination_)*/nullptr
  , /*decltype(_impl_.solve_stats_)*/nullptr
  , /*decltype(_impl_.solver_specific_output_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SolveResultProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolveResultProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolveResultProtoDefaultTypeInternal() {}
  union {
    SolveResultProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolveResultProtoDefaultTypeInternal _SolveResultProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fmath_5fopt_2fresult_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fmath_5fopt_2fresult_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fmath_5fopt_2fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::ProblemStatusProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::ProblemStatusProto, _impl_.primal_status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::ProblemStatusProto, _impl_.dual_status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::ProblemStatusProto, _impl_.primal_or_dual_infeasible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.solve_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.best_primal_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.best_dual_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.problem_status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.simplex_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.barrier_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.first_order_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveStatsProto, _impl_.node_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::TerminationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::TerminationProto, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::TerminationProto, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::TerminationProto, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.termination_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.solutions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.primal_rays_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.dual_rays_),
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.solve_stats_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::math_opt::SolveResultProto, _impl_.solver_specific_output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::math_opt::ProblemStatusProto)},
  { 9, -1, -1, sizeof(::operations_research::math_opt::SolveStatsProto)},
  { 23, -1, -1, sizeof(::operations_research::math_opt::TerminationProto)},
  { 32, -1, -1, sizeof(::operations_research::math_opt::SolveResultProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::math_opt::_ProblemStatusProto_default_instance_._instance,
  &::operations_research::math_opt::_SolveStatsProto_default_instance_._instance,
  &::operations_research::math_opt::_TerminationProto_default_instance_._instance,
  &::operations_research::math_opt::_SolveResultProto_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fmath_5fopt_2fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035ortools/math_opt/result.proto\022\034operati"
  "ons_research.math_opt\032\036google/protobuf/d"
  "uration.proto\032\031ortools/gscip/gscip.proto"
  "\032\037ortools/math_opt/solution.proto\"\317\001\n\022Pr"
  "oblemStatusProto\022K\n\rprimal_status\030\001 \001(\0162"
  "4.operations_research.math_opt.Feasibili"
  "tyStatusProto\022I\n\013dual_status\030\002 \001(\01624.ope"
  "rations_research.math_opt.FeasibilitySta"
  "tusProto\022!\n\031primal_or_dual_infeasible\030\003 "
  "\001(\010\"\252\002\n\017SolveStatsProto\022-\n\nsolve_time\030\001 "
  "\001(\0132\031.google.protobuf.Duration\022\031\n\021best_p"
  "rimal_bound\030\002 \001(\001\022\027\n\017best_dual_bound\030\003 \001"
  "(\001\022H\n\016problem_status\030\004 \001(\01320.operations_"
  "research.math_opt.ProblemStatusProto\022\032\n\022"
  "simplex_iterations\030\005 \001(\003\022\032\n\022barrier_iter"
  "ations\030\006 \001(\003\022\036\n\026first_order_iterations\030\010"
  " \001(\003\022\022\n\nnode_count\030\007 \001(\003\"\241\001\n\020Termination"
  "Proto\022D\n\006reason\030\001 \001(\01624.operations_resea"
  "rch.math_opt.TerminationReasonProto\0227\n\005l"
  "imit\030\002 \001(\0162(.operations_research.math_op"
  "t.LimitProto\022\016\n\006detail\030\003 \001(\t\"\267\003\n\020SolveRe"
  "sultProto\022C\n\013termination\030\002 \001(\0132..operati"
  "ons_research.math_opt.TerminationProto\022>"
  "\n\tsolutions\030\003 \003(\0132+.operations_research."
  "math_opt.SolutionProto\022A\n\013primal_rays\030\004 "
  "\003(\0132,.operations_research.math_opt.Prima"
  "lRayProto\022=\n\tdual_rays\030\005 \003(\0132*.operation"
  "s_research.math_opt.DualRayProto\022B\n\013solv"
  "e_stats\030\006 \001(\0132-.operations_research.math"
  "_opt.SolveStatsProto\0228\n\014gscip_output\030\007 \001"
  "(\0132 .operations_research.GScipOutputH\000B\030"
  "\n\026solver_specific_outputJ\004\010\001\020\002*\245\001\n\026Feasi"
  "bilityStatusProto\022\"\n\036FEASIBILITY_STATUS_"
  "UNSPECIFIED\020\000\022#\n\037FEASIBILITY_STATUS_UNDE"
  "TERMINED\020\001\022\037\n\033FEASIBILITY_STATUS_FEASIBL"
  "E\020\002\022!\n\035FEASIBILITY_STATUS_INFEASIBLE\020\003*\212"
  "\003\n\026TerminationReasonProto\022\"\n\036TERMINATION"
  "_REASON_UNSPECIFIED\020\000\022\036\n\032TERMINATION_REA"
  "SON_OPTIMAL\020\001\022!\n\035TERMINATION_REASON_INFE"
  "ASIBLE\020\002\022 \n\034TERMINATION_REASON_UNBOUNDED"
  "\020\003\022.\n*TERMINATION_REASON_INFEASIBLE_OR_U"
  "NBOUNDED\020\004\022 \n\034TERMINATION_REASON_IMPRECI"
  "SE\020\005\022\037\n\033TERMINATION_REASON_FEASIBLE\020\t\022(\n"
  "$TERMINATION_REASON_NO_SOLUTION_FOUND\020\006\022"
  "&\n\"TERMINATION_REASON_NUMERICAL_ERROR\020\007\022"
  "\"\n\036TERMINATION_REASON_OTHER_ERROR\020\010*\216\002\n\n"
  "LimitProto\022\025\n\021LIMIT_UNSPECIFIED\020\000\022\026\n\022LIM"
  "IT_UNDETERMINED\020\001\022\023\n\017LIMIT_ITERATION\020\002\022\016"
  "\n\nLIMIT_TIME\020\003\022\016\n\nLIMIT_NODE\020\004\022\022\n\016LIMIT_"
  "SOLUTION\020\005\022\020\n\014LIMIT_MEMORY\020\006\022\020\n\014LIMIT_CU"
  "TOFF\020\014\022\023\n\017LIMIT_OBJECTIVE\020\007\022\016\n\nLIMIT_NOR"
  "M\020\010\022\025\n\021LIMIT_INTERRUPTED\020\t\022\027\n\023LIMIT_SLOW"
  "_PROGRESS\020\n\022\017\n\013LIMIT_OTHER\020\013B\036\n\032com.goog"
  "le.ortools.mathoptP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ortools_2fgscip_2fgscip_2eproto,
  &::descriptor_table_ortools_2fmath_5fopt_2fsolution_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto = {
    false, false, 2148, descriptor_table_protodef_ortools_2fmath_5fopt_2fresult_2eproto,
    "ortools/math_opt/result.proto",
    &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once, descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_ortools_2fmath_5fopt_2fresult_2eproto::offsets,
    file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto, file_level_enum_descriptors_ortools_2fmath_5fopt_2fresult_2eproto,
    file_level_service_descriptors_ortools_2fmath_5fopt_2fresult_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_getter() {
  return &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fmath_5fopt_2fresult_2eproto(&descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto);
namespace operations_research {
namespace math_opt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeasibilityStatusProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fresult_2eproto[0];
}
bool FeasibilityStatusProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminationReasonProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fresult_2eproto[1];
}
bool TerminationReasonProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LimitProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto);
  return file_level_enum_descriptors_ortools_2fmath_5fopt_2fresult_2eproto[2];
}
bool LimitProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProblemStatusProto::_Internal {
 public:
};

ProblemStatusProto::ProblemStatusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.ProblemStatusProto)
}
ProblemStatusProto::ProblemStatusProto(const ProblemStatusProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProblemStatusProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primal_status_){}
    , decltype(_impl_.dual_status_){}
    , decltype(_impl_.primal_or_dual_infeasible_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primal_status_, &from._impl_.primal_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primal_or_dual_infeasible_) -
    reinterpret_cast<char*>(&_impl_.primal_status_)) + sizeof(_impl_.primal_or_dual_infeasible_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.ProblemStatusProto)
}

inline void ProblemStatusProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primal_status_){0}
    , decltype(_impl_.dual_status_){0}
    , decltype(_impl_.primal_or_dual_infeasible_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProblemStatusProto::~ProblemStatusProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.ProblemStatusProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProblemStatusProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProblemStatusProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProblemStatusProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.ProblemStatusProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.primal_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.primal_or_dual_infeasible_) -
      reinterpret_cast<char*>(&_impl_.primal_status_)) + sizeof(_impl_.primal_or_dual_infeasible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProblemStatusProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.FeasibilityStatusProto primal_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primal_status(static_cast<::operations_research::math_opt::FeasibilityStatusProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.FeasibilityStatusProto dual_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dual_status(static_cast<::operations_research::math_opt::FeasibilityStatusProto>(val));
        } else
          goto handle_unusual;
        continue;
      // bool primal_or_dual_infeasible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.primal_or_dual_infeasible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProblemStatusProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.ProblemStatusProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.FeasibilityStatusProto primal_status = 1;
  if (this->_internal_primal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_primal_status(), target);
  }

  // .operations_research.math_opt.FeasibilityStatusProto dual_status = 2;
  if (this->_internal_dual_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dual_status(), target);
  }

  // bool primal_or_dual_infeasible = 3;
  if (this->_internal_primal_or_dual_infeasible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_primal_or_dual_infeasible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.ProblemStatusProto)
  return target;
}

size_t ProblemStatusProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.ProblemStatusProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.math_opt.FeasibilityStatusProto primal_status = 1;
  if (this->_internal_primal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_primal_status());
  }

  // .operations_research.math_opt.FeasibilityStatusProto dual_status = 2;
  if (this->_internal_dual_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dual_status());
  }

  // bool primal_or_dual_infeasible = 3;
  if (this->_internal_primal_or_dual_infeasible() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProblemStatusProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProblemStatusProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProblemStatusProto::GetClassData() const { return &_class_data_; }


void ProblemStatusProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProblemStatusProto*>(&to_msg);
  auto& from = static_cast<const ProblemStatusProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.ProblemStatusProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_primal_status() != 0) {
    _this->_internal_set_primal_status(from._internal_primal_status());
  }
  if (from._internal_dual_status() != 0) {
    _this->_internal_set_dual_status(from._internal_dual_status());
  }
  if (from._internal_primal_or_dual_infeasible() != 0) {
    _this->_internal_set_primal_or_dual_infeasible(from._internal_primal_or_dual_infeasible());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProblemStatusProto::CopyFrom(const ProblemStatusProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.ProblemStatusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProblemStatusProto::IsInitialized() const {
  return true;
}

void ProblemStatusProto::InternalSwap(ProblemStatusProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProblemStatusProto, _impl_.primal_or_dual_infeasible_)
      + sizeof(ProblemStatusProto::_impl_.primal_or_dual_infeasible_)
      - PROTOBUF_FIELD_OFFSET(ProblemStatusProto, _impl_.primal_status_)>(
          reinterpret_cast<char*>(&_impl_.primal_status_),
          reinterpret_cast<char*>(&other->_impl_.primal_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProblemStatusProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto[0]);
}

// ===================================================================

class SolveStatsProto::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& solve_time(const SolveStatsProto* msg);
  static const ::operations_research::math_opt::ProblemStatusProto& problem_status(const SolveStatsProto* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SolveStatsProto::_Internal::solve_time(const SolveStatsProto* msg) {
  return *msg->_impl_.solve_time_;
}
const ::operations_research::math_opt::ProblemStatusProto&
SolveStatsProto::_Internal::problem_status(const SolveStatsProto* msg) {
  return *msg->_impl_.problem_status_;
}
void SolveStatsProto::clear_solve_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.solve_time_ != nullptr) {
    delete _impl_.solve_time_;
  }
  _impl_.solve_time_ = nullptr;
}
SolveStatsProto::SolveStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SolveStatsProto)
}
SolveStatsProto::SolveStatsProto(const SolveStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SolveStatsProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.solve_time_){nullptr}
    , decltype(_impl_.problem_status_){nullptr}
    , decltype(_impl_.best_primal_bound_){}
    , decltype(_impl_.best_dual_bound_){}
    , decltype(_impl_.simplex_iterations_){}
    , decltype(_impl_.barrier_iterations_){}
    , decltype(_impl_.node_count_){}
    , decltype(_impl_.first_order_iterations_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solve_time()) {
    _this->_impl_.solve_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.solve_time_);
  }
  if (from._internal_has_problem_status()) {
    _this->_impl_.problem_status_ = new ::operations_research::math_opt::ProblemStatusProto(*from._impl_.problem_status_);
  }
  ::memcpy(&_impl_.best_primal_bound_, &from._impl_.best_primal_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.first_order_iterations_) -
    reinterpret_cast<char*>(&_impl_.best_primal_bound_)) + sizeof(_impl_.first_order_iterations_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SolveStatsProto)
}

inline void SolveStatsProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.solve_time_){nullptr}
    , decltype(_impl_.problem_status_){nullptr}
    , decltype(_impl_.best_primal_bound_){0}
    , decltype(_impl_.best_dual_bound_){0}
    , decltype(_impl_.simplex_iterations_){int64_t{0}}
    , decltype(_impl_.barrier_iterations_){int64_t{0}}
    , decltype(_impl_.node_count_){int64_t{0}}
    , decltype(_impl_.first_order_iterations_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SolveStatsProto::~SolveStatsProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SolveStatsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SolveStatsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.solve_time_;
  if (this != internal_default_instance()) delete _impl_.problem_status_;
}

void SolveStatsProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SolveStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SolveStatsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.solve_time_ != nullptr) {
    delete _impl_.solve_time_;
  }
  _impl_.solve_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.problem_status_ != nullptr) {
    delete _impl_.problem_status_;
  }
  _impl_.problem_status_ = nullptr;
  ::memset(&_impl_.best_primal_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.first_order_iterations_) -
      reinterpret_cast<char*>(&_impl_.best_primal_bound_)) + sizeof(_impl_.first_order_iterations_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolveStatsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration solve_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solve_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double best_primal_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.best_primal_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double best_dual_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.best_dual_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.ProblemStatusProto problem_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_problem_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 simplex_iterations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.simplex_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 barrier_iterations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.barrier_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 node_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.node_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 first_order_iterations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.first_order_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolveStatsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SolveStatsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration solve_time = 1;
  if (this->_internal_has_solve_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::solve_time(this),
        _Internal::solve_time(this).GetCachedSize(), target, stream);
  }

  // double best_primal_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_primal_bound = this->_internal_best_primal_bound();
  uint64_t raw_best_primal_bound;
  memcpy(&raw_best_primal_bound, &tmp_best_primal_bound, sizeof(tmp_best_primal_bound));
  if (raw_best_primal_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_best_primal_bound(), target);
  }

  // double best_dual_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_dual_bound = this->_internal_best_dual_bound();
  uint64_t raw_best_dual_bound;
  memcpy(&raw_best_dual_bound, &tmp_best_dual_bound, sizeof(tmp_best_dual_bound));
  if (raw_best_dual_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_best_dual_bound(), target);
  }

  // .operations_research.math_opt.ProblemStatusProto problem_status = 4;
  if (this->_internal_has_problem_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::problem_status(this),
        _Internal::problem_status(this).GetCachedSize(), target, stream);
  }

  // int64 simplex_iterations = 5;
  if (this->_internal_simplex_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_simplex_iterations(), target);
  }

  // int64 barrier_iterations = 6;
  if (this->_internal_barrier_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_barrier_iterations(), target);
  }

  // int64 node_count = 7;
  if (this->_internal_node_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_node_count(), target);
  }

  // int64 first_order_iterations = 8;
  if (this->_internal_first_order_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_first_order_iterations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SolveStatsProto)
  return target;
}

size_t SolveStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SolveStatsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration solve_time = 1;
  if (this->_internal_has_solve_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.solve_time_);
  }

  // .operations_research.math_opt.ProblemStatusProto problem_status = 4;
  if (this->_internal_has_problem_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.problem_status_);
  }

  // double best_primal_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_primal_bound = this->_internal_best_primal_bound();
  uint64_t raw_best_primal_bound;
  memcpy(&raw_best_primal_bound, &tmp_best_primal_bound, sizeof(tmp_best_primal_bound));
  if (raw_best_primal_bound != 0) {
    total_size += 1 + 8;
  }

  // double best_dual_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_dual_bound = this->_internal_best_dual_bound();
  uint64_t raw_best_dual_bound;
  memcpy(&raw_best_dual_bound, &tmp_best_dual_bound, sizeof(tmp_best_dual_bound));
  if (raw_best_dual_bound != 0) {
    total_size += 1 + 8;
  }

  // int64 simplex_iterations = 5;
  if (this->_internal_simplex_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_simplex_iterations());
  }

  // int64 barrier_iterations = 6;
  if (this->_internal_barrier_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_barrier_iterations());
  }

  // int64 node_count = 7;
  if (this->_internal_node_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_node_count());
  }

  // int64 first_order_iterations = 8;
  if (this->_internal_first_order_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_order_iterations());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolveStatsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SolveStatsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolveStatsProto::GetClassData() const { return &_class_data_; }


void SolveStatsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SolveStatsProto*>(&to_msg);
  auto& from = static_cast<const SolveStatsProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SolveStatsProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_solve_time()) {
    _this->_internal_mutable_solve_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_solve_time());
  }
  if (from._internal_has_problem_status()) {
    _this->_internal_mutable_problem_status()->::operations_research::math_opt::ProblemStatusProto::MergeFrom(
        from._internal_problem_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_primal_bound = from._internal_best_primal_bound();
  uint64_t raw_best_primal_bound;
  memcpy(&raw_best_primal_bound, &tmp_best_primal_bound, sizeof(tmp_best_primal_bound));
  if (raw_best_primal_bound != 0) {
    _this->_internal_set_best_primal_bound(from._internal_best_primal_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_dual_bound = from._internal_best_dual_bound();
  uint64_t raw_best_dual_bound;
  memcpy(&raw_best_dual_bound, &tmp_best_dual_bound, sizeof(tmp_best_dual_bound));
  if (raw_best_dual_bound != 0) {
    _this->_internal_set_best_dual_bound(from._internal_best_dual_bound());
  }
  if (from._internal_simplex_iterations() != 0) {
    _this->_internal_set_simplex_iterations(from._internal_simplex_iterations());
  }
  if (from._internal_barrier_iterations() != 0) {
    _this->_internal_set_barrier_iterations(from._internal_barrier_iterations());
  }
  if (from._internal_node_count() != 0) {
    _this->_internal_set_node_count(from._internal_node_count());
  }
  if (from._internal_first_order_iterations() != 0) {
    _this->_internal_set_first_order_iterations(from._internal_first_order_iterations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolveStatsProto::CopyFrom(const SolveStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SolveStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolveStatsProto::IsInitialized() const {
  return true;
}

void SolveStatsProto::InternalSwap(SolveStatsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveStatsProto, _impl_.first_order_iterations_)
      + sizeof(SolveStatsProto::_impl_.first_order_iterations_)
      - PROTOBUF_FIELD_OFFSET(SolveStatsProto, _impl_.solve_time_)>(
          reinterpret_cast<char*>(&_impl_.solve_time_),
          reinterpret_cast<char*>(&other->_impl_.solve_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolveStatsProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto[1]);
}

// ===================================================================

class TerminationProto::_Internal {
 public:
};

TerminationProto::TerminationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.TerminationProto)
}
TerminationProto::TerminationProto(const TerminationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.reason_, &from._impl_.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.TerminationProto)
}

inline void TerminationProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TerminationProto::~TerminationProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.TerminationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detail_.Destroy();
}

void TerminationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.TerminationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detail_.ClearToEmpty();
  ::memset(&_impl_.reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.TerminationReasonProto reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::operations_research::math_opt::TerminationReasonProto>(val));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.LimitProto limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_limit(static_cast<::operations_research::math_opt::LimitProto>(val));
        } else
          goto handle_unusual;
        continue;
      // string detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.math_opt.TerminationProto.detail"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.TerminationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.TerminationReasonProto reason = 1;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // .operations_research.math_opt.LimitProto limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_limit(), target);
  }

  // string detail = 3;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.math_opt.TerminationProto.detail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.TerminationProto)
  return target;
}

size_t TerminationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.TerminationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 3;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .operations_research.math_opt.TerminationReasonProto reason = 1;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // .operations_research.math_opt.LimitProto limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminationProto::GetClassData() const { return &_class_data_; }


void TerminationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminationProto*>(&to_msg);
  auto& from = static_cast<const TerminationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.TerminationProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminationProto::CopyFrom(const TerminationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.TerminationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationProto::IsInitialized() const {
  return true;
}

void TerminationProto::InternalSwap(TerminationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerminationProto, _impl_.limit_)
      + sizeof(TerminationProto::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(TerminationProto, _impl_.reason_)>(
          reinterpret_cast<char*>(&_impl_.reason_),
          reinterpret_cast<char*>(&other->_impl_.reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto[2]);
}

// ===================================================================

class SolveResultProto::_Internal {
 public:
  static const ::operations_research::math_opt::TerminationProto& termination(const SolveResultProto* msg);
  static const ::operations_research::math_opt::SolveStatsProto& solve_stats(const SolveResultProto* msg);
  static const ::operations_research::GScipOutput& gscip_output(const SolveResultProto* msg);
};

const ::operations_research::math_opt::TerminationProto&
SolveResultProto::_Internal::termination(const SolveResultProto* msg) {
  return *msg->_impl_.termination_;
}
const ::operations_research::math_opt::SolveStatsProto&
SolveResultProto::_Internal::solve_stats(const SolveResultProto* msg) {
  return *msg->_impl_.solve_stats_;
}
const ::operations_research::GScipOutput&
SolveResultProto::_Internal::gscip_output(const SolveResultProto* msg) {
  return *msg->_impl_.solver_specific_output_.gscip_output_;
}
void SolveResultProto::clear_solutions() {
  _impl_.solutions_.Clear();
}
void SolveResultProto::clear_primal_rays() {
  _impl_.primal_rays_.Clear();
}
void SolveResultProto::clear_dual_rays() {
  _impl_.dual_rays_.Clear();
}
void SolveResultProto::set_allocated_gscip_output(::operations_research::GScipOutput* gscip_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_solver_specific_output();
  if (gscip_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gscip_output));
    if (message_arena != submessage_arena) {
      gscip_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gscip_output, submessage_arena);
    }
    set_has_gscip_output();
    _impl_.solver_specific_output_.gscip_output_ = gscip_output;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveResultProto.gscip_output)
}
void SolveResultProto::clear_gscip_output() {
  if (_internal_has_gscip_output()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.solver_specific_output_.gscip_output_;
    }
    clear_has_solver_specific_output();
  }
}
SolveResultProto::SolveResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.math_opt.SolveResultProto)
}
SolveResultProto::SolveResultProto(const SolveResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SolveResultProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.solutions_){from._impl_.solutions_}
    , decltype(_impl_.primal_rays_){from._impl_.primal_rays_}
    , decltype(_impl_.dual_rays_){from._impl_.dual_rays_}
    , decltype(_impl_.termination_){nullptr}
    , decltype(_impl_.solve_stats_){nullptr}
    , decltype(_impl_.solver_specific_output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_termination()) {
    _this->_impl_.termination_ = new ::operations_research::math_opt::TerminationProto(*from._impl_.termination_);
  }
  if (from._internal_has_solve_stats()) {
    _this->_impl_.solve_stats_ = new ::operations_research::math_opt::SolveStatsProto(*from._impl_.solve_stats_);
  }
  clear_has_solver_specific_output();
  switch (from.solver_specific_output_case()) {
    case kGscipOutput: {
      _this->_internal_mutable_gscip_output()->::operations_research::GScipOutput::MergeFrom(
          from._internal_gscip_output());
      break;
    }
    case SOLVER_SPECIFIC_OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.math_opt.SolveResultProto)
}

inline void SolveResultProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.solutions_){arena}
    , decltype(_impl_.primal_rays_){arena}
    , decltype(_impl_.dual_rays_){arena}
    , decltype(_impl_.termination_){nullptr}
    , decltype(_impl_.solve_stats_){nullptr}
    , decltype(_impl_.solver_specific_output_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_solver_specific_output();
}

SolveResultProto::~SolveResultProto() {
  // @@protoc_insertion_point(destructor:operations_research.math_opt.SolveResultProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SolveResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.solutions_.~RepeatedPtrField();
  _impl_.primal_rays_.~RepeatedPtrField();
  _impl_.dual_rays_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.termination_;
  if (this != internal_default_instance()) delete _impl_.solve_stats_;
  if (has_solver_specific_output()) {
    clear_solver_specific_output();
  }
}

void SolveResultProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SolveResultProto::clear_solver_specific_output() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.math_opt.SolveResultProto)
  switch (solver_specific_output_case()) {
    case kGscipOutput: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.solver_specific_output_.gscip_output_;
      }
      break;
    }
    case SOLVER_SPECIFIC_OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SOLVER_SPECIFIC_OUTPUT_NOT_SET;
}


void SolveResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.math_opt.SolveResultProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.solutions_.Clear();
  _impl_.primal_rays_.Clear();
  _impl_.dual_rays_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.termination_ != nullptr) {
    delete _impl_.termination_;
  }
  _impl_.termination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.solve_stats_ != nullptr) {
    delete _impl_.solve_stats_;
  }
  _impl_.solve_stats_ = nullptr;
  clear_solver_specific_output();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolveResultProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.math_opt.TerminationProto termination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_termination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.SolutionProto solutions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_solutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.PrimalRayProto primal_rays = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primal_rays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.DualRayProto dual_rays = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dual_rays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.math_opt.SolveStatsProto solve_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_solve_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.GScipOutput gscip_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gscip_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolveResultProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.math_opt.SolveResultProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.TerminationProto termination = 2;
  if (this->_internal_has_termination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::termination(this),
        _Internal::termination(this).GetCachedSize(), target, stream);
  }

  // repeated .operations_research.math_opt.SolutionProto solutions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_solutions_size()); i < n; i++) {
    const auto& repfield = this->_internal_solutions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.math_opt.PrimalRayProto primal_rays = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primal_rays_size()); i < n; i++) {
    const auto& repfield = this->_internal_primal_rays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.math_opt.DualRayProto dual_rays = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dual_rays_size()); i < n; i++) {
    const auto& repfield = this->_internal_dual_rays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .operations_research.math_opt.SolveStatsProto solve_stats = 6;
  if (this->_internal_has_solve_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::solve_stats(this),
        _Internal::solve_stats(this).GetCachedSize(), target, stream);
  }

  // .operations_research.GScipOutput gscip_output = 7;
  if (_internal_has_gscip_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::gscip_output(this),
        _Internal::gscip_output(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.math_opt.SolveResultProto)
  return target;
}

size_t SolveResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.math_opt.SolveResultProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.math_opt.SolutionProto solutions = 3;
  total_size += 1UL * this->_internal_solutions_size();
  for (const auto& msg : this->_impl_.solutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.math_opt.PrimalRayProto primal_rays = 4;
  total_size += 1UL * this->_internal_primal_rays_size();
  for (const auto& msg : this->_impl_.primal_rays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.math_opt.DualRayProto dual_rays = 5;
  total_size += 1UL * this->_internal_dual_rays_size();
  for (const auto& msg : this->_impl_.dual_rays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .operations_research.math_opt.TerminationProto termination = 2;
  if (this->_internal_has_termination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.termination_);
  }

  // .operations_research.math_opt.SolveStatsProto solve_stats = 6;
  if (this->_internal_has_solve_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.solve_stats_);
  }

  switch (solver_specific_output_case()) {
    // .operations_research.GScipOutput gscip_output = 7;
    case kGscipOutput: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.solver_specific_output_.gscip_output_);
      break;
    }
    case SOLVER_SPECIFIC_OUTPUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolveResultProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SolveResultProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolveResultProto::GetClassData() const { return &_class_data_; }


void SolveResultProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SolveResultProto*>(&to_msg);
  auto& from = static_cast<const SolveResultProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.math_opt.SolveResultProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.solutions_.MergeFrom(from._impl_.solutions_);
  _this->_impl_.primal_rays_.MergeFrom(from._impl_.primal_rays_);
  _this->_impl_.dual_rays_.MergeFrom(from._impl_.dual_rays_);
  if (from._internal_has_termination()) {
    _this->_internal_mutable_termination()->::operations_research::math_opt::TerminationProto::MergeFrom(
        from._internal_termination());
  }
  if (from._internal_has_solve_stats()) {
    _this->_internal_mutable_solve_stats()->::operations_research::math_opt::SolveStatsProto::MergeFrom(
        from._internal_solve_stats());
  }
  switch (from.solver_specific_output_case()) {
    case kGscipOutput: {
      _this->_internal_mutable_gscip_output()->::operations_research::GScipOutput::MergeFrom(
          from._internal_gscip_output());
      break;
    }
    case SOLVER_SPECIFIC_OUTPUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolveResultProto::CopyFrom(const SolveResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.math_opt.SolveResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolveResultProto::IsInitialized() const {
  return true;
}

void SolveResultProto::InternalSwap(SolveResultProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.solutions_.InternalSwap(&other->_impl_.solutions_);
  _impl_.primal_rays_.InternalSwap(&other->_impl_.primal_rays_);
  _impl_.dual_rays_.InternalSwap(&other->_impl_.dual_rays_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveResultProto, _impl_.solve_stats_)
      + sizeof(SolveResultProto::_impl_.solve_stats_)
      - PROTOBUF_FIELD_OFFSET(SolveResultProto, _impl_.termination_)>(
          reinterpret_cast<char*>(&_impl_.termination_),
          reinterpret_cast<char*>(&other->_impl_.termination_));
  swap(_impl_.solver_specific_output_, other->_impl_.solver_specific_output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolveResultProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_getter, &descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto_once,
      file_level_metadata_ortools_2fmath_5fopt_2fresult_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::ProblemStatusProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::ProblemStatusProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::ProblemStatusProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SolveStatsProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SolveStatsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SolveStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::TerminationProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::TerminationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::TerminationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::math_opt::SolveResultProto*
Arena::CreateMaybeMessage< ::operations_research::math_opt::SolveResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::math_opt::SolveResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
