// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "ortools/gscip/gscip.pb.h"
#include "ortools/math_opt/solution.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fmath_5fopt_2fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fmath_5fopt_2fresult_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fresult_2eproto;
namespace operations_research {
namespace math_opt {
class ProblemStatusProto;
struct ProblemStatusProtoDefaultTypeInternal;
extern ProblemStatusProtoDefaultTypeInternal _ProblemStatusProto_default_instance_;
class SolveResultProto;
struct SolveResultProtoDefaultTypeInternal;
extern SolveResultProtoDefaultTypeInternal _SolveResultProto_default_instance_;
class SolveStatsProto;
struct SolveStatsProtoDefaultTypeInternal;
extern SolveStatsProtoDefaultTypeInternal _SolveStatsProto_default_instance_;
class TerminationProto;
struct TerminationProtoDefaultTypeInternal;
extern TerminationProtoDefaultTypeInternal _TerminationProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::math_opt::ProblemStatusProto* Arena::CreateMaybeMessage<::operations_research::math_opt::ProblemStatusProto>(Arena*);
template<> ::operations_research::math_opt::SolveResultProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SolveResultProto>(Arena*);
template<> ::operations_research::math_opt::SolveStatsProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SolveStatsProto>(Arena*);
template<> ::operations_research::math_opt::TerminationProto* Arena::CreateMaybeMessage<::operations_research::math_opt::TerminationProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace math_opt {

enum FeasibilityStatusProto : int {
  FEASIBILITY_STATUS_UNSPECIFIED = 0,
  FEASIBILITY_STATUS_UNDETERMINED = 1,
  FEASIBILITY_STATUS_FEASIBLE = 2,
  FEASIBILITY_STATUS_INFEASIBLE = 3,
  FeasibilityStatusProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FeasibilityStatusProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FeasibilityStatusProto_IsValid(int value);
constexpr FeasibilityStatusProto FeasibilityStatusProto_MIN = FEASIBILITY_STATUS_UNSPECIFIED;
constexpr FeasibilityStatusProto FeasibilityStatusProto_MAX = FEASIBILITY_STATUS_INFEASIBLE;
constexpr int FeasibilityStatusProto_ARRAYSIZE = FeasibilityStatusProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeasibilityStatusProto_descriptor();
template<typename T>
inline const std::string& FeasibilityStatusProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeasibilityStatusProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeasibilityStatusProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FeasibilityStatusProto_descriptor(), enum_t_value);
}
inline bool FeasibilityStatusProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeasibilityStatusProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FeasibilityStatusProto>(
    FeasibilityStatusProto_descriptor(), name, value);
}
enum TerminationReasonProto : int {
  TERMINATION_REASON_UNSPECIFIED = 0,
  TERMINATION_REASON_OPTIMAL = 1,
  TERMINATION_REASON_INFEASIBLE = 2,
  TERMINATION_REASON_UNBOUNDED = 3,
  TERMINATION_REASON_INFEASIBLE_OR_UNBOUNDED = 4,
  TERMINATION_REASON_IMPRECISE = 5,
  TERMINATION_REASON_FEASIBLE = 9,
  TERMINATION_REASON_NO_SOLUTION_FOUND = 6,
  TERMINATION_REASON_NUMERICAL_ERROR = 7,
  TERMINATION_REASON_OTHER_ERROR = 8,
  TerminationReasonProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TerminationReasonProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TerminationReasonProto_IsValid(int value);
constexpr TerminationReasonProto TerminationReasonProto_MIN = TERMINATION_REASON_UNSPECIFIED;
constexpr TerminationReasonProto TerminationReasonProto_MAX = TERMINATION_REASON_FEASIBLE;
constexpr int TerminationReasonProto_ARRAYSIZE = TerminationReasonProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminationReasonProto_descriptor();
template<typename T>
inline const std::string& TerminationReasonProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TerminationReasonProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TerminationReasonProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TerminationReasonProto_descriptor(), enum_t_value);
}
inline bool TerminationReasonProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TerminationReasonProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TerminationReasonProto>(
    TerminationReasonProto_descriptor(), name, value);
}
enum LimitProto : int {
  LIMIT_UNSPECIFIED = 0,
  LIMIT_UNDETERMINED = 1,
  LIMIT_ITERATION = 2,
  LIMIT_TIME = 3,
  LIMIT_NODE = 4,
  LIMIT_SOLUTION = 5,
  LIMIT_MEMORY = 6,
  LIMIT_CUTOFF = 12,
  LIMIT_OBJECTIVE = 7,
  LIMIT_NORM = 8,
  LIMIT_INTERRUPTED = 9,
  LIMIT_SLOW_PROGRESS = 10,
  LIMIT_OTHER = 11,
  LimitProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LimitProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LimitProto_IsValid(int value);
constexpr LimitProto LimitProto_MIN = LIMIT_UNSPECIFIED;
constexpr LimitProto LimitProto_MAX = LIMIT_CUTOFF;
constexpr int LimitProto_ARRAYSIZE = LimitProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LimitProto_descriptor();
template<typename T>
inline const std::string& LimitProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LimitProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LimitProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LimitProto_descriptor(), enum_t_value);
}
inline bool LimitProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LimitProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LimitProto>(
    LimitProto_descriptor(), name, value);
}
// ===================================================================

class ProblemStatusProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.ProblemStatusProto) */ {
 public:
  inline ProblemStatusProto() : ProblemStatusProto(nullptr) {}
  ~ProblemStatusProto() override;
  explicit PROTOBUF_CONSTEXPR ProblemStatusProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProblemStatusProto(const ProblemStatusProto& from);
  ProblemStatusProto(ProblemStatusProto&& from) noexcept
    : ProblemStatusProto() {
    *this = ::std::move(from);
  }

  inline ProblemStatusProto& operator=(const ProblemStatusProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProblemStatusProto& operator=(ProblemStatusProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProblemStatusProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProblemStatusProto* internal_default_instance() {
    return reinterpret_cast<const ProblemStatusProto*>(
               &_ProblemStatusProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProblemStatusProto& a, ProblemStatusProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProblemStatusProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProblemStatusProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProblemStatusProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProblemStatusProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProblemStatusProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProblemStatusProto& from) {
    ProblemStatusProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProblemStatusProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.ProblemStatusProto";
  }
  protected:
  explicit ProblemStatusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimalStatusFieldNumber = 1,
    kDualStatusFieldNumber = 2,
    kPrimalOrDualInfeasibleFieldNumber = 3,
  };
  // .operations_research.math_opt.FeasibilityStatusProto primal_status = 1;
  void clear_primal_status();
  ::operations_research::math_opt::FeasibilityStatusProto primal_status() const;
  void set_primal_status(::operations_research::math_opt::FeasibilityStatusProto value);
  private:
  ::operations_research::math_opt::FeasibilityStatusProto _internal_primal_status() const;
  void _internal_set_primal_status(::operations_research::math_opt::FeasibilityStatusProto value);
  public:

  // .operations_research.math_opt.FeasibilityStatusProto dual_status = 2;
  void clear_dual_status();
  ::operations_research::math_opt::FeasibilityStatusProto dual_status() const;
  void set_dual_status(::operations_research::math_opt::FeasibilityStatusProto value);
  private:
  ::operations_research::math_opt::FeasibilityStatusProto _internal_dual_status() const;
  void _internal_set_dual_status(::operations_research::math_opt::FeasibilityStatusProto value);
  public:

  // bool primal_or_dual_infeasible = 3;
  void clear_primal_or_dual_infeasible();
  bool primal_or_dual_infeasible() const;
  void set_primal_or_dual_infeasible(bool value);
  private:
  bool _internal_primal_or_dual_infeasible() const;
  void _internal_set_primal_or_dual_infeasible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.ProblemStatusProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int primal_status_;
    int dual_status_;
    bool primal_or_dual_infeasible_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fresult_2eproto;
};
// -------------------------------------------------------------------

class SolveStatsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolveStatsProto) */ {
 public:
  inline SolveStatsProto() : SolveStatsProto(nullptr) {}
  ~SolveStatsProto() override;
  explicit PROTOBUF_CONSTEXPR SolveStatsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolveStatsProto(const SolveStatsProto& from);
  SolveStatsProto(SolveStatsProto&& from) noexcept
    : SolveStatsProto() {
    *this = ::std::move(from);
  }

  inline SolveStatsProto& operator=(const SolveStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveStatsProto& operator=(SolveStatsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveStatsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolveStatsProto* internal_default_instance() {
    return reinterpret_cast<const SolveStatsProto*>(
               &_SolveStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SolveStatsProto& a, SolveStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveStatsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveStatsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveStatsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolveStatsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolveStatsProto& from) {
    SolveStatsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveStatsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SolveStatsProto";
  }
  protected:
  explicit SolveStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolveTimeFieldNumber = 1,
    kProblemStatusFieldNumber = 4,
    kBestPrimalBoundFieldNumber = 2,
    kBestDualBoundFieldNumber = 3,
    kSimplexIterationsFieldNumber = 5,
    kBarrierIterationsFieldNumber = 6,
    kNodeCountFieldNumber = 7,
    kFirstOrderIterationsFieldNumber = 8,
  };
  // .google.protobuf.Duration solve_time = 1;
  bool has_solve_time() const;
  private:
  bool _internal_has_solve_time() const;
  public:
  void clear_solve_time();
  const ::PROTOBUF_NAMESPACE_ID::Duration& solve_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_solve_time();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_solve_time();
  void set_allocated_solve_time(::PROTOBUF_NAMESPACE_ID::Duration* solve_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_solve_time() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_solve_time();
  public:
  void unsafe_arena_set_allocated_solve_time(
      ::PROTOBUF_NAMESPACE_ID::Duration* solve_time);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_solve_time();

  // .operations_research.math_opt.ProblemStatusProto problem_status = 4;
  bool has_problem_status() const;
  private:
  bool _internal_has_problem_status() const;
  public:
  void clear_problem_status();
  const ::operations_research::math_opt::ProblemStatusProto& problem_status() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::ProblemStatusProto* release_problem_status();
  ::operations_research::math_opt::ProblemStatusProto* mutable_problem_status();
  void set_allocated_problem_status(::operations_research::math_opt::ProblemStatusProto* problem_status);
  private:
  const ::operations_research::math_opt::ProblemStatusProto& _internal_problem_status() const;
  ::operations_research::math_opt::ProblemStatusProto* _internal_mutable_problem_status();
  public:
  void unsafe_arena_set_allocated_problem_status(
      ::operations_research::math_opt::ProblemStatusProto* problem_status);
  ::operations_research::math_opt::ProblemStatusProto* unsafe_arena_release_problem_status();

  // double best_primal_bound = 2;
  void clear_best_primal_bound();
  double best_primal_bound() const;
  void set_best_primal_bound(double value);
  private:
  double _internal_best_primal_bound() const;
  void _internal_set_best_primal_bound(double value);
  public:

  // double best_dual_bound = 3;
  void clear_best_dual_bound();
  double best_dual_bound() const;
  void set_best_dual_bound(double value);
  private:
  double _internal_best_dual_bound() const;
  void _internal_set_best_dual_bound(double value);
  public:

  // int64 simplex_iterations = 5;
  void clear_simplex_iterations();
  int64_t simplex_iterations() const;
  void set_simplex_iterations(int64_t value);
  private:
  int64_t _internal_simplex_iterations() const;
  void _internal_set_simplex_iterations(int64_t value);
  public:

  // int64 barrier_iterations = 6;
  void clear_barrier_iterations();
  int64_t barrier_iterations() const;
  void set_barrier_iterations(int64_t value);
  private:
  int64_t _internal_barrier_iterations() const;
  void _internal_set_barrier_iterations(int64_t value);
  public:

  // int64 node_count = 7;
  void clear_node_count();
  int64_t node_count() const;
  void set_node_count(int64_t value);
  private:
  int64_t _internal_node_count() const;
  void _internal_set_node_count(int64_t value);
  public:

  // int64 first_order_iterations = 8;
  void clear_first_order_iterations();
  int64_t first_order_iterations() const;
  void set_first_order_iterations(int64_t value);
  private:
  int64_t _internal_first_order_iterations() const;
  void _internal_set_first_order_iterations(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolveStatsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* solve_time_;
    ::operations_research::math_opt::ProblemStatusProto* problem_status_;
    double best_primal_bound_;
    double best_dual_bound_;
    int64_t simplex_iterations_;
    int64_t barrier_iterations_;
    int64_t node_count_;
    int64_t first_order_iterations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fresult_2eproto;
};
// -------------------------------------------------------------------

class TerminationProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.TerminationProto) */ {
 public:
  inline TerminationProto() : TerminationProto(nullptr) {}
  ~TerminationProto() override;
  explicit PROTOBUF_CONSTEXPR TerminationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminationProto(const TerminationProto& from);
  TerminationProto(TerminationProto&& from) noexcept
    : TerminationProto() {
    *this = ::std::move(from);
  }

  inline TerminationProto& operator=(const TerminationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationProto& operator=(TerminationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationProto* internal_default_instance() {
    return reinterpret_cast<const TerminationProto*>(
               &_TerminationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TerminationProto& a, TerminationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminationProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TerminationProto& from) {
    TerminationProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.TerminationProto";
  }
  protected:
  explicit TerminationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 3,
    kReasonFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string detail = 3;
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // .operations_research.math_opt.TerminationReasonProto reason = 1;
  void clear_reason();
  ::operations_research::math_opt::TerminationReasonProto reason() const;
  void set_reason(::operations_research::math_opt::TerminationReasonProto value);
  private:
  ::operations_research::math_opt::TerminationReasonProto _internal_reason() const;
  void _internal_set_reason(::operations_research::math_opt::TerminationReasonProto value);
  public:

  // .operations_research.math_opt.LimitProto limit = 2;
  void clear_limit();
  ::operations_research::math_opt::LimitProto limit() const;
  void set_limit(::operations_research::math_opt::LimitProto value);
  private:
  ::operations_research::math_opt::LimitProto _internal_limit() const;
  void _internal_set_limit(::operations_research::math_opt::LimitProto value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.TerminationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    int reason_;
    int limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fresult_2eproto;
};
// -------------------------------------------------------------------

class SolveResultProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolveResultProto) */ {
 public:
  inline SolveResultProto() : SolveResultProto(nullptr) {}
  ~SolveResultProto() override;
  explicit PROTOBUF_CONSTEXPR SolveResultProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolveResultProto(const SolveResultProto& from);
  SolveResultProto(SolveResultProto&& from) noexcept
    : SolveResultProto() {
    *this = ::std::move(from);
  }

  inline SolveResultProto& operator=(const SolveResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveResultProto& operator=(SolveResultProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveResultProto& default_instance() {
    return *internal_default_instance();
  }
  enum SolverSpecificOutputCase {
    kGscipOutput = 7,
    SOLVER_SPECIFIC_OUTPUT_NOT_SET = 0,
  };

  static inline const SolveResultProto* internal_default_instance() {
    return reinterpret_cast<const SolveResultProto*>(
               &_SolveResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SolveResultProto& a, SolveResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveResultProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveResultProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolveResultProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolveResultProto& from) {
    SolveResultProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveResultProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SolveResultProto";
  }
  protected:
  explicit SolveResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolutionsFieldNumber = 3,
    kPrimalRaysFieldNumber = 4,
    kDualRaysFieldNumber = 5,
    kTerminationFieldNumber = 2,
    kSolveStatsFieldNumber = 6,
    kGscipOutputFieldNumber = 7,
  };
  // repeated .operations_research.math_opt.SolutionProto solutions = 3;
  int solutions_size() const;
  private:
  int _internal_solutions_size() const;
  public:
  void clear_solutions();
  ::operations_research::math_opt::SolutionProto* mutable_solutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::SolutionProto >*
      mutable_solutions();
  private:
  const ::operations_research::math_opt::SolutionProto& _internal_solutions(int index) const;
  ::operations_research::math_opt::SolutionProto* _internal_add_solutions();
  public:
  const ::operations_research::math_opt::SolutionProto& solutions(int index) const;
  ::operations_research::math_opt::SolutionProto* add_solutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::SolutionProto >&
      solutions() const;

  // repeated .operations_research.math_opt.PrimalRayProto primal_rays = 4;
  int primal_rays_size() const;
  private:
  int _internal_primal_rays_size() const;
  public:
  void clear_primal_rays();
  ::operations_research::math_opt::PrimalRayProto* mutable_primal_rays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::PrimalRayProto >*
      mutable_primal_rays();
  private:
  const ::operations_research::math_opt::PrimalRayProto& _internal_primal_rays(int index) const;
  ::operations_research::math_opt::PrimalRayProto* _internal_add_primal_rays();
  public:
  const ::operations_research::math_opt::PrimalRayProto& primal_rays(int index) const;
  ::operations_research::math_opt::PrimalRayProto* add_primal_rays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::PrimalRayProto >&
      primal_rays() const;

  // repeated .operations_research.math_opt.DualRayProto dual_rays = 5;
  int dual_rays_size() const;
  private:
  int _internal_dual_rays_size() const;
  public:
  void clear_dual_rays();
  ::operations_research::math_opt::DualRayProto* mutable_dual_rays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::DualRayProto >*
      mutable_dual_rays();
  private:
  const ::operations_research::math_opt::DualRayProto& _internal_dual_rays(int index) const;
  ::operations_research::math_opt::DualRayProto* _internal_add_dual_rays();
  public:
  const ::operations_research::math_opt::DualRayProto& dual_rays(int index) const;
  ::operations_research::math_opt::DualRayProto* add_dual_rays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::DualRayProto >&
      dual_rays() const;

  // .operations_research.math_opt.TerminationProto termination = 2;
  bool has_termination() const;
  private:
  bool _internal_has_termination() const;
  public:
  void clear_termination();
  const ::operations_research::math_opt::TerminationProto& termination() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::TerminationProto* release_termination();
  ::operations_research::math_opt::TerminationProto* mutable_termination();
  void set_allocated_termination(::operations_research::math_opt::TerminationProto* termination);
  private:
  const ::operations_research::math_opt::TerminationProto& _internal_termination() const;
  ::operations_research::math_opt::TerminationProto* _internal_mutable_termination();
  public:
  void unsafe_arena_set_allocated_termination(
      ::operations_research::math_opt::TerminationProto* termination);
  ::operations_research::math_opt::TerminationProto* unsafe_arena_release_termination();

  // .operations_research.math_opt.SolveStatsProto solve_stats = 6;
  bool has_solve_stats() const;
  private:
  bool _internal_has_solve_stats() const;
  public:
  void clear_solve_stats();
  const ::operations_research::math_opt::SolveStatsProto& solve_stats() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::SolveStatsProto* release_solve_stats();
  ::operations_research::math_opt::SolveStatsProto* mutable_solve_stats();
  void set_allocated_solve_stats(::operations_research::math_opt::SolveStatsProto* solve_stats);
  private:
  const ::operations_research::math_opt::SolveStatsProto& _internal_solve_stats() const;
  ::operations_research::math_opt::SolveStatsProto* _internal_mutable_solve_stats();
  public:
  void unsafe_arena_set_allocated_solve_stats(
      ::operations_research::math_opt::SolveStatsProto* solve_stats);
  ::operations_research::math_opt::SolveStatsProto* unsafe_arena_release_solve_stats();

  // .operations_research.GScipOutput gscip_output = 7;
  bool has_gscip_output() const;
  private:
  bool _internal_has_gscip_output() const;
  public:
  void clear_gscip_output();
  const ::operations_research::GScipOutput& gscip_output() const;
  PROTOBUF_NODISCARD ::operations_research::GScipOutput* release_gscip_output();
  ::operations_research::GScipOutput* mutable_gscip_output();
  void set_allocated_gscip_output(::operations_research::GScipOutput* gscip_output);
  private:
  const ::operations_research::GScipOutput& _internal_gscip_output() const;
  ::operations_research::GScipOutput* _internal_mutable_gscip_output();
  public:
  void unsafe_arena_set_allocated_gscip_output(
      ::operations_research::GScipOutput* gscip_output);
  ::operations_research::GScipOutput* unsafe_arena_release_gscip_output();

  void clear_solver_specific_output();
  SolverSpecificOutputCase solver_specific_output_case() const;
  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolveResultProto)
 private:
  class _Internal;
  void set_has_gscip_output();

  inline bool has_solver_specific_output() const;
  inline void clear_has_solver_specific_output();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::SolutionProto > solutions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::PrimalRayProto > primal_rays_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::DualRayProto > dual_rays_;
    ::operations_research::math_opt::TerminationProto* termination_;
    ::operations_research::math_opt::SolveStatsProto* solve_stats_;
    union SolverSpecificOutputUnion {
      constexpr SolverSpecificOutputUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::operations_research::GScipOutput* gscip_output_;
    } solver_specific_output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProblemStatusProto

// .operations_research.math_opt.FeasibilityStatusProto primal_status = 1;
inline void ProblemStatusProto::clear_primal_status() {
  _impl_.primal_status_ = 0;
}
inline ::operations_research::math_opt::FeasibilityStatusProto ProblemStatusProto::_internal_primal_status() const {
  return static_cast< ::operations_research::math_opt::FeasibilityStatusProto >(_impl_.primal_status_);
}
inline ::operations_research::math_opt::FeasibilityStatusProto ProblemStatusProto::primal_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.ProblemStatusProto.primal_status)
  return _internal_primal_status();
}
inline void ProblemStatusProto::_internal_set_primal_status(::operations_research::math_opt::FeasibilityStatusProto value) {
  
  _impl_.primal_status_ = value;
}
inline void ProblemStatusProto::set_primal_status(::operations_research::math_opt::FeasibilityStatusProto value) {
  _internal_set_primal_status(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.ProblemStatusProto.primal_status)
}

// .operations_research.math_opt.FeasibilityStatusProto dual_status = 2;
inline void ProblemStatusProto::clear_dual_status() {
  _impl_.dual_status_ = 0;
}
inline ::operations_research::math_opt::FeasibilityStatusProto ProblemStatusProto::_internal_dual_status() const {
  return static_cast< ::operations_research::math_opt::FeasibilityStatusProto >(_impl_.dual_status_);
}
inline ::operations_research::math_opt::FeasibilityStatusProto ProblemStatusProto::dual_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.ProblemStatusProto.dual_status)
  return _internal_dual_status();
}
inline void ProblemStatusProto::_internal_set_dual_status(::operations_research::math_opt::FeasibilityStatusProto value) {
  
  _impl_.dual_status_ = value;
}
inline void ProblemStatusProto::set_dual_status(::operations_research::math_opt::FeasibilityStatusProto value) {
  _internal_set_dual_status(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.ProblemStatusProto.dual_status)
}

// bool primal_or_dual_infeasible = 3;
inline void ProblemStatusProto::clear_primal_or_dual_infeasible() {
  _impl_.primal_or_dual_infeasible_ = false;
}
inline bool ProblemStatusProto::_internal_primal_or_dual_infeasible() const {
  return _impl_.primal_or_dual_infeasible_;
}
inline bool ProblemStatusProto::primal_or_dual_infeasible() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.ProblemStatusProto.primal_or_dual_infeasible)
  return _internal_primal_or_dual_infeasible();
}
inline void ProblemStatusProto::_internal_set_primal_or_dual_infeasible(bool value) {
  
  _impl_.primal_or_dual_infeasible_ = value;
}
inline void ProblemStatusProto::set_primal_or_dual_infeasible(bool value) {
  _internal_set_primal_or_dual_infeasible(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.ProblemStatusProto.primal_or_dual_infeasible)
}

// -------------------------------------------------------------------

// SolveStatsProto

// .google.protobuf.Duration solve_time = 1;
inline bool SolveStatsProto::_internal_has_solve_time() const {
  return this != internal_default_instance() && _impl_.solve_time_ != nullptr;
}
inline bool SolveStatsProto::has_solve_time() const {
  return _internal_has_solve_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SolveStatsProto::_internal_solve_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.solve_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SolveStatsProto::solve_time() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.solve_time)
  return _internal_solve_time();
}
inline void SolveStatsProto::unsafe_arena_set_allocated_solve_time(
    ::PROTOBUF_NAMESPACE_ID::Duration* solve_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solve_time_);
  }
  _impl_.solve_time_ = solve_time;
  if (solve_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveStatsProto.solve_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveStatsProto::release_solve_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.solve_time_;
  _impl_.solve_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveStatsProto::unsafe_arena_release_solve_time() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveStatsProto.solve_time)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.solve_time_;
  _impl_.solve_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveStatsProto::_internal_mutable_solve_time() {
  
  if (_impl_.solve_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.solve_time_ = p;
  }
  return _impl_.solve_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveStatsProto::mutable_solve_time() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_solve_time();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveStatsProto.solve_time)
  return _msg;
}
inline void SolveStatsProto::set_allocated_solve_time(::PROTOBUF_NAMESPACE_ID::Duration* solve_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solve_time_);
  }
  if (solve_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solve_time));
    if (message_arena != submessage_arena) {
      solve_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solve_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.solve_time_ = solve_time;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveStatsProto.solve_time)
}

// double best_primal_bound = 2;
inline void SolveStatsProto::clear_best_primal_bound() {
  _impl_.best_primal_bound_ = 0;
}
inline double SolveStatsProto::_internal_best_primal_bound() const {
  return _impl_.best_primal_bound_;
}
inline double SolveStatsProto::best_primal_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.best_primal_bound)
  return _internal_best_primal_bound();
}
inline void SolveStatsProto::_internal_set_best_primal_bound(double value) {
  
  _impl_.best_primal_bound_ = value;
}
inline void SolveStatsProto::set_best_primal_bound(double value) {
  _internal_set_best_primal_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.best_primal_bound)
}

// double best_dual_bound = 3;
inline void SolveStatsProto::clear_best_dual_bound() {
  _impl_.best_dual_bound_ = 0;
}
inline double SolveStatsProto::_internal_best_dual_bound() const {
  return _impl_.best_dual_bound_;
}
inline double SolveStatsProto::best_dual_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.best_dual_bound)
  return _internal_best_dual_bound();
}
inline void SolveStatsProto::_internal_set_best_dual_bound(double value) {
  
  _impl_.best_dual_bound_ = value;
}
inline void SolveStatsProto::set_best_dual_bound(double value) {
  _internal_set_best_dual_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.best_dual_bound)
}

// .operations_research.math_opt.ProblemStatusProto problem_status = 4;
inline bool SolveStatsProto::_internal_has_problem_status() const {
  return this != internal_default_instance() && _impl_.problem_status_ != nullptr;
}
inline bool SolveStatsProto::has_problem_status() const {
  return _internal_has_problem_status();
}
inline void SolveStatsProto::clear_problem_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.problem_status_ != nullptr) {
    delete _impl_.problem_status_;
  }
  _impl_.problem_status_ = nullptr;
}
inline const ::operations_research::math_opt::ProblemStatusProto& SolveStatsProto::_internal_problem_status() const {
  const ::operations_research::math_opt::ProblemStatusProto* p = _impl_.problem_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::ProblemStatusProto&>(
      ::operations_research::math_opt::_ProblemStatusProto_default_instance_);
}
inline const ::operations_research::math_opt::ProblemStatusProto& SolveStatsProto::problem_status() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.problem_status)
  return _internal_problem_status();
}
inline void SolveStatsProto::unsafe_arena_set_allocated_problem_status(
    ::operations_research::math_opt::ProblemStatusProto* problem_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.problem_status_);
  }
  _impl_.problem_status_ = problem_status;
  if (problem_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveStatsProto.problem_status)
}
inline ::operations_research::math_opt::ProblemStatusProto* SolveStatsProto::release_problem_status() {
  
  ::operations_research::math_opt::ProblemStatusProto* temp = _impl_.problem_status_;
  _impl_.problem_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::ProblemStatusProto* SolveStatsProto::unsafe_arena_release_problem_status() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveStatsProto.problem_status)
  
  ::operations_research::math_opt::ProblemStatusProto* temp = _impl_.problem_status_;
  _impl_.problem_status_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::ProblemStatusProto* SolveStatsProto::_internal_mutable_problem_status() {
  
  if (_impl_.problem_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::ProblemStatusProto>(GetArenaForAllocation());
    _impl_.problem_status_ = p;
  }
  return _impl_.problem_status_;
}
inline ::operations_research::math_opt::ProblemStatusProto* SolveStatsProto::mutable_problem_status() {
  ::operations_research::math_opt::ProblemStatusProto* _msg = _internal_mutable_problem_status();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveStatsProto.problem_status)
  return _msg;
}
inline void SolveStatsProto::set_allocated_problem_status(::operations_research::math_opt::ProblemStatusProto* problem_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.problem_status_;
  }
  if (problem_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(problem_status);
    if (message_arena != submessage_arena) {
      problem_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, problem_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.problem_status_ = problem_status;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveStatsProto.problem_status)
}

// int64 simplex_iterations = 5;
inline void SolveStatsProto::clear_simplex_iterations() {
  _impl_.simplex_iterations_ = int64_t{0};
}
inline int64_t SolveStatsProto::_internal_simplex_iterations() const {
  return _impl_.simplex_iterations_;
}
inline int64_t SolveStatsProto::simplex_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.simplex_iterations)
  return _internal_simplex_iterations();
}
inline void SolveStatsProto::_internal_set_simplex_iterations(int64_t value) {
  
  _impl_.simplex_iterations_ = value;
}
inline void SolveStatsProto::set_simplex_iterations(int64_t value) {
  _internal_set_simplex_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.simplex_iterations)
}

// int64 barrier_iterations = 6;
inline void SolveStatsProto::clear_barrier_iterations() {
  _impl_.barrier_iterations_ = int64_t{0};
}
inline int64_t SolveStatsProto::_internal_barrier_iterations() const {
  return _impl_.barrier_iterations_;
}
inline int64_t SolveStatsProto::barrier_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.barrier_iterations)
  return _internal_barrier_iterations();
}
inline void SolveStatsProto::_internal_set_barrier_iterations(int64_t value) {
  
  _impl_.barrier_iterations_ = value;
}
inline void SolveStatsProto::set_barrier_iterations(int64_t value) {
  _internal_set_barrier_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.barrier_iterations)
}

// int64 first_order_iterations = 8;
inline void SolveStatsProto::clear_first_order_iterations() {
  _impl_.first_order_iterations_ = int64_t{0};
}
inline int64_t SolveStatsProto::_internal_first_order_iterations() const {
  return _impl_.first_order_iterations_;
}
inline int64_t SolveStatsProto::first_order_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.first_order_iterations)
  return _internal_first_order_iterations();
}
inline void SolveStatsProto::_internal_set_first_order_iterations(int64_t value) {
  
  _impl_.first_order_iterations_ = value;
}
inline void SolveStatsProto::set_first_order_iterations(int64_t value) {
  _internal_set_first_order_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.first_order_iterations)
}

// int64 node_count = 7;
inline void SolveStatsProto::clear_node_count() {
  _impl_.node_count_ = int64_t{0};
}
inline int64_t SolveStatsProto::_internal_node_count() const {
  return _impl_.node_count_;
}
inline int64_t SolveStatsProto::node_count() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveStatsProto.node_count)
  return _internal_node_count();
}
inline void SolveStatsProto::_internal_set_node_count(int64_t value) {
  
  _impl_.node_count_ = value;
}
inline void SolveStatsProto::set_node_count(int64_t value) {
  _internal_set_node_count(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveStatsProto.node_count)
}

// -------------------------------------------------------------------

// TerminationProto

// .operations_research.math_opt.TerminationReasonProto reason = 1;
inline void TerminationProto::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::operations_research::math_opt::TerminationReasonProto TerminationProto::_internal_reason() const {
  return static_cast< ::operations_research::math_opt::TerminationReasonProto >(_impl_.reason_);
}
inline ::operations_research::math_opt::TerminationReasonProto TerminationProto::reason() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.TerminationProto.reason)
  return _internal_reason();
}
inline void TerminationProto::_internal_set_reason(::operations_research::math_opt::TerminationReasonProto value) {
  
  _impl_.reason_ = value;
}
inline void TerminationProto::set_reason(::operations_research::math_opt::TerminationReasonProto value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.TerminationProto.reason)
}

// .operations_research.math_opt.LimitProto limit = 2;
inline void TerminationProto::clear_limit() {
  _impl_.limit_ = 0;
}
inline ::operations_research::math_opt::LimitProto TerminationProto::_internal_limit() const {
  return static_cast< ::operations_research::math_opt::LimitProto >(_impl_.limit_);
}
inline ::operations_research::math_opt::LimitProto TerminationProto::limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.TerminationProto.limit)
  return _internal_limit();
}
inline void TerminationProto::_internal_set_limit(::operations_research::math_opt::LimitProto value) {
  
  _impl_.limit_ = value;
}
inline void TerminationProto::set_limit(::operations_research::math_opt::LimitProto value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.TerminationProto.limit)
}

// string detail = 3;
inline void TerminationProto::clear_detail() {
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& TerminationProto::detail() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.TerminationProto.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TerminationProto::set_detail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations_research.math_opt.TerminationProto.detail)
}
inline std::string* TerminationProto::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.TerminationProto.detail)
  return _s;
}
inline const std::string& TerminationProto::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void TerminationProto::_internal_set_detail(const std::string& value) {
  
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* TerminationProto::_internal_mutable_detail() {
  
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* TerminationProto::release_detail() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.TerminationProto.detail)
  return _impl_.detail_.Release();
}
inline void TerminationProto::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.TerminationProto.detail)
}

// -------------------------------------------------------------------

// SolveResultProto

// .operations_research.math_opt.TerminationProto termination = 2;
inline bool SolveResultProto::_internal_has_termination() const {
  return this != internal_default_instance() && _impl_.termination_ != nullptr;
}
inline bool SolveResultProto::has_termination() const {
  return _internal_has_termination();
}
inline void SolveResultProto::clear_termination() {
  if (GetArenaForAllocation() == nullptr && _impl_.termination_ != nullptr) {
    delete _impl_.termination_;
  }
  _impl_.termination_ = nullptr;
}
inline const ::operations_research::math_opt::TerminationProto& SolveResultProto::_internal_termination() const {
  const ::operations_research::math_opt::TerminationProto* p = _impl_.termination_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::TerminationProto&>(
      ::operations_research::math_opt::_TerminationProto_default_instance_);
}
inline const ::operations_research::math_opt::TerminationProto& SolveResultProto::termination() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.termination)
  return _internal_termination();
}
inline void SolveResultProto::unsafe_arena_set_allocated_termination(
    ::operations_research::math_opt::TerminationProto* termination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.termination_);
  }
  _impl_.termination_ = termination;
  if (termination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveResultProto.termination)
}
inline ::operations_research::math_opt::TerminationProto* SolveResultProto::release_termination() {
  
  ::operations_research::math_opt::TerminationProto* temp = _impl_.termination_;
  _impl_.termination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::TerminationProto* SolveResultProto::unsafe_arena_release_termination() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveResultProto.termination)
  
  ::operations_research::math_opt::TerminationProto* temp = _impl_.termination_;
  _impl_.termination_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::TerminationProto* SolveResultProto::_internal_mutable_termination() {
  
  if (_impl_.termination_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::TerminationProto>(GetArenaForAllocation());
    _impl_.termination_ = p;
  }
  return _impl_.termination_;
}
inline ::operations_research::math_opt::TerminationProto* SolveResultProto::mutable_termination() {
  ::operations_research::math_opt::TerminationProto* _msg = _internal_mutable_termination();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.termination)
  return _msg;
}
inline void SolveResultProto::set_allocated_termination(::operations_research::math_opt::TerminationProto* termination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.termination_;
  }
  if (termination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(termination);
    if (message_arena != submessage_arena) {
      termination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, termination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.termination_ = termination;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveResultProto.termination)
}

// repeated .operations_research.math_opt.SolutionProto solutions = 3;
inline int SolveResultProto::_internal_solutions_size() const {
  return _impl_.solutions_.size();
}
inline int SolveResultProto::solutions_size() const {
  return _internal_solutions_size();
}
inline ::operations_research::math_opt::SolutionProto* SolveResultProto::mutable_solutions(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.solutions)
  return _impl_.solutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::SolutionProto >*
SolveResultProto::mutable_solutions() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SolveResultProto.solutions)
  return &_impl_.solutions_;
}
inline const ::operations_research::math_opt::SolutionProto& SolveResultProto::_internal_solutions(int index) const {
  return _impl_.solutions_.Get(index);
}
inline const ::operations_research::math_opt::SolutionProto& SolveResultProto::solutions(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.solutions)
  return _internal_solutions(index);
}
inline ::operations_research::math_opt::SolutionProto* SolveResultProto::_internal_add_solutions() {
  return _impl_.solutions_.Add();
}
inline ::operations_research::math_opt::SolutionProto* SolveResultProto::add_solutions() {
  ::operations_research::math_opt::SolutionProto* _add = _internal_add_solutions();
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SolveResultProto.solutions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::SolutionProto >&
SolveResultProto::solutions() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SolveResultProto.solutions)
  return _impl_.solutions_;
}

// repeated .operations_research.math_opt.PrimalRayProto primal_rays = 4;
inline int SolveResultProto::_internal_primal_rays_size() const {
  return _impl_.primal_rays_.size();
}
inline int SolveResultProto::primal_rays_size() const {
  return _internal_primal_rays_size();
}
inline ::operations_research::math_opt::PrimalRayProto* SolveResultProto::mutable_primal_rays(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.primal_rays)
  return _impl_.primal_rays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::PrimalRayProto >*
SolveResultProto::mutable_primal_rays() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SolveResultProto.primal_rays)
  return &_impl_.primal_rays_;
}
inline const ::operations_research::math_opt::PrimalRayProto& SolveResultProto::_internal_primal_rays(int index) const {
  return _impl_.primal_rays_.Get(index);
}
inline const ::operations_research::math_opt::PrimalRayProto& SolveResultProto::primal_rays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.primal_rays)
  return _internal_primal_rays(index);
}
inline ::operations_research::math_opt::PrimalRayProto* SolveResultProto::_internal_add_primal_rays() {
  return _impl_.primal_rays_.Add();
}
inline ::operations_research::math_opt::PrimalRayProto* SolveResultProto::add_primal_rays() {
  ::operations_research::math_opt::PrimalRayProto* _add = _internal_add_primal_rays();
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SolveResultProto.primal_rays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::PrimalRayProto >&
SolveResultProto::primal_rays() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SolveResultProto.primal_rays)
  return _impl_.primal_rays_;
}

// repeated .operations_research.math_opt.DualRayProto dual_rays = 5;
inline int SolveResultProto::_internal_dual_rays_size() const {
  return _impl_.dual_rays_.size();
}
inline int SolveResultProto::dual_rays_size() const {
  return _internal_dual_rays_size();
}
inline ::operations_research::math_opt::DualRayProto* SolveResultProto::mutable_dual_rays(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.dual_rays)
  return _impl_.dual_rays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::DualRayProto >*
SolveResultProto::mutable_dual_rays() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SolveResultProto.dual_rays)
  return &_impl_.dual_rays_;
}
inline const ::operations_research::math_opt::DualRayProto& SolveResultProto::_internal_dual_rays(int index) const {
  return _impl_.dual_rays_.Get(index);
}
inline const ::operations_research::math_opt::DualRayProto& SolveResultProto::dual_rays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.dual_rays)
  return _internal_dual_rays(index);
}
inline ::operations_research::math_opt::DualRayProto* SolveResultProto::_internal_add_dual_rays() {
  return _impl_.dual_rays_.Add();
}
inline ::operations_research::math_opt::DualRayProto* SolveResultProto::add_dual_rays() {
  ::operations_research::math_opt::DualRayProto* _add = _internal_add_dual_rays();
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SolveResultProto.dual_rays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::math_opt::DualRayProto >&
SolveResultProto::dual_rays() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SolveResultProto.dual_rays)
  return _impl_.dual_rays_;
}

// .operations_research.math_opt.SolveStatsProto solve_stats = 6;
inline bool SolveResultProto::_internal_has_solve_stats() const {
  return this != internal_default_instance() && _impl_.solve_stats_ != nullptr;
}
inline bool SolveResultProto::has_solve_stats() const {
  return _internal_has_solve_stats();
}
inline void SolveResultProto::clear_solve_stats() {
  if (GetArenaForAllocation() == nullptr && _impl_.solve_stats_ != nullptr) {
    delete _impl_.solve_stats_;
  }
  _impl_.solve_stats_ = nullptr;
}
inline const ::operations_research::math_opt::SolveStatsProto& SolveResultProto::_internal_solve_stats() const {
  const ::operations_research::math_opt::SolveStatsProto* p = _impl_.solve_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::SolveStatsProto&>(
      ::operations_research::math_opt::_SolveStatsProto_default_instance_);
}
inline const ::operations_research::math_opt::SolveStatsProto& SolveResultProto::solve_stats() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.solve_stats)
  return _internal_solve_stats();
}
inline void SolveResultProto::unsafe_arena_set_allocated_solve_stats(
    ::operations_research::math_opt::SolveStatsProto* solve_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.solve_stats_);
  }
  _impl_.solve_stats_ = solve_stats;
  if (solve_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveResultProto.solve_stats)
}
inline ::operations_research::math_opt::SolveStatsProto* SolveResultProto::release_solve_stats() {
  
  ::operations_research::math_opt::SolveStatsProto* temp = _impl_.solve_stats_;
  _impl_.solve_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::SolveStatsProto* SolveResultProto::unsafe_arena_release_solve_stats() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveResultProto.solve_stats)
  
  ::operations_research::math_opt::SolveStatsProto* temp = _impl_.solve_stats_;
  _impl_.solve_stats_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::SolveStatsProto* SolveResultProto::_internal_mutable_solve_stats() {
  
  if (_impl_.solve_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::SolveStatsProto>(GetArenaForAllocation());
    _impl_.solve_stats_ = p;
  }
  return _impl_.solve_stats_;
}
inline ::operations_research::math_opt::SolveStatsProto* SolveResultProto::mutable_solve_stats() {
  ::operations_research::math_opt::SolveStatsProto* _msg = _internal_mutable_solve_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.solve_stats)
  return _msg;
}
inline void SolveResultProto::set_allocated_solve_stats(::operations_research::math_opt::SolveStatsProto* solve_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.solve_stats_;
  }
  if (solve_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(solve_stats);
    if (message_arena != submessage_arena) {
      solve_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solve_stats, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.solve_stats_ = solve_stats;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveResultProto.solve_stats)
}

// .operations_research.GScipOutput gscip_output = 7;
inline bool SolveResultProto::_internal_has_gscip_output() const {
  return solver_specific_output_case() == kGscipOutput;
}
inline bool SolveResultProto::has_gscip_output() const {
  return _internal_has_gscip_output();
}
inline void SolveResultProto::set_has_gscip_output() {
  _impl_._oneof_case_[0] = kGscipOutput;
}
inline ::operations_research::GScipOutput* SolveResultProto::release_gscip_output() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveResultProto.gscip_output)
  if (_internal_has_gscip_output()) {
    clear_has_solver_specific_output();
    ::operations_research::GScipOutput* temp = _impl_.solver_specific_output_.gscip_output_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.solver_specific_output_.gscip_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::GScipOutput& SolveResultProto::_internal_gscip_output() const {
  return _internal_has_gscip_output()
      ? *_impl_.solver_specific_output_.gscip_output_
      : reinterpret_cast< ::operations_research::GScipOutput&>(::operations_research::_GScipOutput_default_instance_);
}
inline const ::operations_research::GScipOutput& SolveResultProto::gscip_output() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveResultProto.gscip_output)
  return _internal_gscip_output();
}
inline ::operations_research::GScipOutput* SolveResultProto::unsafe_arena_release_gscip_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.math_opt.SolveResultProto.gscip_output)
  if (_internal_has_gscip_output()) {
    clear_has_solver_specific_output();
    ::operations_research::GScipOutput* temp = _impl_.solver_specific_output_.gscip_output_;
    _impl_.solver_specific_output_.gscip_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SolveResultProto::unsafe_arena_set_allocated_gscip_output(::operations_research::GScipOutput* gscip_output) {
  clear_solver_specific_output();
  if (gscip_output) {
    set_has_gscip_output();
    _impl_.solver_specific_output_.gscip_output_ = gscip_output;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveResultProto.gscip_output)
}
inline ::operations_research::GScipOutput* SolveResultProto::_internal_mutable_gscip_output() {
  if (!_internal_has_gscip_output()) {
    clear_solver_specific_output();
    set_has_gscip_output();
    _impl_.solver_specific_output_.gscip_output_ = CreateMaybeMessage< ::operations_research::GScipOutput >(GetArenaForAllocation());
  }
  return _impl_.solver_specific_output_.gscip_output_;
}
inline ::operations_research::GScipOutput* SolveResultProto::mutable_gscip_output() {
  ::operations_research::GScipOutput* _msg = _internal_mutable_gscip_output();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveResultProto.gscip_output)
  return _msg;
}

inline bool SolveResultProto::has_solver_specific_output() const {
  return solver_specific_output_case() != SOLVER_SPECIFIC_OUTPUT_NOT_SET;
}
inline void SolveResultProto::clear_has_solver_specific_output() {
  _impl_._oneof_case_[0] = SOLVER_SPECIFIC_OUTPUT_NOT_SET;
}
inline SolveResultProto::SolverSpecificOutputCase SolveResultProto::solver_specific_output_case() const {
  return SolveResultProto::SolverSpecificOutputCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace math_opt
}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::math_opt::FeasibilityStatusProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::FeasibilityStatusProto>() {
  return ::operations_research::math_opt::FeasibilityStatusProto_descriptor();
}
template <> struct is_proto_enum< ::operations_research::math_opt::TerminationReasonProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::TerminationReasonProto>() {
  return ::operations_research::math_opt::TerminationReasonProto_descriptor();
}
template <> struct is_proto_enum< ::operations_research::math_opt::LimitProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::LimitProto>() {
  return ::operations_research::math_opt::LimitProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fresult_2eproto
