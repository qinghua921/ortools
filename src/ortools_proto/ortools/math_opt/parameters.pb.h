// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "ortools/math_opt/solvers/gurobi.pb.h"
#include "ortools/glop/parameters.pb.h"
#include "ortools/gscip/gscip.pb.h"
#include "ortools/sat/sat_parameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fmath_5fopt_2fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto;
namespace operations_research {
namespace math_opt {
class SolveParametersProto;
struct SolveParametersProtoDefaultTypeInternal;
extern SolveParametersProtoDefaultTypeInternal _SolveParametersProto_default_instance_;
class SolverInitializerProto;
struct SolverInitializerProtoDefaultTypeInternal;
extern SolverInitializerProtoDefaultTypeInternal _SolverInitializerProto_default_instance_;
class StrictnessProto;
struct StrictnessProtoDefaultTypeInternal;
extern StrictnessProtoDefaultTypeInternal _StrictnessProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::math_opt::SolveParametersProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SolveParametersProto>(Arena*);
template<> ::operations_research::math_opt::SolverInitializerProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SolverInitializerProto>(Arena*);
template<> ::operations_research::math_opt::StrictnessProto* Arena::CreateMaybeMessage<::operations_research::math_opt::StrictnessProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace math_opt {

enum SolverTypeProto : int {
  SOLVER_TYPE_UNSPECIFIED = 0,
  SOLVER_TYPE_GSCIP = 1,
  SOLVER_TYPE_GUROBI = 2,
  SOLVER_TYPE_GLOP = 3,
  SOLVER_TYPE_CP_SAT = 4,
  SOLVER_TYPE_GLPK = 6,
  SolverTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SolverTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SolverTypeProto_IsValid(int value);
constexpr SolverTypeProto SolverTypeProto_MIN = SOLVER_TYPE_UNSPECIFIED;
constexpr SolverTypeProto SolverTypeProto_MAX = SOLVER_TYPE_GLPK;
constexpr int SolverTypeProto_ARRAYSIZE = SolverTypeProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverTypeProto_descriptor();
template<typename T>
inline const std::string& SolverTypeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolverTypeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolverTypeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolverTypeProto_descriptor(), enum_t_value);
}
inline bool SolverTypeProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SolverTypeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolverTypeProto>(
    SolverTypeProto_descriptor(), name, value);
}
enum LPAlgorithmProto : int {
  LP_ALGORITHM_UNSPECIFIED = 0,
  LP_ALGORITHM_PRIMAL_SIMPLEX = 1,
  LP_ALGORITHM_DUAL_SIMPLEX = 2,
  LP_ALGORITHM_BARRIER = 3,
  LPAlgorithmProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LPAlgorithmProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LPAlgorithmProto_IsValid(int value);
constexpr LPAlgorithmProto LPAlgorithmProto_MIN = LP_ALGORITHM_UNSPECIFIED;
constexpr LPAlgorithmProto LPAlgorithmProto_MAX = LP_ALGORITHM_BARRIER;
constexpr int LPAlgorithmProto_ARRAYSIZE = LPAlgorithmProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LPAlgorithmProto_descriptor();
template<typename T>
inline const std::string& LPAlgorithmProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LPAlgorithmProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LPAlgorithmProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LPAlgorithmProto_descriptor(), enum_t_value);
}
inline bool LPAlgorithmProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LPAlgorithmProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LPAlgorithmProto>(
    LPAlgorithmProto_descriptor(), name, value);
}
enum EmphasisProto : int {
  EMPHASIS_UNSPECIFIED = 0,
  EMPHASIS_OFF = 1,
  EMPHASIS_LOW = 2,
  EMPHASIS_MEDIUM = 3,
  EMPHASIS_HIGH = 4,
  EMPHASIS_VERY_HIGH = 5,
  EmphasisProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EmphasisProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EmphasisProto_IsValid(int value);
constexpr EmphasisProto EmphasisProto_MIN = EMPHASIS_UNSPECIFIED;
constexpr EmphasisProto EmphasisProto_MAX = EMPHASIS_VERY_HIGH;
constexpr int EmphasisProto_ARRAYSIZE = EmphasisProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmphasisProto_descriptor();
template<typename T>
inline const std::string& EmphasisProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmphasisProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmphasisProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmphasisProto_descriptor(), enum_t_value);
}
inline bool EmphasisProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EmphasisProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmphasisProto>(
    EmphasisProto_descriptor(), name, value);
}
// ===================================================================

class StrictnessProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.StrictnessProto) */ {
 public:
  inline StrictnessProto() : StrictnessProto(nullptr) {}
  ~StrictnessProto() override;
  explicit PROTOBUF_CONSTEXPR StrictnessProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrictnessProto(const StrictnessProto& from);
  StrictnessProto(StrictnessProto&& from) noexcept
    : StrictnessProto() {
    *this = ::std::move(from);
  }

  inline StrictnessProto& operator=(const StrictnessProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrictnessProto& operator=(StrictnessProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrictnessProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrictnessProto* internal_default_instance() {
    return reinterpret_cast<const StrictnessProto*>(
               &_StrictnessProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StrictnessProto& a, StrictnessProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StrictnessProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrictnessProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrictnessProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrictnessProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StrictnessProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StrictnessProto& from) {
    StrictnessProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrictnessProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.StrictnessProto";
  }
  protected:
  explicit StrictnessProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBadParameterFieldNumber = 1,
  };
  // bool bad_parameter = 1;
  void clear_bad_parameter();
  bool bad_parameter() const;
  void set_bad_parameter(bool value);
  private:
  bool _internal_bad_parameter() const;
  void _internal_set_bad_parameter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.StrictnessProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bad_parameter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};
// -------------------------------------------------------------------

class SolverInitializerProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolverInitializerProto) */ {
 public:
  inline SolverInitializerProto() : SolverInitializerProto(nullptr) {}
  ~SolverInitializerProto() override;
  explicit PROTOBUF_CONSTEXPR SolverInitializerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolverInitializerProto(const SolverInitializerProto& from);
  SolverInitializerProto(SolverInitializerProto&& from) noexcept
    : SolverInitializerProto() {
    *this = ::std::move(from);
  }

  inline SolverInitializerProto& operator=(const SolverInitializerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverInitializerProto& operator=(SolverInitializerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverInitializerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverInitializerProto* internal_default_instance() {
    return reinterpret_cast<const SolverInitializerProto*>(
               &_SolverInitializerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SolverInitializerProto& a, SolverInitializerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverInitializerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverInitializerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverInitializerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverInitializerProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolverInitializerProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolverInitializerProto& from) {
    SolverInitializerProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverInitializerProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SolverInitializerProto";
  }
  protected:
  explicit SolverInitializerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGurobiFieldNumber = 1,
  };
  // .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
  bool has_gurobi() const;
  private:
  bool _internal_has_gurobi() const;
  public:
  void clear_gurobi();
  const ::operations_research::math_opt::GurobiInitializerProto& gurobi() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::GurobiInitializerProto* release_gurobi();
  ::operations_research::math_opt::GurobiInitializerProto* mutable_gurobi();
  void set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* gurobi);
  private:
  const ::operations_research::math_opt::GurobiInitializerProto& _internal_gurobi() const;
  ::operations_research::math_opt::GurobiInitializerProto* _internal_mutable_gurobi();
  public:
  void unsafe_arena_set_allocated_gurobi(
      ::operations_research::math_opt::GurobiInitializerProto* gurobi);
  ::operations_research::math_opt::GurobiInitializerProto* unsafe_arena_release_gurobi();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolverInitializerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::operations_research::math_opt::GurobiInitializerProto* gurobi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};
// -------------------------------------------------------------------

class SolveParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolveParametersProto) */ {
 public:
  inline SolveParametersProto() : SolveParametersProto(nullptr) {}
  ~SolveParametersProto() override;
  explicit PROTOBUF_CONSTEXPR SolveParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolveParametersProto(const SolveParametersProto& from);
  SolveParametersProto(SolveParametersProto&& from) noexcept
    : SolveParametersProto() {
    *this = ::std::move(from);
  }

  inline SolveParametersProto& operator=(const SolveParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveParametersProto& operator=(SolveParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolveParametersProto* internal_default_instance() {
    return reinterpret_cast<const SolveParametersProto*>(
               &_SolveParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SolveParametersProto& a, SolveParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolveParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SolveParametersProto& from) {
    SolveParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SolveParametersProto";
  }
  protected:
  explicit SolveParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeLimitFieldNumber = 1,
    kGscipFieldNumber = 12,
    kGurobiFieldNumber = 13,
    kGlopFieldNumber = 14,
    kCpSatFieldNumber = 15,
    kIterationLimitFieldNumber = 2,
    kEnableOutputFieldNumber = 3,
    kThreadsFieldNumber = 4,
    kRandomSeedFieldNumber = 5,
    kLpAlgorithmFieldNumber = 6,
    kPresolveFieldNumber = 7,
    kCutsFieldNumber = 8,
    kHeuristicsFieldNumber = 9,
    kScalingFieldNumber = 10,
    kRelativeGapToleranceFieldNumber = 17,
    kAbsoluteGapToleranceFieldNumber = 18,
    kCutoffLimitFieldNumber = 20,
    kObjectiveLimitFieldNumber = 21,
    kBestBoundLimitFieldNumber = 22,
    kNodeLimitFieldNumber = 24,
    kSolutionLimitFieldNumber = 23,
    kSolutionPoolSizeFieldNumber = 25,
  };
  // .google.protobuf.Duration time_limit = 1;
  bool has_time_limit() const;
  private:
  bool _internal_has_time_limit() const;
  public:
  void clear_time_limit();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_limit() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_limit();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_limit();
  void set_allocated_time_limit(::PROTOBUF_NAMESPACE_ID::Duration* time_limit);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_limit() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_limit();
  public:
  void unsafe_arena_set_allocated_time_limit(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_limit);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_limit();

  // .operations_research.GScipParameters gscip = 12;
  bool has_gscip() const;
  private:
  bool _internal_has_gscip() const;
  public:
  void clear_gscip();
  const ::operations_research::GScipParameters& gscip() const;
  PROTOBUF_NODISCARD ::operations_research::GScipParameters* release_gscip();
  ::operations_research::GScipParameters* mutable_gscip();
  void set_allocated_gscip(::operations_research::GScipParameters* gscip);
  private:
  const ::operations_research::GScipParameters& _internal_gscip() const;
  ::operations_research::GScipParameters* _internal_mutable_gscip();
  public:
  void unsafe_arena_set_allocated_gscip(
      ::operations_research::GScipParameters* gscip);
  ::operations_research::GScipParameters* unsafe_arena_release_gscip();

  // .operations_research.math_opt.GurobiParametersProto gurobi = 13;
  bool has_gurobi() const;
  private:
  bool _internal_has_gurobi() const;
  public:
  void clear_gurobi();
  const ::operations_research::math_opt::GurobiParametersProto& gurobi() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::GurobiParametersProto* release_gurobi();
  ::operations_research::math_opt::GurobiParametersProto* mutable_gurobi();
  void set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* gurobi);
  private:
  const ::operations_research::math_opt::GurobiParametersProto& _internal_gurobi() const;
  ::operations_research::math_opt::GurobiParametersProto* _internal_mutable_gurobi();
  public:
  void unsafe_arena_set_allocated_gurobi(
      ::operations_research::math_opt::GurobiParametersProto* gurobi);
  ::operations_research::math_opt::GurobiParametersProto* unsafe_arena_release_gurobi();

  // .operations_research.glop.GlopParameters glop = 14;
  bool has_glop() const;
  private:
  bool _internal_has_glop() const;
  public:
  void clear_glop();
  const ::operations_research::glop::GlopParameters& glop() const;
  PROTOBUF_NODISCARD ::operations_research::glop::GlopParameters* release_glop();
  ::operations_research::glop::GlopParameters* mutable_glop();
  void set_allocated_glop(::operations_research::glop::GlopParameters* glop);
  private:
  const ::operations_research::glop::GlopParameters& _internal_glop() const;
  ::operations_research::glop::GlopParameters* _internal_mutable_glop();
  public:
  void unsafe_arena_set_allocated_glop(
      ::operations_research::glop::GlopParameters* glop);
  ::operations_research::glop::GlopParameters* unsafe_arena_release_glop();

  // .operations_research.sat.SatParameters cp_sat = 15;
  bool has_cp_sat() const;
  private:
  bool _internal_has_cp_sat() const;
  public:
  void clear_cp_sat();
  const ::operations_research::sat::SatParameters& cp_sat() const;
  PROTOBUF_NODISCARD ::operations_research::sat::SatParameters* release_cp_sat();
  ::operations_research::sat::SatParameters* mutable_cp_sat();
  void set_allocated_cp_sat(::operations_research::sat::SatParameters* cp_sat);
  private:
  const ::operations_research::sat::SatParameters& _internal_cp_sat() const;
  ::operations_research::sat::SatParameters* _internal_mutable_cp_sat();
  public:
  void unsafe_arena_set_allocated_cp_sat(
      ::operations_research::sat::SatParameters* cp_sat);
  ::operations_research::sat::SatParameters* unsafe_arena_release_cp_sat();

  // optional int64 iteration_limit = 2;
  bool has_iteration_limit() const;
  private:
  bool _internal_has_iteration_limit() const;
  public:
  void clear_iteration_limit();
  int64_t iteration_limit() const;
  void set_iteration_limit(int64_t value);
  private:
  int64_t _internal_iteration_limit() const;
  void _internal_set_iteration_limit(int64_t value);
  public:

  // bool enable_output = 3;
  void clear_enable_output();
  bool enable_output() const;
  void set_enable_output(bool value);
  private:
  bool _internal_enable_output() const;
  void _internal_set_enable_output(bool value);
  public:

  // optional int32 threads = 4;
  bool has_threads() const;
  private:
  bool _internal_has_threads() const;
  public:
  void clear_threads();
  int32_t threads() const;
  void set_threads(int32_t value);
  private:
  int32_t _internal_threads() const;
  void _internal_set_threads(int32_t value);
  public:

  // optional int32 random_seed = 5;
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  int32_t random_seed() const;
  void set_random_seed(int32_t value);
  private:
  int32_t _internal_random_seed() const;
  void _internal_set_random_seed(int32_t value);
  public:

  // .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
  void clear_lp_algorithm();
  ::operations_research::math_opt::LPAlgorithmProto lp_algorithm() const;
  void set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value);
  private:
  ::operations_research::math_opt::LPAlgorithmProto _internal_lp_algorithm() const;
  void _internal_set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value);
  public:

  // .operations_research.math_opt.EmphasisProto presolve = 7;
  void clear_presolve();
  ::operations_research::math_opt::EmphasisProto presolve() const;
  void set_presolve(::operations_research::math_opt::EmphasisProto value);
  private:
  ::operations_research::math_opt::EmphasisProto _internal_presolve() const;
  void _internal_set_presolve(::operations_research::math_opt::EmphasisProto value);
  public:

  // .operations_research.math_opt.EmphasisProto cuts = 8;
  void clear_cuts();
  ::operations_research::math_opt::EmphasisProto cuts() const;
  void set_cuts(::operations_research::math_opt::EmphasisProto value);
  private:
  ::operations_research::math_opt::EmphasisProto _internal_cuts() const;
  void _internal_set_cuts(::operations_research::math_opt::EmphasisProto value);
  public:

  // .operations_research.math_opt.EmphasisProto heuristics = 9;
  void clear_heuristics();
  ::operations_research::math_opt::EmphasisProto heuristics() const;
  void set_heuristics(::operations_research::math_opt::EmphasisProto value);
  private:
  ::operations_research::math_opt::EmphasisProto _internal_heuristics() const;
  void _internal_set_heuristics(::operations_research::math_opt::EmphasisProto value);
  public:

  // .operations_research.math_opt.EmphasisProto scaling = 10;
  void clear_scaling();
  ::operations_research::math_opt::EmphasisProto scaling() const;
  void set_scaling(::operations_research::math_opt::EmphasisProto value);
  private:
  ::operations_research::math_opt::EmphasisProto _internal_scaling() const;
  void _internal_set_scaling(::operations_research::math_opt::EmphasisProto value);
  public:

  // optional double relative_gap_tolerance = 17;
  bool has_relative_gap_tolerance() const;
  private:
  bool _internal_has_relative_gap_tolerance() const;
  public:
  void clear_relative_gap_tolerance();
  double relative_gap_tolerance() const;
  void set_relative_gap_tolerance(double value);
  private:
  double _internal_relative_gap_tolerance() const;
  void _internal_set_relative_gap_tolerance(double value);
  public:

  // optional double absolute_gap_tolerance = 18;
  bool has_absolute_gap_tolerance() const;
  private:
  bool _internal_has_absolute_gap_tolerance() const;
  public:
  void clear_absolute_gap_tolerance();
  double absolute_gap_tolerance() const;
  void set_absolute_gap_tolerance(double value);
  private:
  double _internal_absolute_gap_tolerance() const;
  void _internal_set_absolute_gap_tolerance(double value);
  public:

  // optional double cutoff_limit = 20;
  bool has_cutoff_limit() const;
  private:
  bool _internal_has_cutoff_limit() const;
  public:
  void clear_cutoff_limit();
  double cutoff_limit() const;
  void set_cutoff_limit(double value);
  private:
  double _internal_cutoff_limit() const;
  void _internal_set_cutoff_limit(double value);
  public:

  // optional double objective_limit = 21;
  bool has_objective_limit() const;
  private:
  bool _internal_has_objective_limit() const;
  public:
  void clear_objective_limit();
  double objective_limit() const;
  void set_objective_limit(double value);
  private:
  double _internal_objective_limit() const;
  void _internal_set_objective_limit(double value);
  public:

  // optional double best_bound_limit = 22;
  bool has_best_bound_limit() const;
  private:
  bool _internal_has_best_bound_limit() const;
  public:
  void clear_best_bound_limit();
  double best_bound_limit() const;
  void set_best_bound_limit(double value);
  private:
  double _internal_best_bound_limit() const;
  void _internal_set_best_bound_limit(double value);
  public:

  // optional int64 node_limit = 24;
  bool has_node_limit() const;
  private:
  bool _internal_has_node_limit() const;
  public:
  void clear_node_limit();
  int64_t node_limit() const;
  void set_node_limit(int64_t value);
  private:
  int64_t _internal_node_limit() const;
  void _internal_set_node_limit(int64_t value);
  public:

  // optional int32 solution_limit = 23;
  bool has_solution_limit() const;
  private:
  bool _internal_has_solution_limit() const;
  public:
  void clear_solution_limit();
  int32_t solution_limit() const;
  void set_solution_limit(int32_t value);
  private:
  int32_t _internal_solution_limit() const;
  void _internal_set_solution_limit(int32_t value);
  public:

  // optional int32 solution_pool_size = 25;
  bool has_solution_pool_size() const;
  private:
  bool _internal_has_solution_pool_size() const;
  public:
  void clear_solution_pool_size();
  int32_t solution_pool_size() const;
  void set_solution_pool_size(int32_t value);
  private:
  int32_t _internal_solution_pool_size() const;
  void _internal_set_solution_pool_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolveParametersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_limit_;
    ::operations_research::GScipParameters* gscip_;
    ::operations_research::math_opt::GurobiParametersProto* gurobi_;
    ::operations_research::glop::GlopParameters* glop_;
    ::operations_research::sat::SatParameters* cp_sat_;
    int64_t iteration_limit_;
    bool enable_output_;
    int32_t threads_;
    int32_t random_seed_;
    int lp_algorithm_;
    int presolve_;
    int cuts_;
    int heuristics_;
    int scaling_;
    double relative_gap_tolerance_;
    double absolute_gap_tolerance_;
    double cutoff_limit_;
    double objective_limit_;
    double best_bound_limit_;
    int64_t node_limit_;
    int32_t solution_limit_;
    int32_t solution_pool_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StrictnessProto

// bool bad_parameter = 1;
inline void StrictnessProto::clear_bad_parameter() {
  _impl_.bad_parameter_ = false;
}
inline bool StrictnessProto::_internal_bad_parameter() const {
  return _impl_.bad_parameter_;
}
inline bool StrictnessProto::bad_parameter() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.StrictnessProto.bad_parameter)
  return _internal_bad_parameter();
}
inline void StrictnessProto::_internal_set_bad_parameter(bool value) {
  
  _impl_.bad_parameter_ = value;
}
inline void StrictnessProto::set_bad_parameter(bool value) {
  _internal_set_bad_parameter(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.StrictnessProto.bad_parameter)
}

// -------------------------------------------------------------------

// SolverInitializerProto

// .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
inline bool SolverInitializerProto::_internal_has_gurobi() const {
  return this != internal_default_instance() && _impl_.gurobi_ != nullptr;
}
inline bool SolverInitializerProto::has_gurobi() const {
  return _internal_has_gurobi();
}
inline const ::operations_research::math_opt::GurobiInitializerProto& SolverInitializerProto::_internal_gurobi() const {
  const ::operations_research::math_opt::GurobiInitializerProto* p = _impl_.gurobi_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::GurobiInitializerProto&>(
      ::operations_research::math_opt::_GurobiInitializerProto_default_instance_);
}
inline const ::operations_research::math_opt::GurobiInitializerProto& SolverInitializerProto::gurobi() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolverInitializerProto.gurobi)
  return _internal_gurobi();
}
inline void SolverInitializerProto::unsafe_arena_set_allocated_gurobi(
    ::operations_research::math_opt::GurobiInitializerProto* gurobi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gurobi_);
  }
  _impl_.gurobi_ = gurobi;
  if (gurobi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolverInitializerProto.gurobi)
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::release_gurobi() {
  
  ::operations_research::math_opt::GurobiInitializerProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::unsafe_arena_release_gurobi() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolverInitializerProto.gurobi)
  
  ::operations_research::math_opt::GurobiInitializerProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::_internal_mutable_gurobi() {
  
  if (_impl_.gurobi_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::GurobiInitializerProto>(GetArenaForAllocation());
    _impl_.gurobi_ = p;
  }
  return _impl_.gurobi_;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::mutable_gurobi() {
  ::operations_research::math_opt::GurobiInitializerProto* _msg = _internal_mutable_gurobi();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolverInitializerProto.gurobi)
  return _msg;
}
inline void SolverInitializerProto::set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* gurobi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gurobi_);
  }
  if (gurobi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gurobi));
    if (message_arena != submessage_arena) {
      gurobi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gurobi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gurobi_ = gurobi;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolverInitializerProto.gurobi)
}

// -------------------------------------------------------------------

// SolveParametersProto

// .google.protobuf.Duration time_limit = 1;
inline bool SolveParametersProto::_internal_has_time_limit() const {
  return this != internal_default_instance() && _impl_.time_limit_ != nullptr;
}
inline bool SolveParametersProto::has_time_limit() const {
  return _internal_has_time_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SolveParametersProto::_internal_time_limit() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SolveParametersProto::time_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.time_limit)
  return _internal_time_limit();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_time_limit(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_limit_);
  }
  _impl_.time_limit_ = time_limit;
  if (time_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.time_limit)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveParametersProto::release_time_limit() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveParametersProto::unsafe_arena_release_time_limit() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.time_limit)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveParametersProto::_internal_mutable_time_limit() {
  
  if (_impl_.time_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_limit_ = p;
  }
  return _impl_.time_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SolveParametersProto::mutable_time_limit() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_limit();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.time_limit)
  return _msg;
}
inline void SolveParametersProto::set_allocated_time_limit(::PROTOBUF_NAMESPACE_ID::Duration* time_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_limit_);
  }
  if (time_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_limit));
    if (message_arena != submessage_arena) {
      time_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_limit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_limit_ = time_limit;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.time_limit)
}

// optional int64 iteration_limit = 2;
inline bool SolveParametersProto::_internal_has_iteration_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SolveParametersProto::has_iteration_limit() const {
  return _internal_has_iteration_limit();
}
inline void SolveParametersProto::clear_iteration_limit() {
  _impl_.iteration_limit_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t SolveParametersProto::_internal_iteration_limit() const {
  return _impl_.iteration_limit_;
}
inline int64_t SolveParametersProto::iteration_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.iteration_limit)
  return _internal_iteration_limit();
}
inline void SolveParametersProto::_internal_set_iteration_limit(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iteration_limit_ = value;
}
inline void SolveParametersProto::set_iteration_limit(int64_t value) {
  _internal_set_iteration_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.iteration_limit)
}

// optional int64 node_limit = 24;
inline bool SolveParametersProto::_internal_has_node_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SolveParametersProto::has_node_limit() const {
  return _internal_has_node_limit();
}
inline void SolveParametersProto::clear_node_limit() {
  _impl_.node_limit_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t SolveParametersProto::_internal_node_limit() const {
  return _impl_.node_limit_;
}
inline int64_t SolveParametersProto::node_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.node_limit)
  return _internal_node_limit();
}
inline void SolveParametersProto::_internal_set_node_limit(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.node_limit_ = value;
}
inline void SolveParametersProto::set_node_limit(int64_t value) {
  _internal_set_node_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.node_limit)
}

// optional double cutoff_limit = 20;
inline bool SolveParametersProto::_internal_has_cutoff_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SolveParametersProto::has_cutoff_limit() const {
  return _internal_has_cutoff_limit();
}
inline void SolveParametersProto::clear_cutoff_limit() {
  _impl_.cutoff_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SolveParametersProto::_internal_cutoff_limit() const {
  return _impl_.cutoff_limit_;
}
inline double SolveParametersProto::cutoff_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cutoff_limit)
  return _internal_cutoff_limit();
}
inline void SolveParametersProto::_internal_set_cutoff_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cutoff_limit_ = value;
}
inline void SolveParametersProto::set_cutoff_limit(double value) {
  _internal_set_cutoff_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.cutoff_limit)
}

// optional double objective_limit = 21;
inline bool SolveParametersProto::_internal_has_objective_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SolveParametersProto::has_objective_limit() const {
  return _internal_has_objective_limit();
}
inline void SolveParametersProto::clear_objective_limit() {
  _impl_.objective_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SolveParametersProto::_internal_objective_limit() const {
  return _impl_.objective_limit_;
}
inline double SolveParametersProto::objective_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.objective_limit)
  return _internal_objective_limit();
}
inline void SolveParametersProto::_internal_set_objective_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.objective_limit_ = value;
}
inline void SolveParametersProto::set_objective_limit(double value) {
  _internal_set_objective_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.objective_limit)
}

// optional double best_bound_limit = 22;
inline bool SolveParametersProto::_internal_has_best_bound_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SolveParametersProto::has_best_bound_limit() const {
  return _internal_has_best_bound_limit();
}
inline void SolveParametersProto::clear_best_bound_limit() {
  _impl_.best_bound_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SolveParametersProto::_internal_best_bound_limit() const {
  return _impl_.best_bound_limit_;
}
inline double SolveParametersProto::best_bound_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.best_bound_limit)
  return _internal_best_bound_limit();
}
inline void SolveParametersProto::_internal_set_best_bound_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.best_bound_limit_ = value;
}
inline void SolveParametersProto::set_best_bound_limit(double value) {
  _internal_set_best_bound_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.best_bound_limit)
}

// optional int32 solution_limit = 23;
inline bool SolveParametersProto::_internal_has_solution_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SolveParametersProto::has_solution_limit() const {
  return _internal_has_solution_limit();
}
inline void SolveParametersProto::clear_solution_limit() {
  _impl_.solution_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t SolveParametersProto::_internal_solution_limit() const {
  return _impl_.solution_limit_;
}
inline int32_t SolveParametersProto::solution_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.solution_limit)
  return _internal_solution_limit();
}
inline void SolveParametersProto::_internal_set_solution_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.solution_limit_ = value;
}
inline void SolveParametersProto::set_solution_limit(int32_t value) {
  _internal_set_solution_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.solution_limit)
}

// bool enable_output = 3;
inline void SolveParametersProto::clear_enable_output() {
  _impl_.enable_output_ = false;
}
inline bool SolveParametersProto::_internal_enable_output() const {
  return _impl_.enable_output_;
}
inline bool SolveParametersProto::enable_output() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.enable_output)
  return _internal_enable_output();
}
inline void SolveParametersProto::_internal_set_enable_output(bool value) {
  
  _impl_.enable_output_ = value;
}
inline void SolveParametersProto::set_enable_output(bool value) {
  _internal_set_enable_output(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.enable_output)
}

// optional int32 threads = 4;
inline bool SolveParametersProto::_internal_has_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SolveParametersProto::has_threads() const {
  return _internal_has_threads();
}
inline void SolveParametersProto::clear_threads() {
  _impl_.threads_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SolveParametersProto::_internal_threads() const {
  return _impl_.threads_;
}
inline int32_t SolveParametersProto::threads() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.threads)
  return _internal_threads();
}
inline void SolveParametersProto::_internal_set_threads(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.threads_ = value;
}
inline void SolveParametersProto::set_threads(int32_t value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.threads)
}

// optional int32 random_seed = 5;
inline bool SolveParametersProto::_internal_has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SolveParametersProto::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void SolveParametersProto::clear_random_seed() {
  _impl_.random_seed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SolveParametersProto::_internal_random_seed() const {
  return _impl_.random_seed_;
}
inline int32_t SolveParametersProto::random_seed() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.random_seed)
  return _internal_random_seed();
}
inline void SolveParametersProto::_internal_set_random_seed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.random_seed_ = value;
}
inline void SolveParametersProto::set_random_seed(int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.random_seed)
}

// optional double absolute_gap_tolerance = 18;
inline bool SolveParametersProto::_internal_has_absolute_gap_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SolveParametersProto::has_absolute_gap_tolerance() const {
  return _internal_has_absolute_gap_tolerance();
}
inline void SolveParametersProto::clear_absolute_gap_tolerance() {
  _impl_.absolute_gap_tolerance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SolveParametersProto::_internal_absolute_gap_tolerance() const {
  return _impl_.absolute_gap_tolerance_;
}
inline double SolveParametersProto::absolute_gap_tolerance() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.absolute_gap_tolerance)
  return _internal_absolute_gap_tolerance();
}
inline void SolveParametersProto::_internal_set_absolute_gap_tolerance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.absolute_gap_tolerance_ = value;
}
inline void SolveParametersProto::set_absolute_gap_tolerance(double value) {
  _internal_set_absolute_gap_tolerance(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.absolute_gap_tolerance)
}

// optional double relative_gap_tolerance = 17;
inline bool SolveParametersProto::_internal_has_relative_gap_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SolveParametersProto::has_relative_gap_tolerance() const {
  return _internal_has_relative_gap_tolerance();
}
inline void SolveParametersProto::clear_relative_gap_tolerance() {
  _impl_.relative_gap_tolerance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SolveParametersProto::_internal_relative_gap_tolerance() const {
  return _impl_.relative_gap_tolerance_;
}
inline double SolveParametersProto::relative_gap_tolerance() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.relative_gap_tolerance)
  return _internal_relative_gap_tolerance();
}
inline void SolveParametersProto::_internal_set_relative_gap_tolerance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.relative_gap_tolerance_ = value;
}
inline void SolveParametersProto::set_relative_gap_tolerance(double value) {
  _internal_set_relative_gap_tolerance(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.relative_gap_tolerance)
}

// optional int32 solution_pool_size = 25;
inline bool SolveParametersProto::_internal_has_solution_pool_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SolveParametersProto::has_solution_pool_size() const {
  return _internal_has_solution_pool_size();
}
inline void SolveParametersProto::clear_solution_pool_size() {
  _impl_.solution_pool_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t SolveParametersProto::_internal_solution_pool_size() const {
  return _impl_.solution_pool_size_;
}
inline int32_t SolveParametersProto::solution_pool_size() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.solution_pool_size)
  return _internal_solution_pool_size();
}
inline void SolveParametersProto::_internal_set_solution_pool_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.solution_pool_size_ = value;
}
inline void SolveParametersProto::set_solution_pool_size(int32_t value) {
  _internal_set_solution_pool_size(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.solution_pool_size)
}

// .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
inline void SolveParametersProto::clear_lp_algorithm() {
  _impl_.lp_algorithm_ = 0;
}
inline ::operations_research::math_opt::LPAlgorithmProto SolveParametersProto::_internal_lp_algorithm() const {
  return static_cast< ::operations_research::math_opt::LPAlgorithmProto >(_impl_.lp_algorithm_);
}
inline ::operations_research::math_opt::LPAlgorithmProto SolveParametersProto::lp_algorithm() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.lp_algorithm)
  return _internal_lp_algorithm();
}
inline void SolveParametersProto::_internal_set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value) {
  
  _impl_.lp_algorithm_ = value;
}
inline void SolveParametersProto::set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value) {
  _internal_set_lp_algorithm(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.lp_algorithm)
}

// .operations_research.math_opt.EmphasisProto presolve = 7;
inline void SolveParametersProto::clear_presolve() {
  _impl_.presolve_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_presolve() const {
  return static_cast< ::operations_research::math_opt::EmphasisProto >(_impl_.presolve_);
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::presolve() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.presolve)
  return _internal_presolve();
}
inline void SolveParametersProto::_internal_set_presolve(::operations_research::math_opt::EmphasisProto value) {
  
  _impl_.presolve_ = value;
}
inline void SolveParametersProto::set_presolve(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_presolve(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.presolve)
}

// .operations_research.math_opt.EmphasisProto cuts = 8;
inline void SolveParametersProto::clear_cuts() {
  _impl_.cuts_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_cuts() const {
  return static_cast< ::operations_research::math_opt::EmphasisProto >(_impl_.cuts_);
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::cuts() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cuts)
  return _internal_cuts();
}
inline void SolveParametersProto::_internal_set_cuts(::operations_research::math_opt::EmphasisProto value) {
  
  _impl_.cuts_ = value;
}
inline void SolveParametersProto::set_cuts(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_cuts(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.cuts)
}

// .operations_research.math_opt.EmphasisProto heuristics = 9;
inline void SolveParametersProto::clear_heuristics() {
  _impl_.heuristics_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_heuristics() const {
  return static_cast< ::operations_research::math_opt::EmphasisProto >(_impl_.heuristics_);
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::heuristics() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.heuristics)
  return _internal_heuristics();
}
inline void SolveParametersProto::_internal_set_heuristics(::operations_research::math_opt::EmphasisProto value) {
  
  _impl_.heuristics_ = value;
}
inline void SolveParametersProto::set_heuristics(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_heuristics(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.heuristics)
}

// .operations_research.math_opt.EmphasisProto scaling = 10;
inline void SolveParametersProto::clear_scaling() {
  _impl_.scaling_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_scaling() const {
  return static_cast< ::operations_research::math_opt::EmphasisProto >(_impl_.scaling_);
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::scaling() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.scaling)
  return _internal_scaling();
}
inline void SolveParametersProto::_internal_set_scaling(::operations_research::math_opt::EmphasisProto value) {
  
  _impl_.scaling_ = value;
}
inline void SolveParametersProto::set_scaling(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.scaling)
}

// .operations_research.GScipParameters gscip = 12;
inline bool SolveParametersProto::_internal_has_gscip() const {
  return this != internal_default_instance() && _impl_.gscip_ != nullptr;
}
inline bool SolveParametersProto::has_gscip() const {
  return _internal_has_gscip();
}
inline const ::operations_research::GScipParameters& SolveParametersProto::_internal_gscip() const {
  const ::operations_research::GScipParameters* p = _impl_.gscip_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::GScipParameters&>(
      ::operations_research::_GScipParameters_default_instance_);
}
inline const ::operations_research::GScipParameters& SolveParametersProto::gscip() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.gscip)
  return _internal_gscip();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_gscip(
    ::operations_research::GScipParameters* gscip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gscip_);
  }
  _impl_.gscip_ = gscip;
  if (gscip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.gscip)
}
inline ::operations_research::GScipParameters* SolveParametersProto::release_gscip() {
  
  ::operations_research::GScipParameters* temp = _impl_.gscip_;
  _impl_.gscip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::GScipParameters* SolveParametersProto::unsafe_arena_release_gscip() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.gscip)
  
  ::operations_research::GScipParameters* temp = _impl_.gscip_;
  _impl_.gscip_ = nullptr;
  return temp;
}
inline ::operations_research::GScipParameters* SolveParametersProto::_internal_mutable_gscip() {
  
  if (_impl_.gscip_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::GScipParameters>(GetArenaForAllocation());
    _impl_.gscip_ = p;
  }
  return _impl_.gscip_;
}
inline ::operations_research::GScipParameters* SolveParametersProto::mutable_gscip() {
  ::operations_research::GScipParameters* _msg = _internal_mutable_gscip();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.gscip)
  return _msg;
}
inline void SolveParametersProto::set_allocated_gscip(::operations_research::GScipParameters* gscip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gscip_);
  }
  if (gscip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gscip));
    if (message_arena != submessage_arena) {
      gscip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gscip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gscip_ = gscip;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.gscip)
}

// .operations_research.math_opt.GurobiParametersProto gurobi = 13;
inline bool SolveParametersProto::_internal_has_gurobi() const {
  return this != internal_default_instance() && _impl_.gurobi_ != nullptr;
}
inline bool SolveParametersProto::has_gurobi() const {
  return _internal_has_gurobi();
}
inline const ::operations_research::math_opt::GurobiParametersProto& SolveParametersProto::_internal_gurobi() const {
  const ::operations_research::math_opt::GurobiParametersProto* p = _impl_.gurobi_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::GurobiParametersProto&>(
      ::operations_research::math_opt::_GurobiParametersProto_default_instance_);
}
inline const ::operations_research::math_opt::GurobiParametersProto& SolveParametersProto::gurobi() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.gurobi)
  return _internal_gurobi();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_gurobi(
    ::operations_research::math_opt::GurobiParametersProto* gurobi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gurobi_);
  }
  _impl_.gurobi_ = gurobi;
  if (gurobi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.gurobi)
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::release_gurobi() {
  
  ::operations_research::math_opt::GurobiParametersProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::unsafe_arena_release_gurobi() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.gurobi)
  
  ::operations_research::math_opt::GurobiParametersProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::_internal_mutable_gurobi() {
  
  if (_impl_.gurobi_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::GurobiParametersProto>(GetArenaForAllocation());
    _impl_.gurobi_ = p;
  }
  return _impl_.gurobi_;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::mutable_gurobi() {
  ::operations_research::math_opt::GurobiParametersProto* _msg = _internal_mutable_gurobi();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.gurobi)
  return _msg;
}
inline void SolveParametersProto::set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* gurobi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gurobi_);
  }
  if (gurobi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gurobi));
    if (message_arena != submessage_arena) {
      gurobi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gurobi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gurobi_ = gurobi;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.gurobi)
}

// .operations_research.glop.GlopParameters glop = 14;
inline bool SolveParametersProto::_internal_has_glop() const {
  return this != internal_default_instance() && _impl_.glop_ != nullptr;
}
inline bool SolveParametersProto::has_glop() const {
  return _internal_has_glop();
}
inline const ::operations_research::glop::GlopParameters& SolveParametersProto::_internal_glop() const {
  const ::operations_research::glop::GlopParameters* p = _impl_.glop_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::glop::GlopParameters&>(
      ::operations_research::glop::_GlopParameters_default_instance_);
}
inline const ::operations_research::glop::GlopParameters& SolveParametersProto::glop() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.glop)
  return _internal_glop();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_glop(
    ::operations_research::glop::GlopParameters* glop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.glop_);
  }
  _impl_.glop_ = glop;
  if (glop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.glop)
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::release_glop() {
  
  ::operations_research::glop::GlopParameters* temp = _impl_.glop_;
  _impl_.glop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::unsafe_arena_release_glop() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.glop)
  
  ::operations_research::glop::GlopParameters* temp = _impl_.glop_;
  _impl_.glop_ = nullptr;
  return temp;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::_internal_mutable_glop() {
  
  if (_impl_.glop_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::glop::GlopParameters>(GetArenaForAllocation());
    _impl_.glop_ = p;
  }
  return _impl_.glop_;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::mutable_glop() {
  ::operations_research::glop::GlopParameters* _msg = _internal_mutable_glop();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.glop)
  return _msg;
}
inline void SolveParametersProto::set_allocated_glop(::operations_research::glop::GlopParameters* glop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.glop_);
  }
  if (glop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glop));
    if (message_arena != submessage_arena) {
      glop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.glop_ = glop;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.glop)
}

// .operations_research.sat.SatParameters cp_sat = 15;
inline bool SolveParametersProto::_internal_has_cp_sat() const {
  return this != internal_default_instance() && _impl_.cp_sat_ != nullptr;
}
inline bool SolveParametersProto::has_cp_sat() const {
  return _internal_has_cp_sat();
}
inline const ::operations_research::sat::SatParameters& SolveParametersProto::_internal_cp_sat() const {
  const ::operations_research::sat::SatParameters* p = _impl_.cp_sat_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::SatParameters&>(
      ::operations_research::sat::_SatParameters_default_instance_);
}
inline const ::operations_research::sat::SatParameters& SolveParametersProto::cp_sat() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cp_sat)
  return _internal_cp_sat();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_cp_sat(
    ::operations_research::sat::SatParameters* cp_sat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cp_sat_);
  }
  _impl_.cp_sat_ = cp_sat;
  if (cp_sat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.cp_sat)
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::release_cp_sat() {
  
  ::operations_research::sat::SatParameters* temp = _impl_.cp_sat_;
  _impl_.cp_sat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::unsafe_arena_release_cp_sat() {
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.cp_sat)
  
  ::operations_research::sat::SatParameters* temp = _impl_.cp_sat_;
  _impl_.cp_sat_ = nullptr;
  return temp;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::_internal_mutable_cp_sat() {
  
  if (_impl_.cp_sat_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::SatParameters>(GetArenaForAllocation());
    _impl_.cp_sat_ = p;
  }
  return _impl_.cp_sat_;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::mutable_cp_sat() {
  ::operations_research::sat::SatParameters* _msg = _internal_mutable_cp_sat();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.cp_sat)
  return _msg;
}
inline void SolveParametersProto::set_allocated_cp_sat(::operations_research::sat::SatParameters* cp_sat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cp_sat_);
  }
  if (cp_sat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_sat));
    if (message_arena != submessage_arena) {
      cp_sat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_sat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cp_sat_ = cp_sat;
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.cp_sat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace math_opt
}  // namespace operations_research

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::operations_research::math_opt::SolverTypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::SolverTypeProto>() {
  return ::operations_research::math_opt::SolverTypeProto_descriptor();
}
template <> struct is_proto_enum< ::operations_research::math_opt::LPAlgorithmProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::LPAlgorithmProto>() {
  return ::operations_research::math_opt::LPAlgorithmProto_descriptor();
}
template <> struct is_proto_enum< ::operations_research::math_opt::EmphasisProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::operations_research::math_opt::EmphasisProto>() {
  return ::operations_research::math_opt::EmphasisProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto
