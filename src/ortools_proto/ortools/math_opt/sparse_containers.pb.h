// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/sparse_containers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
namespace operations_research {
namespace math_opt {
class LinearExpressionProto;
struct LinearExpressionProtoDefaultTypeInternal;
extern LinearExpressionProtoDefaultTypeInternal _LinearExpressionProto_default_instance_;
class SparseBoolVectorProto;
struct SparseBoolVectorProtoDefaultTypeInternal;
extern SparseBoolVectorProtoDefaultTypeInternal _SparseBoolVectorProto_default_instance_;
class SparseDoubleMatrixProto;
struct SparseDoubleMatrixProtoDefaultTypeInternal;
extern SparseDoubleMatrixProtoDefaultTypeInternal _SparseDoubleMatrixProto_default_instance_;
class SparseDoubleVectorProto;
struct SparseDoubleVectorProtoDefaultTypeInternal;
extern SparseDoubleVectorProtoDefaultTypeInternal _SparseDoubleVectorProto_default_instance_;
class SparseInt32VectorProto;
struct SparseInt32VectorProtoDefaultTypeInternal;
extern SparseInt32VectorProtoDefaultTypeInternal _SparseInt32VectorProto_default_instance_;
class SparseVectorFilterProto;
struct SparseVectorFilterProtoDefaultTypeInternal;
extern SparseVectorFilterProtoDefaultTypeInternal _SparseVectorFilterProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::math_opt::LinearExpressionProto* Arena::CreateMaybeMessage<::operations_research::math_opt::LinearExpressionProto>(Arena*);
template<> ::operations_research::math_opt::SparseBoolVectorProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseBoolVectorProto>(Arena*);
template<> ::operations_research::math_opt::SparseDoubleMatrixProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseDoubleMatrixProto>(Arena*);
template<> ::operations_research::math_opt::SparseDoubleVectorProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseDoubleVectorProto>(Arena*);
template<> ::operations_research::math_opt::SparseInt32VectorProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseInt32VectorProto>(Arena*);
template<> ::operations_research::math_opt::SparseVectorFilterProto* Arena::CreateMaybeMessage<::operations_research::math_opt::SparseVectorFilterProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace math_opt {

// ===================================================================

class SparseDoubleVectorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseDoubleVectorProto) */ {
 public:
  inline SparseDoubleVectorProto() : SparseDoubleVectorProto(nullptr) {}
  ~SparseDoubleVectorProto() override;
  explicit PROTOBUF_CONSTEXPR SparseDoubleVectorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseDoubleVectorProto(const SparseDoubleVectorProto& from);
  SparseDoubleVectorProto(SparseDoubleVectorProto&& from) noexcept
    : SparseDoubleVectorProto() {
    *this = ::std::move(from);
  }

  inline SparseDoubleVectorProto& operator=(const SparseDoubleVectorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseDoubleVectorProto& operator=(SparseDoubleVectorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseDoubleVectorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseDoubleVectorProto* internal_default_instance() {
    return reinterpret_cast<const SparseDoubleVectorProto*>(
               &_SparseDoubleVectorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SparseDoubleVectorProto& a, SparseDoubleVectorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseDoubleVectorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseDoubleVectorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseDoubleVectorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseDoubleVectorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseDoubleVectorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseDoubleVectorProto& from) {
    SparseDoubleVectorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseDoubleVectorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseDoubleVectorProto";
  }
  protected:
  explicit SparseDoubleVectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated double values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseDoubleVectorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class SparseBoolVectorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseBoolVectorProto) */ {
 public:
  inline SparseBoolVectorProto() : SparseBoolVectorProto(nullptr) {}
  ~SparseBoolVectorProto() override;
  explicit PROTOBUF_CONSTEXPR SparseBoolVectorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseBoolVectorProto(const SparseBoolVectorProto& from);
  SparseBoolVectorProto(SparseBoolVectorProto&& from) noexcept
    : SparseBoolVectorProto() {
    *this = ::std::move(from);
  }

  inline SparseBoolVectorProto& operator=(const SparseBoolVectorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseBoolVectorProto& operator=(SparseBoolVectorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseBoolVectorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseBoolVectorProto* internal_default_instance() {
    return reinterpret_cast<const SparseBoolVectorProto*>(
               &_SparseBoolVectorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SparseBoolVectorProto& a, SparseBoolVectorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseBoolVectorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseBoolVectorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseBoolVectorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseBoolVectorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseBoolVectorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseBoolVectorProto& from) {
    SparseBoolVectorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseBoolVectorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseBoolVectorProto";
  }
  protected:
  explicit SparseBoolVectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated bool values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  bool _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_values() const;
  void _internal_add_values(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_values();
  public:
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseBoolVectorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class SparseInt32VectorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseInt32VectorProto) */ {
 public:
  inline SparseInt32VectorProto() : SparseInt32VectorProto(nullptr) {}
  ~SparseInt32VectorProto() override;
  explicit PROTOBUF_CONSTEXPR SparseInt32VectorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseInt32VectorProto(const SparseInt32VectorProto& from);
  SparseInt32VectorProto(SparseInt32VectorProto&& from) noexcept
    : SparseInt32VectorProto() {
    *this = ::std::move(from);
  }

  inline SparseInt32VectorProto& operator=(const SparseInt32VectorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseInt32VectorProto& operator=(SparseInt32VectorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseInt32VectorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseInt32VectorProto* internal_default_instance() {
    return reinterpret_cast<const SparseInt32VectorProto*>(
               &_SparseInt32VectorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseInt32VectorProto& a, SparseInt32VectorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseInt32VectorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseInt32VectorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseInt32VectorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseInt32VectorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseInt32VectorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseInt32VectorProto& from) {
    SparseInt32VectorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseInt32VectorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseInt32VectorProto";
  }
  protected:
  explicit SparseInt32VectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated int32 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int32_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_values() const;
  void _internal_add_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_values();
  public:
  int32_t values(int index) const;
  void set_values(int index, int32_t value);
  void add_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseInt32VectorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class SparseVectorFilterProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseVectorFilterProto) */ {
 public:
  inline SparseVectorFilterProto() : SparseVectorFilterProto(nullptr) {}
  ~SparseVectorFilterProto() override;
  explicit PROTOBUF_CONSTEXPR SparseVectorFilterProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseVectorFilterProto(const SparseVectorFilterProto& from);
  SparseVectorFilterProto(SparseVectorFilterProto&& from) noexcept
    : SparseVectorFilterProto() {
    *this = ::std::move(from);
  }

  inline SparseVectorFilterProto& operator=(const SparseVectorFilterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseVectorFilterProto& operator=(SparseVectorFilterProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseVectorFilterProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseVectorFilterProto* internal_default_instance() {
    return reinterpret_cast<const SparseVectorFilterProto*>(
               &_SparseVectorFilterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SparseVectorFilterProto& a, SparseVectorFilterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseVectorFilterProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseVectorFilterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseVectorFilterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseVectorFilterProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseVectorFilterProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseVectorFilterProto& from) {
    SparseVectorFilterProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseVectorFilterProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseVectorFilterProto";
  }
  protected:
  explicit SparseVectorFilterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredIdsFieldNumber = 3,
    kSkipZeroValuesFieldNumber = 1,
    kFilterByIdsFieldNumber = 2,
  };
  // repeated int64 filtered_ids = 3;
  int filtered_ids_size() const;
  private:
  int _internal_filtered_ids_size() const;
  public:
  void clear_filtered_ids();
  private:
  int64_t _internal_filtered_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_filtered_ids() const;
  void _internal_add_filtered_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_filtered_ids();
  public:
  int64_t filtered_ids(int index) const;
  void set_filtered_ids(int index, int64_t value);
  void add_filtered_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      filtered_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_filtered_ids();

  // bool skip_zero_values = 1;
  void clear_skip_zero_values();
  bool skip_zero_values() const;
  void set_skip_zero_values(bool value);
  private:
  bool _internal_skip_zero_values() const;
  void _internal_set_skip_zero_values(bool value);
  public:

  // bool filter_by_ids = 2;
  void clear_filter_by_ids();
  bool filter_by_ids() const;
  void set_filter_by_ids(bool value);
  private:
  bool _internal_filter_by_ids() const;
  void _internal_set_filter_by_ids(bool value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseVectorFilterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > filtered_ids_;
    mutable std::atomic<int> _filtered_ids_cached_byte_size_;
    bool skip_zero_values_;
    bool filter_by_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class SparseDoubleMatrixProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SparseDoubleMatrixProto) */ {
 public:
  inline SparseDoubleMatrixProto() : SparseDoubleMatrixProto(nullptr) {}
  ~SparseDoubleMatrixProto() override;
  explicit PROTOBUF_CONSTEXPR SparseDoubleMatrixProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseDoubleMatrixProto(const SparseDoubleMatrixProto& from);
  SparseDoubleMatrixProto(SparseDoubleMatrixProto&& from) noexcept
    : SparseDoubleMatrixProto() {
    *this = ::std::move(from);
  }

  inline SparseDoubleMatrixProto& operator=(const SparseDoubleMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseDoubleMatrixProto& operator=(SparseDoubleMatrixProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseDoubleMatrixProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseDoubleMatrixProto* internal_default_instance() {
    return reinterpret_cast<const SparseDoubleMatrixProto*>(
               &_SparseDoubleMatrixProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SparseDoubleMatrixProto& a, SparseDoubleMatrixProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseDoubleMatrixProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseDoubleMatrixProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseDoubleMatrixProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseDoubleMatrixProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseDoubleMatrixProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SparseDoubleMatrixProto& from) {
    SparseDoubleMatrixProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseDoubleMatrixProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.SparseDoubleMatrixProto";
  }
  protected:
  explicit SparseDoubleMatrixProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowIdsFieldNumber = 1,
    kColumnIdsFieldNumber = 2,
    kCoefficientsFieldNumber = 3,
  };
  // repeated int64 row_ids = 1;
  int row_ids_size() const;
  private:
  int _internal_row_ids_size() const;
  public:
  void clear_row_ids();
  private:
  int64_t _internal_row_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_row_ids() const;
  void _internal_add_row_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_row_ids();
  public:
  int64_t row_ids(int index) const;
  void set_row_ids(int index, int64_t value);
  void add_row_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      row_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_row_ids();

  // repeated int64 column_ids = 2;
  int column_ids_size() const;
  private:
  int _internal_column_ids_size() const;
  public:
  void clear_column_ids();
  private:
  int64_t _internal_column_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_column_ids() const;
  void _internal_add_column_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_column_ids();
  public:
  int64_t column_ids(int index) const;
  void set_column_ids(int index, int64_t value);
  void add_column_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      column_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_column_ids();

  // repeated double coefficients = 3;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  double _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coefficients() const;
  void _internal_add_coefficients(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coefficients();
  public:
  double coefficients(int index) const;
  void set_coefficients(int index, double value);
  void add_coefficients(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coefficients();

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SparseDoubleMatrixProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > row_ids_;
    mutable std::atomic<int> _row_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > column_ids_;
    mutable std::atomic<int> _column_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coefficients_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// -------------------------------------------------------------------

class LinearExpressionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.LinearExpressionProto) */ {
 public:
  inline LinearExpressionProto() : LinearExpressionProto(nullptr) {}
  ~LinearExpressionProto() override;
  explicit PROTOBUF_CONSTEXPR LinearExpressionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinearExpressionProto(const LinearExpressionProto& from);
  LinearExpressionProto(LinearExpressionProto&& from) noexcept
    : LinearExpressionProto() {
    *this = ::std::move(from);
  }

  inline LinearExpressionProto& operator=(const LinearExpressionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearExpressionProto& operator=(LinearExpressionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearExpressionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearExpressionProto* internal_default_instance() {
    return reinterpret_cast<const LinearExpressionProto*>(
               &_LinearExpressionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LinearExpressionProto& a, LinearExpressionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearExpressionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearExpressionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearExpressionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearExpressionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinearExpressionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinearExpressionProto& from) {
    LinearExpressionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearExpressionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.math_opt.LinearExpressionProto";
  }
  protected:
  explicit LinearExpressionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kCoefficientsFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_ids() const;
  void _internal_add_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_ids();
  public:
  int64_t ids(int index) const;
  void set_ids(int index, int64_t value);
  void add_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_ids();

  // repeated double coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  double _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coefficients() const;
  void _internal_add_coefficients(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coefficients();
  public:
  double coefficients(int index) const;
  void set_coefficients(int index, double value);
  void add_coefficients(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coefficients();

  // double offset = 3;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.math_opt.LinearExpressionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coefficients_;
    double offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparseDoubleVectorProto

// repeated int64 ids = 1;
inline int SparseDoubleVectorProto::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int SparseDoubleVectorProto::ids_size() const {
  return _internal_ids_size();
}
inline void SparseDoubleVectorProto::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t SparseDoubleVectorProto::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t SparseDoubleVectorProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseDoubleVectorProto.ids)
  return _internal_ids(index);
}
inline void SparseDoubleVectorProto::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseDoubleVectorProto.ids)
}
inline void SparseDoubleVectorProto::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void SparseDoubleVectorProto::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseDoubleVectorProto.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleVectorProto::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleVectorProto::ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseDoubleVectorProto.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleVectorProto::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleVectorProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseDoubleVectorProto.ids)
  return _internal_mutable_ids();
}

// repeated double values = 2;
inline int SparseDoubleVectorProto::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SparseDoubleVectorProto::values_size() const {
  return _internal_values_size();
}
inline void SparseDoubleVectorProto::clear_values() {
  _impl_.values_.Clear();
}
inline double SparseDoubleVectorProto::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline double SparseDoubleVectorProto::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseDoubleVectorProto.values)
  return _internal_values(index);
}
inline void SparseDoubleVectorProto::set_values(int index, double value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseDoubleVectorProto.values)
}
inline void SparseDoubleVectorProto::_internal_add_values(double value) {
  _impl_.values_.Add(value);
}
inline void SparseDoubleVectorProto::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseDoubleVectorProto.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseDoubleVectorProto::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseDoubleVectorProto::values() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseDoubleVectorProto.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseDoubleVectorProto::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseDoubleVectorProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseDoubleVectorProto.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SparseBoolVectorProto

// repeated int64 ids = 1;
inline int SparseBoolVectorProto::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int SparseBoolVectorProto::ids_size() const {
  return _internal_ids_size();
}
inline void SparseBoolVectorProto::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t SparseBoolVectorProto::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t SparseBoolVectorProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseBoolVectorProto.ids)
  return _internal_ids(index);
}
inline void SparseBoolVectorProto::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseBoolVectorProto.ids)
}
inline void SparseBoolVectorProto::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void SparseBoolVectorProto::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseBoolVectorProto.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseBoolVectorProto::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseBoolVectorProto::ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseBoolVectorProto.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseBoolVectorProto::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseBoolVectorProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseBoolVectorProto.ids)
  return _internal_mutable_ids();
}

// repeated bool values = 2;
inline int SparseBoolVectorProto::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SparseBoolVectorProto::values_size() const {
  return _internal_values_size();
}
inline void SparseBoolVectorProto::clear_values() {
  _impl_.values_.Clear();
}
inline bool SparseBoolVectorProto::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline bool SparseBoolVectorProto::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseBoolVectorProto.values)
  return _internal_values(index);
}
inline void SparseBoolVectorProto::set_values(int index, bool value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseBoolVectorProto.values)
}
inline void SparseBoolVectorProto::_internal_add_values(bool value) {
  _impl_.values_.Add(value);
}
inline void SparseBoolVectorProto::add_values(bool value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseBoolVectorProto.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
SparseBoolVectorProto::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
SparseBoolVectorProto::values() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseBoolVectorProto.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
SparseBoolVectorProto::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
SparseBoolVectorProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseBoolVectorProto.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SparseInt32VectorProto

// repeated int64 ids = 1;
inline int SparseInt32VectorProto::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int SparseInt32VectorProto::ids_size() const {
  return _internal_ids_size();
}
inline void SparseInt32VectorProto::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t SparseInt32VectorProto::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t SparseInt32VectorProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseInt32VectorProto.ids)
  return _internal_ids(index);
}
inline void SparseInt32VectorProto::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseInt32VectorProto.ids)
}
inline void SparseInt32VectorProto::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void SparseInt32VectorProto::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseInt32VectorProto.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseInt32VectorProto::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseInt32VectorProto::ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseInt32VectorProto.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseInt32VectorProto::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseInt32VectorProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseInt32VectorProto.ids)
  return _internal_mutable_ids();
}

// repeated int32 values = 2;
inline int SparseInt32VectorProto::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int SparseInt32VectorProto::values_size() const {
  return _internal_values_size();
}
inline void SparseInt32VectorProto::clear_values() {
  _impl_.values_.Clear();
}
inline int32_t SparseInt32VectorProto::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int32_t SparseInt32VectorProto::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseInt32VectorProto.values)
  return _internal_values(index);
}
inline void SparseInt32VectorProto::set_values(int index, int32_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseInt32VectorProto.values)
}
inline void SparseInt32VectorProto::_internal_add_values(int32_t value) {
  _impl_.values_.Add(value);
}
inline void SparseInt32VectorProto::add_values(int32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseInt32VectorProto.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SparseInt32VectorProto::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SparseInt32VectorProto::values() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseInt32VectorProto.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SparseInt32VectorProto::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SparseInt32VectorProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseInt32VectorProto.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// SparseVectorFilterProto

// bool skip_zero_values = 1;
inline void SparseVectorFilterProto::clear_skip_zero_values() {
  _impl_.skip_zero_values_ = false;
}
inline bool SparseVectorFilterProto::_internal_skip_zero_values() const {
  return _impl_.skip_zero_values_;
}
inline bool SparseVectorFilterProto::skip_zero_values() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseVectorFilterProto.skip_zero_values)
  return _internal_skip_zero_values();
}
inline void SparseVectorFilterProto::_internal_set_skip_zero_values(bool value) {
  
  _impl_.skip_zero_values_ = value;
}
inline void SparseVectorFilterProto::set_skip_zero_values(bool value) {
  _internal_set_skip_zero_values(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseVectorFilterProto.skip_zero_values)
}

// bool filter_by_ids = 2;
inline void SparseVectorFilterProto::clear_filter_by_ids() {
  _impl_.filter_by_ids_ = false;
}
inline bool SparseVectorFilterProto::_internal_filter_by_ids() const {
  return _impl_.filter_by_ids_;
}
inline bool SparseVectorFilterProto::filter_by_ids() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseVectorFilterProto.filter_by_ids)
  return _internal_filter_by_ids();
}
inline void SparseVectorFilterProto::_internal_set_filter_by_ids(bool value) {
  
  _impl_.filter_by_ids_ = value;
}
inline void SparseVectorFilterProto::set_filter_by_ids(bool value) {
  _internal_set_filter_by_ids(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseVectorFilterProto.filter_by_ids)
}

// repeated int64 filtered_ids = 3;
inline int SparseVectorFilterProto::_internal_filtered_ids_size() const {
  return _impl_.filtered_ids_.size();
}
inline int SparseVectorFilterProto::filtered_ids_size() const {
  return _internal_filtered_ids_size();
}
inline void SparseVectorFilterProto::clear_filtered_ids() {
  _impl_.filtered_ids_.Clear();
}
inline int64_t SparseVectorFilterProto::_internal_filtered_ids(int index) const {
  return _impl_.filtered_ids_.Get(index);
}
inline int64_t SparseVectorFilterProto::filtered_ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseVectorFilterProto.filtered_ids)
  return _internal_filtered_ids(index);
}
inline void SparseVectorFilterProto::set_filtered_ids(int index, int64_t value) {
  _impl_.filtered_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseVectorFilterProto.filtered_ids)
}
inline void SparseVectorFilterProto::_internal_add_filtered_ids(int64_t value) {
  _impl_.filtered_ids_.Add(value);
}
inline void SparseVectorFilterProto::add_filtered_ids(int64_t value) {
  _internal_add_filtered_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseVectorFilterProto.filtered_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseVectorFilterProto::_internal_filtered_ids() const {
  return _impl_.filtered_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseVectorFilterProto::filtered_ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseVectorFilterProto.filtered_ids)
  return _internal_filtered_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseVectorFilterProto::_internal_mutable_filtered_ids() {
  return &_impl_.filtered_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseVectorFilterProto::mutable_filtered_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseVectorFilterProto.filtered_ids)
  return _internal_mutable_filtered_ids();
}

// -------------------------------------------------------------------

// SparseDoubleMatrixProto

// repeated int64 row_ids = 1;
inline int SparseDoubleMatrixProto::_internal_row_ids_size() const {
  return _impl_.row_ids_.size();
}
inline int SparseDoubleMatrixProto::row_ids_size() const {
  return _internal_row_ids_size();
}
inline void SparseDoubleMatrixProto::clear_row_ids() {
  _impl_.row_ids_.Clear();
}
inline int64_t SparseDoubleMatrixProto::_internal_row_ids(int index) const {
  return _impl_.row_ids_.Get(index);
}
inline int64_t SparseDoubleMatrixProto::row_ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseDoubleMatrixProto.row_ids)
  return _internal_row_ids(index);
}
inline void SparseDoubleMatrixProto::set_row_ids(int index, int64_t value) {
  _impl_.row_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseDoubleMatrixProto.row_ids)
}
inline void SparseDoubleMatrixProto::_internal_add_row_ids(int64_t value) {
  _impl_.row_ids_.Add(value);
}
inline void SparseDoubleMatrixProto::add_row_ids(int64_t value) {
  _internal_add_row_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseDoubleMatrixProto.row_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleMatrixProto::_internal_row_ids() const {
  return _impl_.row_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleMatrixProto::row_ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseDoubleMatrixProto.row_ids)
  return _internal_row_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleMatrixProto::_internal_mutable_row_ids() {
  return &_impl_.row_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleMatrixProto::mutable_row_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseDoubleMatrixProto.row_ids)
  return _internal_mutable_row_ids();
}

// repeated int64 column_ids = 2;
inline int SparseDoubleMatrixProto::_internal_column_ids_size() const {
  return _impl_.column_ids_.size();
}
inline int SparseDoubleMatrixProto::column_ids_size() const {
  return _internal_column_ids_size();
}
inline void SparseDoubleMatrixProto::clear_column_ids() {
  _impl_.column_ids_.Clear();
}
inline int64_t SparseDoubleMatrixProto::_internal_column_ids(int index) const {
  return _impl_.column_ids_.Get(index);
}
inline int64_t SparseDoubleMatrixProto::column_ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseDoubleMatrixProto.column_ids)
  return _internal_column_ids(index);
}
inline void SparseDoubleMatrixProto::set_column_ids(int index, int64_t value) {
  _impl_.column_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseDoubleMatrixProto.column_ids)
}
inline void SparseDoubleMatrixProto::_internal_add_column_ids(int64_t value) {
  _impl_.column_ids_.Add(value);
}
inline void SparseDoubleMatrixProto::add_column_ids(int64_t value) {
  _internal_add_column_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseDoubleMatrixProto.column_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleMatrixProto::_internal_column_ids() const {
  return _impl_.column_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SparseDoubleMatrixProto::column_ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseDoubleMatrixProto.column_ids)
  return _internal_column_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleMatrixProto::_internal_mutable_column_ids() {
  return &_impl_.column_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SparseDoubleMatrixProto::mutable_column_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseDoubleMatrixProto.column_ids)
  return _internal_mutable_column_ids();
}

// repeated double coefficients = 3;
inline int SparseDoubleMatrixProto::_internal_coefficients_size() const {
  return _impl_.coefficients_.size();
}
inline int SparseDoubleMatrixProto::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void SparseDoubleMatrixProto::clear_coefficients() {
  _impl_.coefficients_.Clear();
}
inline double SparseDoubleMatrixProto::_internal_coefficients(int index) const {
  return _impl_.coefficients_.Get(index);
}
inline double SparseDoubleMatrixProto::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SparseDoubleMatrixProto.coefficients)
  return _internal_coefficients(index);
}
inline void SparseDoubleMatrixProto::set_coefficients(int index, double value) {
  _impl_.coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SparseDoubleMatrixProto.coefficients)
}
inline void SparseDoubleMatrixProto::_internal_add_coefficients(double value) {
  _impl_.coefficients_.Add(value);
}
inline void SparseDoubleMatrixProto::add_coefficients(double value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.SparseDoubleMatrixProto.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseDoubleMatrixProto::_internal_coefficients() const {
  return _impl_.coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseDoubleMatrixProto::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.SparseDoubleMatrixProto.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseDoubleMatrixProto::_internal_mutable_coefficients() {
  return &_impl_.coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseDoubleMatrixProto::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.SparseDoubleMatrixProto.coefficients)
  return _internal_mutable_coefficients();
}

// -------------------------------------------------------------------

// LinearExpressionProto

// repeated int64 ids = 1;
inline int LinearExpressionProto::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int LinearExpressionProto::ids_size() const {
  return _internal_ids_size();
}
inline void LinearExpressionProto::clear_ids() {
  _impl_.ids_.Clear();
}
inline int64_t LinearExpressionProto::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int64_t LinearExpressionProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.LinearExpressionProto.ids)
  return _internal_ids(index);
}
inline void LinearExpressionProto::set_ids(int index, int64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.LinearExpressionProto.ids)
}
inline void LinearExpressionProto::_internal_add_ids(int64_t value) {
  _impl_.ids_.Add(value);
}
inline void LinearExpressionProto::add_ids(int64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.LinearExpressionProto.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LinearExpressionProto::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
LinearExpressionProto::ids() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.LinearExpressionProto.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LinearExpressionProto::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
LinearExpressionProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.LinearExpressionProto.ids)
  return _internal_mutable_ids();
}

// repeated double coefficients = 2;
inline int LinearExpressionProto::_internal_coefficients_size() const {
  return _impl_.coefficients_.size();
}
inline int LinearExpressionProto::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void LinearExpressionProto::clear_coefficients() {
  _impl_.coefficients_.Clear();
}
inline double LinearExpressionProto::_internal_coefficients(int index) const {
  return _impl_.coefficients_.Get(index);
}
inline double LinearExpressionProto::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.LinearExpressionProto.coefficients)
  return _internal_coefficients(index);
}
inline void LinearExpressionProto::set_coefficients(int index, double value) {
  _impl_.coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.LinearExpressionProto.coefficients)
}
inline void LinearExpressionProto::_internal_add_coefficients(double value) {
  _impl_.coefficients_.Add(value);
}
inline void LinearExpressionProto::add_coefficients(double value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:operations_research.math_opt.LinearExpressionProto.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LinearExpressionProto::_internal_coefficients() const {
  return _impl_.coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LinearExpressionProto::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.math_opt.LinearExpressionProto.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LinearExpressionProto::_internal_mutable_coefficients() {
  return &_impl_.coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LinearExpressionProto::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.math_opt.LinearExpressionProto.coefficients)
  return _internal_mutable_coefficients();
}

// double offset = 3;
inline void LinearExpressionProto::clear_offset() {
  _impl_.offset_ = 0;
}
inline double LinearExpressionProto::_internal_offset() const {
  return _impl_.offset_;
}
inline double LinearExpressionProto::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.LinearExpressionProto.offset)
  return _internal_offset();
}
inline void LinearExpressionProto::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void LinearExpressionProto::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.LinearExpressionProto.offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace math_opt
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fsparse_5fcontainers_2eproto
