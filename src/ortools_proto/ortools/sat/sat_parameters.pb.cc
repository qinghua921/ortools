// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/sat_parameters.proto

#include "ortools/sat/sat_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace sat {
PROTOBUF_CONSTEXPR SatParameters::SatParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.restart_algorithms_)*/{}
  , /*decltype(_impl_.subsolvers_)*/{}
  , /*decltype(_impl_.ignore_subsolvers_)*/{}
  , /*decltype(_impl_.subsolver_params_)*/{}
  , /*decltype(_impl_.extra_subsolvers_)*/{}
  , /*decltype(_impl_.default_restart_algorithms_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_variable_order_)*/0
  , /*decltype(_impl_.clause_cleanup_target_)*/0
  , /*decltype(_impl_.random_branches_ratio_)*/0
  , /*decltype(_impl_.random_polarity_ratio_)*/0
  , /*decltype(_impl_.max_sat_assumption_order_)*/0
  , /*decltype(_impl_.clause_cleanup_protection_)*/0
  , /*decltype(_impl_.clause_cleanup_ordering_)*/0
  , /*decltype(_impl_.num_conflicts_before_strategy_changes_)*/0
  , /*decltype(_impl_.strategy_change_increase_ratio_)*/0
  , /*decltype(_impl_.initial_variables_activity_)*/0
  , /*decltype(_impl_.search_branching_)*/0
  , /*decltype(_impl_.use_erwa_heuristic_)*/false
  , /*decltype(_impl_.also_bump_variables_in_conflict_reasons_)*/false
  , /*decltype(_impl_.use_blocking_restart_)*/false
  , /*decltype(_impl_.permute_variable_randomly_)*/false
  , /*decltype(_impl_.search_randomization_tolerance_)*/int64_t{0}
  , /*decltype(_impl_.num_search_workers_)*/0
  , /*decltype(_impl_.use_lns_only_)*/false
  , /*decltype(_impl_.diversify_lns_params_)*/false
  , /*decltype(_impl_.randomize_search_)*/false
  , /*decltype(_impl_.use_optional_variables_)*/false
  , /*decltype(_impl_.use_pb_resolution_)*/false
  , /*decltype(_impl_.minimize_reduction_during_pb_resolution_)*/false
  , /*decltype(_impl_.use_sat_inprocessing_)*/false
  , /*decltype(_impl_.detect_table_with_cost_)*/false
  , /*decltype(_impl_.optimize_with_lb_tree_search_)*/false
  , /*decltype(_impl_.optimize_with_max_hs_)*/false
  , /*decltype(_impl_.enumerate_all_solutions_)*/false
  , /*decltype(_impl_.keep_all_feasible_solutions_in_presolve_)*/false
  , /*decltype(_impl_.interleave_batch_size_)*/0
  , /*decltype(_impl_.interleave_search_)*/false
  , /*decltype(_impl_.debug_postsolve_with_full_solver_)*/false
  , /*decltype(_impl_.debug_crash_on_bad_hint_)*/false
  , /*decltype(_impl_.max_sat_reverse_assumption_order_)*/false
  , /*decltype(_impl_.probing_period_at_root_)*/int64_t{0}
  , /*decltype(_impl_.fill_tightened_domains_in_response_)*/false
  , /*decltype(_impl_.fill_additional_solutions_in_response_)*/false
  , /*decltype(_impl_.stop_after_first_solution_)*/false
  , /*decltype(_impl_.stop_after_presolve_)*/false
  , /*decltype(_impl_.permute_presolve_constraint_order_)*/false
  , /*decltype(_impl_.use_absl_random_)*/false
  , /*decltype(_impl_.log_search_progress_)*/false
  , /*decltype(_impl_.log_to_response_)*/false
  , /*decltype(_impl_.use_strong_propagation_in_disjunctive_)*/false
  , /*decltype(_impl_.use_overload_checker_in_cumulative_)*/false
  , /*decltype(_impl_.use_timetable_edge_finding_in_cumulative_)*/false
  , /*decltype(_impl_.use_hard_precedences_in_cumulative_)*/false
  , /*decltype(_impl_.debug_max_num_presolve_operations_)*/0
  , /*decltype(_impl_.relative_gap_limit_)*/0
  , /*decltype(_impl_.exploit_relaxation_solution_)*/false
  , /*decltype(_impl_.use_probing_search_)*/false
  , /*decltype(_impl_.use_objective_lb_search_)*/false
  , /*decltype(_impl_.optimize_with_core_)*/false
  , /*decltype(_impl_.use_branching_in_lp_)*/false
  , /*decltype(_impl_.use_combined_no_overlap_)*/false
  , /*decltype(_impl_.polish_lp_solution_)*/false
  , /*decltype(_impl_.new_linear_propagation_)*/false
  , /*decltype(_impl_.add_objective_cut_)*/false
  , /*decltype(_impl_.repair_hint_)*/false
  , /*decltype(_impl_.fix_variables_to_their_hinted_value_)*/false
  , /*decltype(_impl_.exploit_best_solution_)*/false
  , /*decltype(_impl_.exploit_all_precedences_)*/false
  , /*decltype(_impl_.use_timetabling_in_no_overlap_2d_)*/false
  , /*decltype(_impl_.use_energetic_reasoning_in_no_overlap_2d_)*/false
  , /*decltype(_impl_.only_add_cuts_at_level_zero_)*/false
  , /*decltype(_impl_.expand_alldiff_constraints_)*/false
  , /*decltype(_impl_.disable_constraint_expansion_)*/false
  , /*decltype(_impl_.encode_complex_linear_constraint_with_integer_)*/false
  , /*decltype(_impl_.presolve_extract_integer_enforcement_)*/false
  , /*decltype(_impl_.num_workers_)*/0
  , /*decltype(_impl_.mip_scale_large_domain_)*/false
  , /*decltype(_impl_.only_solve_ip_)*/false
  , /*decltype(_impl_.initial_polarity_)*/1
  , /*decltype(_impl_.minimization_algorithm_)*/2
  , /*decltype(_impl_.variable_activity_decay_)*/0.8
  , /*decltype(_impl_.max_variable_activity_value_)*/1e+100
  , /*decltype(_impl_.clause_activity_decay_)*/0.999
  , /*decltype(_impl_.clause_cleanup_period_)*/10000
  , /*decltype(_impl_.glucose_decay_increment_period_)*/5000
  , /*decltype(_impl_.max_clause_activity_value_)*/1e+020
  , /*decltype(_impl_.glucose_max_decay_)*/0.95
  , /*decltype(_impl_.glucose_decay_increment_)*/0.01
  , /*decltype(_impl_.restart_period_)*/50
  , /*decltype(_impl_.random_seed_)*/1
  , /*decltype(_impl_.max_time_in_seconds_)*/std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.max_number_of_conflicts_)*/int64_t{9223372036854775807}
  , /*decltype(_impl_.max_memory_in_mb_)*/int64_t{10000}
  , /*decltype(_impl_.binary_minimization_algorithm_)*/1
  , /*decltype(_impl_.pb_cleanup_increment_)*/200
  , /*decltype(_impl_.pb_cleanup_ratio_)*/0.5
  , /*decltype(_impl_.max_sat_stratification_)*/1
  , /*decltype(_impl_.presolve_bve_threshold_)*/500
  , /*decltype(_impl_.presolve_probing_deterministic_time_limit_)*/30
  , /*decltype(_impl_.presolve_bve_clause_weight_)*/3
  , /*decltype(_impl_.clause_cleanup_lbd_bound_)*/5
  , /*decltype(_impl_.restart_dl_average_ratio_)*/1
  , /*decltype(_impl_.restart_running_window_size_)*/50
  , /*decltype(_impl_.use_optimization_hints_)*/true
  , /*decltype(_impl_.minimize_core_)*/true
  , /*decltype(_impl_.find_multiple_cores_)*/true
  , /*decltype(_impl_.cover_optimization_)*/true
  , /*decltype(_impl_.blocking_restart_multiplier_)*/1.4
  , /*decltype(_impl_.max_deterministic_time_)*/std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.blocking_restart_window_size_)*/5000
  , /*decltype(_impl_.presolve_bva_threshold_)*/1
  , /*decltype(_impl_.restart_lbd_average_ratio_)*/1
  , /*decltype(_impl_.count_assumption_levels_in_lbd_)*/true
  , /*decltype(_impl_.presolve_blocked_clause_)*/true
  , /*decltype(_impl_.presolve_use_bva_)*/true
  , /*decltype(_impl_.cp_model_presolve_)*/true
  , /*decltype(_impl_.linearization_level_)*/1
  , /*decltype(_impl_.max_num_cuts_)*/10000
  , /*decltype(_impl_.minimize_with_propagation_restart_period_)*/10
  , /*decltype(_impl_.minimize_with_propagation_num_decisions_)*/1000
  , /*decltype(_impl_.binary_search_num_conflicts_)*/-1
  , /*decltype(_impl_.boolean_encoding_level_)*/1
  , /*decltype(_impl_.cp_model_probing_level_)*/2
  , /*decltype(_impl_.min_orthogonality_for_lp_constraints_)*/0.05
  , /*decltype(_impl_.add_lp_constraints_lazily_)*/true
  , /*decltype(_impl_.exploit_integer_lp_solution_)*/true
  , /*decltype(_impl_.exploit_all_lp_solution_)*/true
  , /*decltype(_impl_.exploit_objective_)*/true
  , /*decltype(_impl_.use_phase_saving_)*/true
  , /*decltype(_impl_.subsumption_during_conflict_analysis_)*/true
  , /*decltype(_impl_.log_subsolver_statistics_)*/true
  , /*decltype(_impl_.log_to_stdout_)*/true
  , /*decltype(_impl_.max_integer_rounding_scaling_)*/600
  , /*decltype(_impl_.max_consecutive_inactive_count_)*/100
  , /*decltype(_impl_.use_precedences_in_disjunctive_constraint_)*/true
  , /*decltype(_impl_.use_disjunctive_constraint_in_cumulative_)*/true
  , /*decltype(_impl_.use_dual_scheduling_heuristics_)*/true
  , /*decltype(_impl_.add_cg_cuts_)*/true
  , /*decltype(_impl_.new_constraints_batch_size_)*/50
  , /*decltype(_impl_.pseudo_cost_reliability_threshold_)*/int64_t{100}
  , /*decltype(_impl_.mip_max_bound_)*/10000000
  , /*decltype(_impl_.mip_var_scaling_)*/1
  , /*decltype(_impl_.mip_wanted_precision_)*/1e-006
  , /*decltype(_impl_.mip_check_precision_)*/0.0001
  , /*decltype(_impl_.mip_max_activity_exponent_)*/53
  , /*decltype(_impl_.use_shaving_in_probing_search_)*/true
  , /*decltype(_impl_.instantiate_all_variables_)*/true
  , /*decltype(_impl_.auto_detect_greater_than_at_least_one_of_)*/true
  , /*decltype(_impl_.use_rins_lns_)*/true
  , /*decltype(_impl_.max_presolve_iterations_)*/3
  , /*decltype(_impl_.use_feasibility_pump_)*/true
  , /*decltype(_impl_.use_exact_lp_reason_)*/true
  , /*decltype(_impl_.catch_sigint_signal_)*/true
  , /*decltype(_impl_.use_implied_bounds_)*/true
  , /*decltype(_impl_.merge_no_overlap_work_limit_)*/1000000000000
  , /*decltype(_impl_.merge_at_most_one_work_limit_)*/100000000
  , /*decltype(_impl_.presolve_substitution_level_)*/1
  , /*decltype(_impl_.max_all_diff_cut_size_)*/64
  , /*decltype(_impl_.hint_conflict_limit_)*/10
  , /*decltype(_impl_.add_mir_cuts_)*/true
  , /*decltype(_impl_.add_zero_half_cuts_)*/true
  , /*decltype(_impl_.add_clique_cuts_)*/true
  , /*decltype(_impl_.add_lin_max_cuts_)*/true
  , /*decltype(_impl_.cut_max_active_count_value_)*/10000000000
  , /*decltype(_impl_.max_cut_rounds_at_level_zero_)*/1
  , /*decltype(_impl_.cut_cleanup_target_)*/1000
  , /*decltype(_impl_.cut_active_count_decay_)*/0.8
  , /*decltype(_impl_.absolute_gap_limit_)*/0.0001
  , /*decltype(_impl_.fp_rounding_)*/2
  , /*decltype(_impl_.find_big_linear_overlap_)*/true
  , /*decltype(_impl_.share_objective_bounds_)*/true
  , /*decltype(_impl_.share_level_zero_bounds_)*/true
  , /*decltype(_impl_.share_binary_clauses_)*/true
  , /*decltype(_impl_.polarity_rephase_increment_)*/1000
  , /*decltype(_impl_.cp_model_use_sat_presolve_)*/true
  , /*decltype(_impl_.expand_reservoir_constraints_)*/true
  , /*decltype(_impl_.ignore_names_)*/true
  , /*decltype(_impl_.infer_all_diffs_)*/true
  , /*decltype(_impl_.convert_intervals_)*/true
  , /*decltype(_impl_.mip_automatically_scale_variables_)*/true
  , /*decltype(_impl_.mip_compute_true_objective_bound_)*/true
  , /*decltype(_impl_.symmetry_level_)*/2
  , /*decltype(_impl_.clause_cleanup_ratio_)*/0.5
  , /*decltype(_impl_.max_domain_size_when_encoding_eq_neq_constraints_)*/16
  , /*decltype(_impl_.solution_pool_size_)*/3
  , /*decltype(_impl_.mip_max_valid_magnitude_)*/1e+030
  , /*decltype(_impl_.presolve_inclusion_work_limit_)*/int64_t{100000000}
  , /*decltype(_impl_.cut_level_)*/1
  , /*decltype(_impl_.min_num_lns_workers_)*/2
  , /*decltype(_impl_.shaving_search_deterministic_time_)*/0.001
  , /*decltype(_impl_.log_frequency_in_seconds_)*/-1
  , /*decltype(_impl_.model_reduction_log_frequency_in_seconds_)*/5
  , /*decltype(_impl_.propagation_loop_detection_factor_)*/10
  , /*decltype(_impl_.table_compression_level_)*/2
  , /*decltype(_impl_.root_lp_iterations_)*/2000
  , /*decltype(_impl_.probing_deterministic_time_limit_)*/1
  , /*decltype(_impl_.max_size_to_create_precedence_literals_in_disjunctive_)*/60
  , /*decltype(_impl_.objective_lns_min_size_)*/2147483647
  , /*decltype(_impl_.mip_drop_tolerance_)*/1e-016} {}
struct SatParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SatParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SatParametersDefaultTypeInternal() {}
  union {
    SatParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SatParametersDefaultTypeInternal _SatParameters_default_instance_;
}  // namespace sat
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fsat_2fsat_5fparameters_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.preferred_variable_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.initial_polarity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_phase_saving_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.polarity_rephase_increment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.random_polarity_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.random_branches_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_erwa_heuristic_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.initial_variables_activity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.also_bump_variables_in_conflict_reasons_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.minimization_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.binary_minimization_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.subsumption_during_conflict_analysis_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_protection_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_lbd_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_cleanup_ordering_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.pb_cleanup_increment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.pb_cleanup_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.minimize_with_propagation_restart_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.minimize_with_propagation_num_decisions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.variable_activity_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_variable_activity_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.glucose_max_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.glucose_decay_increment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.glucose_decay_increment_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.clause_activity_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_clause_activity_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.restart_algorithms_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.default_restart_algorithms_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.restart_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.restart_running_window_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.restart_dl_average_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.restart_lbd_average_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_blocking_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.blocking_restart_window_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.blocking_restart_multiplier_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.num_conflicts_before_strategy_changes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.strategy_change_increase_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_time_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_number_of_conflicts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_memory_in_mb_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.absolute_gap_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.relative_gap_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.random_seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.permute_variable_randomly_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.permute_presolve_constraint_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_absl_random_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_search_progress_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_frequency_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.model_reduction_log_frequency_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_subsolver_statistics_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_prefix_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_to_stdout_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.log_to_response_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_pb_resolution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.minimize_reduction_during_pb_resolution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.count_assumption_levels_in_lbd_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_bve_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_bve_clause_weight_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.probing_deterministic_time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_probing_deterministic_time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_blocked_clause_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_use_bva_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_bva_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_presolve_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cp_model_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cp_model_probing_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cp_model_use_sat_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_sat_inprocessing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.detect_table_with_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.table_compression_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.expand_alldiff_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.expand_reservoir_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.disable_constraint_expansion_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.encode_complex_linear_constraint_with_integer_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.merge_no_overlap_work_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.merge_at_most_one_work_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_substitution_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_extract_integer_enforcement_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.presolve_inclusion_work_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.ignore_names_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.infer_all_diffs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.find_big_linear_overlap_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.num_workers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.num_search_workers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.min_num_lns_workers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.subsolvers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.extra_subsolvers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.ignore_subsolvers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.subsolver_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.interleave_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.interleave_batch_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.share_objective_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.share_level_zero_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.share_binary_clauses_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.debug_postsolve_with_full_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.debug_max_num_presolve_operations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.debug_crash_on_bad_hint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_optimization_hints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.minimize_core_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.find_multiple_cores_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cover_optimization_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_sat_assumption_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_sat_reverse_assumption_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_sat_stratification_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.propagation_loop_detection_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_precedences_in_disjunctive_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_size_to_create_precedence_literals_in_disjunctive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_strong_propagation_in_disjunctive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_overload_checker_in_cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_timetable_edge_finding_in_cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_hard_precedences_in_cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_all_precedences_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_disjunctive_constraint_in_cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_timetabling_in_no_overlap_2d_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_energetic_reasoning_in_no_overlap_2d_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_dual_scheduling_heuristics_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.linearization_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.boolean_encoding_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_domain_size_when_encoding_eq_neq_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_num_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cut_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.only_add_cuts_at_level_zero_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_objective_cut_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_cg_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_mir_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_zero_half_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_clique_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_all_diff_cut_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_lin_max_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_integer_rounding_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.add_lp_constraints_lazily_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.root_lp_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.min_orthogonality_for_lp_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_cut_rounds_at_level_zero_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.max_consecutive_inactive_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cut_max_active_count_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cut_active_count_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.cut_cleanup_target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.new_constraints_batch_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.search_branching_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.hint_conflict_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.repair_hint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.fix_variables_to_their_hinted_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_integer_lp_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_all_lp_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_best_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_relaxation_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.exploit_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.probing_period_at_root_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_probing_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_shaving_in_probing_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.shaving_search_deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_objective_lb_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.pseudo_cost_reliability_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.optimize_with_core_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.optimize_with_lb_tree_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.binary_search_num_conflicts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.optimize_with_max_hs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.enumerate_all_solutions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.keep_all_feasible_solutions_in_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.fill_tightened_domains_in_response_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.fill_additional_solutions_in_response_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.instantiate_all_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.auto_detect_greater_than_at_least_one_of_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.stop_after_first_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.stop_after_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_lns_only_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.solution_pool_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_rins_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_feasibility_pump_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.fp_rounding_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.objective_lns_min_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.diversify_lns_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.randomize_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.search_randomization_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_optional_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_exact_lp_reason_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_branching_in_lp_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_combined_no_overlap_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.catch_sigint_signal_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.use_implied_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.polish_lp_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.convert_intervals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.symmetry_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.new_linear_propagation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_max_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_var_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_scale_large_domain_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_automatically_scale_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.only_solve_ip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_wanted_precision_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_max_activity_exponent_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_check_precision_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_compute_true_objective_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_max_valid_magnitude_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _impl_.mip_drop_tolerance_),
  1,
  3,
  75,
  125,
  170,
  6,
  5,
  14,
  12,
  15,
  76,
  90,
  126,
  80,
  4,
  179,
  8,
  97,
  9,
  91,
  92,
  115,
  116,
  77,
  78,
  83,
  84,
  81,
  79,
  82,
  ~0u,
  0,
  85,
  99,
  98,
  108,
  16,
  106,
  104,
  10,
  11,
  87,
  105,
  88,
  89,
  164,
  51,
  86,
  17,
  42,
  43,
  44,
  187,
  188,
  127,
  2,
  128,
  45,
  24,
  25,
  109,
  94,
  96,
  192,
  95,
  110,
  111,
  107,
  146,
  112,
  119,
  171,
  26,
  27,
  190,
  68,
  172,
  69,
  70,
  151,
  152,
  153,
  71,
  183,
  173,
  174,
  166,
  72,
  19,
  185,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  33,
  32,
  167,
  168,
  169,
  34,
  50,
  35,
  100,
  101,
  102,
  103,
  7,
  36,
  93,
  189,
  131,
  193,
  46,
  47,
  48,
  49,
  64,
  132,
  65,
  66,
  133,
  113,
  118,
  180,
  114,
  184,
  67,
  60,
  134,
  156,
  157,
  158,
  154,
  159,
  129,
  121,
  191,
  120,
  161,
  130,
  160,
  163,
  162,
  135,
  13,
  155,
  61,
  62,
  122,
  123,
  63,
  52,
  124,
  37,
  53,
  142,
  186,
  54,
  136,
  55,
  28,
  117,
  29,
  30,
  31,
  38,
  39,
  143,
  144,
  40,
  41,
  20,
  181,
  145,
  147,
  165,
  194,
  21,
  22,
  18,
  23,
  148,
  56,
  57,
  149,
  150,
  58,
  175,
  178,
  59,
  137,
  138,
  73,
  176,
  74,
  139,
  141,
  140,
  177,
  182,
  195,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 207, -1, sizeof(::operations_research::sat::SatParameters)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::sat::_SatParameters_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fsat_2fsat_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ortools/sat/sat_parameters.proto\022\027oper"
  "ations_research.sat\"\210P\n\rSatParameters\022\017\n"
  "\004name\030\253\001 \001(\t:\000\022`\n\030preferred_variable_ord"
  "er\030\001 \001(\01624.operations_research.sat.SatPa"
  "rameters.VariableOrder:\010IN_ORDER\022Y\n\020init"
  "ial_polarity\030\002 \001(\0162/.operations_research"
  ".sat.SatParameters.Polarity:\016POLARITY_FA"
  "LSE\022\036\n\020use_phase_saving\030, \001(\010:\004true\022)\n\032p"
  "olarity_rephase_increment\030\250\001 \001(\005:\0041000\022 "
  "\n\025random_polarity_ratio\030- \001(\001:\0010\022 \n\025rand"
  "om_branches_ratio\030  \001(\001:\0010\022!\n\022use_erwa_h"
  "euristic\030K \001(\010:\005false\022%\n\032initial_variabl"
  "es_activity\030L \001(\001:\0010\0226\n\'also_bump_variab"
  "les_in_conflict_reasons\030M \001(\010:\005false\022o\n\026"
  "minimization_algorithm\030\004 \001(\0162D.operation"
  "s_research.sat.SatParameters.ConflictMin"
  "imizationAlgorithm:\tRECURSIVE\022\202\001\n\035binary"
  "_minimization_algorithm\030\" \001(\0162@.operatio"
  "ns_research.sat.SatParameters.BinaryMini"
  "zationAlgorithm:\031BINARY_MINIMIZATION_FIR"
  "ST\0222\n$subsumption_during_conflict_analys"
  "is\0308 \001(\010:\004true\022$\n\025clause_cleanup_period\030"
  "\013 \001(\005:\00510000\022 \n\025clause_cleanup_target\030\r "
  "\001(\005:\0010\022\"\n\024clause_cleanup_ratio\030\276\001 \001(\001:\0030"
  ".5\022k\n\031clause_cleanup_protection\030: \001(\01627."
  "operations_research.sat.SatParameters.Cl"
  "auseProtection:\017PROTECTION_NONE\022#\n\030claus"
  "e_cleanup_lbd_bound\030; \001(\005:\0015\022g\n\027clause_c"
  "leanup_ordering\030< \001(\01625.operations_resea"
  "rch.sat.SatParameters.ClauseOrdering:\017CL"
  "AUSE_ACTIVITY\022!\n\024pb_cleanup_increment\030. "
  "\001(\005:\003200\022\035\n\020pb_cleanup_ratio\030/ \001(\001:\0030.5\022"
  "4\n(minimize_with_propagation_restart_per"
  "iod\030` \001(\005:\00210\0225\n\'minimize_with_propagati"
  "on_num_decisions\030a \001(\005:\0041000\022$\n\027variable"
  "_activity_decay\030\017 \001(\001:\0030.8\022+\n\033max_variab"
  "le_activity_value\030\020 \001(\001:\0061e+100\022\037\n\021gluco"
  "se_max_decay\030\026 \001(\001:\0040.95\022%\n\027glucose_deca"
  "y_increment\030\027 \001(\001:\0040.01\022,\n\036glucose_decay"
  "_increment_period\030\030 \001(\005:\0045000\022$\n\025clause_"
  "activity_decay\030\021 \001(\001:\0050.999\022)\n\031max_claus"
  "e_activity_value\030\022 \001(\001:\0061e+020\022S\n\022restar"
  "t_algorithms\030= \003(\01627.operations_research"
  ".sat.SatParameters.RestartAlgorithm\022e\n\032d"
  "efault_restart_algorithms\030F \001(\t:ALUBY_RE"
  "START,LBD_MOVING_AVERAGE_RESTART,DL_MOVI"
  "NG_AVERAGE_RESTART\022\032\n\016restart_period\030\036 \001"
  "(\005:\00250\022\'\n\033restart_running_window_size\030> "
  "\001(\005:\00250\022#\n\030restart_dl_average_ratio\030\? \001("
  "\001:\0011\022$\n\031restart_lbd_average_ratio\030G \001(\001:"
  "\0011\022#\n\024use_blocking_restart\030@ \001(\010:\005false\022"
  "*\n\034blocking_restart_window_size\030A \001(\005:\0045"
  "000\022(\n\033blocking_restart_multiplier\030B \001(\001"
  ":\0031.4\0220\n%num_conflicts_before_strategy_c"
  "hanges\030D \001(\005:\0010\022)\n\036strategy_change_incre"
  "ase_ratio\030E \001(\001:\0010\022 \n\023max_time_in_second"
  "s\030$ \001(\001:\003inf\022#\n\026max_deterministic_time\030C"
  " \001(\001:\003inf\0224\n\027max_number_of_conflicts\030% \001"
  "(\003:\0239223372036854775807\022\037\n\020max_memory_in"
  "_mb\030( \001(\003:\00510000\022#\n\022absolute_gap_limit\030\237"
  "\001 \001(\001:\0060.0001\022\036\n\022relative_gap_limit\030\240\001 \001"
  "(\001:\0010\022\026\n\013random_seed\030\037 \001(\005:\0011\022)\n\031permute"
  "_variable_randomly\030\262\001 \001(\010:\005false\0221\n!perm"
  "ute_presolve_constraint_order\030\263\001 \001(\010:\005fa"
  "lse\022\037\n\017use_absl_random\030\264\001 \001(\010:\005false\022\"\n\023"
  "log_search_progress\030) \001(\010:\005false\022%\n\030log_"
  "frequency_in_seconds\030\324\001 \001(\001:\002-1\0224\n(model"
  "_reduction_log_frequency_in_seconds\030\332\001 \001"
  "(\001:\0015\022\'\n\030log_subsolver_statistics\030\275\001 \001(\010"
  ":\004true\022\025\n\nlog_prefix\030\271\001 \001(\t:\000\022\034\n\rlog_to_"
  "stdout\030\272\001 \001(\010:\004true\022\037\n\017log_to_response\030\273"
  "\001 \001(\010:\005false\022 \n\021use_pb_resolution\030+ \001(\010:"
  "\005false\0226\n\'minimize_reduction_during_pb_r"
  "esolution\0300 \001(\010:\005false\022,\n\036count_assumpti"
  "on_levels_in_lbd\0301 \001(\010:\004true\022#\n\026presolve"
  "_bve_threshold\0306 \001(\005:\003500\022%\n\032presolve_bv"
  "e_clause_weight\0307 \001(\005:\0013\022,\n probing_dete"
  "rministic_time_limit\030\342\001 \001(\001:\0011\0225\n)presol"
  "ve_probing_deterministic_time_limit\0309 \001("
  "\001:\00230\022%\n\027presolve_blocked_clause\030X \001(\010:\004"
  "true\022\036\n\020presolve_use_bva\030H \001(\010:\004true\022!\n\026"
  "presolve_bva_threshold\030I \001(\005:\0011\022#\n\027max_p"
  "resolve_iterations\030\212\001 \001(\005:\0013\022\037\n\021cp_model"
  "_presolve\030V \001(\010:\004true\022!\n\026cp_model_probin"
  "g_level\030n \001(\005:\0012\022\'\n\031cp_model_use_sat_pre"
  "solve\030] \001(\010:\004true\022$\n\024use_sat_inprocessin"
  "g\030\243\001 \001(\010:\005false\022&\n\026detect_table_with_cos"
  "t\030\330\001 \001(\010:\005false\022#\n\027table_compression_lev"
  "el\030\331\001 \001(\005:\0012\022*\n\032expand_alldiff_constrain"
  "ts\030\252\001 \001(\010:\005false\022+\n\034expand_reservoir_con"
  "straints\030\266\001 \001(\010:\004true\022,\n\034disable_constra"
  "int_expansion\030\265\001 \001(\010:\005false\022=\n-encode_co"
  "mplex_linear_constraint_with_integer\030\337\001 "
  "\001(\010:\005false\0223\n\033merge_no_overlap_work_limi"
  "t\030\221\001 \001(\001:\r1000000000000\0220\n\034merge_at_most"
  "_one_work_limit\030\222\001 \001(\001:\t100000000\022\'\n\033pre"
  "solve_substitution_level\030\223\001 \001(\005:\0011\0224\n$pr"
  "esolve_extract_integer_enforcement\030\256\001 \001("
  "\010:\005false\0221\n\035presolve_inclusion_work_limi"
  "t\030\311\001 \001(\003:\t100000000\022\033\n\014ignore_names\030\312\001 \001"
  "(\010:\004true\022\036\n\017infer_all_diffs\030\351\001 \001(\010:\004true"
  "\022&\n\027find_big_linear_overlap\030\352\001 \001(\010:\004true"
  "\022\027\n\013num_workers\030\316\001 \001(\005:\0010\022\035\n\022num_search_"
  "workers\030d \001(\005:\0010\022\037\n\023min_num_lns_workers\030"
  "\323\001 \001(\005:\0012\022\023\n\nsubsolvers\030\317\001 \003(\t\022\031\n\020extra_"
  "subsolvers\030\333\001 \003(\t\022\032\n\021ignore_subsolvers\030\321"
  "\001 \003(\t\022A\n\020subsolver_params\030\322\001 \003(\0132&.opera"
  "tions_research.sat.SatParameters\022!\n\021inte"
  "rleave_search\030\210\001 \001(\010:\005false\022!\n\025interleav"
  "e_batch_size\030\206\001 \001(\005:\0010\022$\n\026share_objectiv"
  "e_bounds\030q \001(\010:\004true\022%\n\027share_level_zero"
  "_bounds\030r \001(\010:\004true\022#\n\024share_binary_clau"
  "ses\030\313\001 \001(\010:\004true\0220\n debug_postsolve_with"
  "_full_solver\030\242\001 \001(\010:\005false\022-\n!debug_max_"
  "num_presolve_operations\030\227\001 \001(\005:\0010\022\'\n\027deb"
  "ug_crash_on_bad_hint\030\303\001 \001(\010:\005false\022$\n\026us"
  "e_optimization_hints\030# \001(\010:\004true\022\033\n\rmini"
  "mize_core\0302 \001(\010:\004true\022!\n\023find_multiple_c"
  "ores\030T \001(\010:\004true\022 \n\022cover_optimization\030Y"
  " \001(\010:\004true\022x\n\030max_sat_assumption_order\0303"
  " \001(\0162<.operations_research.sat.SatParame"
  "ters.MaxSatAssumptionOrder:\030DEFAULT_ASSU"
  "MPTION_ORDER\022/\n max_sat_reverse_assumpti"
  "on_order\0304 \001(\010:\005false\022|\n\026max_sat_stratif"
  "ication\0305 \001(\0162D.operations_research.sat."
  "SatParameters.MaxSatStratificationAlgori"
  "thm:\026STRATIFICATION_DESCENT\022.\n!propagati"
  "on_loop_detection_factor\030\335\001 \001(\001:\00210\0227\n)u"
  "se_precedences_in_disjunctive_constraint"
  "\030J \001(\010:\004true\022B\n5max_size_to_create_prece"
  "dence_literals_in_disjunctive\030\345\001 \001(\005:\00260"
  "\0225\n%use_strong_propagation_in_disjunctiv"
  "e\030\346\001 \001(\010:\005false\0221\n\"use_overload_checker_"
  "in_cumulative\030N \001(\010:\005false\0227\n(use_timeta"
  "ble_edge_finding_in_cumulative\030O \001(\010:\005fa"
  "lse\0222\n\"use_hard_precedences_in_cumulativ"
  "e\030\327\001 \001(\010:\005false\022\'\n\027exploit_all_precedenc"
  "es\030\334\001 \001(\010:\005false\0226\n(use_disjunctive_cons"
  "traint_in_cumulative\030P \001(\010:\004true\0220\n use_"
  "timetabling_in_no_overlap_2d\030\310\001 \001(\010:\005fal"
  "se\0228\n(use_energetic_reasoning_in_no_over"
  "lap_2d\030\325\001 \001(\010:\005false\022-\n\036use_dual_schedul"
  "ing_heuristics\030\326\001 \001(\010:\004true\022\036\n\023lineariza"
  "tion_level\030Z \001(\005:\0011\022!\n\026boolean_encoding_"
  "level\030k \001(\005:\0011\022=\n0max_domain_size_when_e"
  "ncoding_eq_neq_constraints\030\277\001 \001(\005:\00216\022\033\n"
  "\014max_num_cuts\030[ \001(\005:\00510000\022\025\n\tcut_level\030"
  "\304\001 \001(\005:\0011\022*\n\033only_add_cuts_at_level_zero"
  "\030\\ \001(\010:\005false\022!\n\021add_objective_cut\030\305\001 \001("
  "\010:\005false\022\031\n\013add_cg_cuts\030u \001(\010:\004true\022\032\n\014a"
  "dd_mir_cuts\030x \001(\010:\004true\022!\n\022add_zero_half"
  "_cuts\030\251\001 \001(\010:\004true\022\036\n\017add_clique_cuts\030\254\001"
  " \001(\010:\004true\022\"\n\025max_all_diff_cut_size\030\224\001 \001"
  "(\005:\00264\022\037\n\020add_lin_max_cuts\030\230\001 \001(\010:\004true\022"
  ")\n\034max_integer_rounding_scaling\030w \001(\005:\0036"
  "00\022\'\n\031add_lp_constraints_lazily\030p \001(\010:\004t"
  "rue\022!\n\022root_lp_iterations\030\343\001 \001(\005:\0042000\0222"
  "\n$min_orthogonality_for_lp_constraints\030s"
  " \001(\001:\0040.05\022(\n\034max_cut_rounds_at_level_ze"
  "ro\030\232\001 \001(\005:\0011\022+\n\036max_consecutive_inactive"
  "_count\030y \001(\005:\003100\0220\n\032cut_max_active_coun"
  "t_value\030\233\001 \001(\001:\01310000000000\022$\n\026cut_activ"
  "e_count_decay\030\234\001 \001(\001:\0030.8\022!\n\022cut_cleanup"
  "_target\030\235\001 \001(\005:\0041000\022&\n\032new_constraints_"
  "batch_size\030z \001(\005:\00250\022b\n\020search_branching"
  "\030R \001(\01626.operations_research.sat.SatPara"
  "meters.SearchBranching:\020AUTOMATIC_SEARCH"
  "\022 \n\023hint_conflict_limit\030\231\001 \001(\005:\00210\022\033\n\013re"
  "pair_hint\030\247\001 \001(\010:\005false\0223\n#fix_variables"
  "_to_their_hinted_value\030\300\001 \001(\010:\005false\022)\n\033"
  "exploit_integer_lp_solution\030^ \001(\010:\004true\022"
  "%\n\027exploit_all_lp_solution\030t \001(\010:\004true\022%"
  "\n\025exploit_best_solution\030\202\001 \001(\010:\005false\022+\n"
  "\033exploit_relaxation_solution\030\241\001 \001(\010:\005fal"
  "se\022 \n\021exploit_objective\030\203\001 \001(\010:\004true\022\"\n\026"
  "probing_period_at_root\030\216\001 \001(\003:\0010\022\"\n\022use_"
  "probing_search\030\260\001 \001(\010:\005false\022,\n\035use_shav"
  "ing_in_probing_search\030\314\001 \001(\010:\004true\0221\n!sh"
  "aving_search_deterministic_time\030\315\001 \001(\001:\005"
  "0.001\022\'\n\027use_objective_lb_search\030\344\001 \001(\010:"
  "\005false\022.\n!pseudo_cost_reliability_thresh"
  "old\030{ \001(\003:\003100\022!\n\022optimize_with_core\030S \001"
  "(\010:\005false\022,\n\034optimize_with_lb_tree_searc"
  "h\030\274\001 \001(\010:\005false\022\'\n\033binary_search_num_con"
  "flicts\030c \001(\005:\002-1\022#\n\024optimize_with_max_hs"
  "\030U \001(\010:\005false\022&\n\027enumerate_all_solutions"
  "\030W \001(\010:\005false\0227\n\'keep_all_feasible_solut"
  "ions_in_presolve\030\255\001 \001(\010:\005false\0222\n\"fill_t"
  "ightened_domains_in_response\030\204\001 \001(\010:\005fal"
  "se\0225\n%fill_additional_solutions_in_respo"
  "nse\030\302\001 \001(\010:\005false\022\'\n\031instantiate_all_var"
  "iables\030j \001(\010:\004true\0226\n(auto_detect_greate"
  "r_than_at_least_one_of\030_ \001(\010:\004true\022(\n\031st"
  "op_after_first_solution\030b \001(\010:\005false\022#\n\023"
  "stop_after_presolve\030\225\001 \001(\010:\005false\022\033\n\014use"
  "_lns_only\030e \001(\010:\005false\022\036\n\022solution_pool_"
  "size\030\301\001 \001(\005:\0013\022\033\n\014use_rins_lns\030\201\001 \001(\010:\004t"
  "rue\022#\n\024use_feasibility_pump\030\244\001 \001(\010:\004true"
  "\022c\n\013fp_rounding\030\245\001 \001(\01627.operations_rese"
  "arch.sat.SatParameters.FPRoundingMethod:"
  "\024PROPAGATION_ASSISTED\022+\n\026objective_lns_m"
  "in_size\030\347\001 \001(\005:\n2147483647\022$\n\024diversify_"
  "lns_params\030\211\001 \001(\010:\005false\022\037\n\020randomize_se"
  "arch\030g \001(\010:\005false\022)\n\036search_randomizatio"
  "n_tolerance\030h \001(\003:\0010\022%\n\026use_optional_var"
  "iables\030l \001(\010:\005false\022!\n\023use_exact_lp_reas"
  "on\030m \001(\010:\004true\022#\n\023use_branching_in_lp\030\213\001"
  " \001(\010:\005false\022\'\n\027use_combined_no_overlap\030\205"
  "\001 \001(\010:\005false\022\"\n\023catch_sigint_signal\030\207\001 \001"
  "(\010:\004true\022!\n\022use_implied_bounds\030\220\001 \001(\010:\004t"
  "rue\022\"\n\022polish_lp_solution\030\257\001 \001(\010:\005false\022"
  " \n\021convert_intervals\030\261\001 \001(\010:\004true\022\032\n\016sym"
  "metry_level\030\267\001 \001(\005:\0012\022&\n\026new_linear_prop"
  "agation\030\340\001 \001(\010:\005false\022\037\n\rmip_max_bound\030|"
  " \001(\001:\01010000000\022\032\n\017mip_var_scaling\030} \001(\001:"
  "\0011\022&\n\026mip_scale_large_domain\030\341\001 \001(\010:\005fal"
  "se\0220\n!mip_automatically_scale_variables\030"
  "\246\001 \001(\010:\004true\022\035\n\ronly_solve_ip\030\336\001 \001(\010:\005fa"
  "lse\022$\n\024mip_wanted_precision\030~ \001(\001:\0061e-00"
  "6\022%\n\031mip_max_activity_exponent\030\177 \001(\005:\00253"
  "\022$\n\023mip_check_precision\030\200\001 \001(\001:\0060.0001\022/"
  "\n mip_compute_true_objective_bound\030\306\001 \001("
  "\010:\004true\022(\n\027mip_max_valid_magnitude\030\307\001 \001("
  "\001:\0061e+030\022#\n\022mip_drop_tolerance\030\350\001 \001(\001:\006"
  "1e-016\"H\n\rVariableOrder\022\014\n\010IN_ORDER\020\000\022\024\n"
  "\020IN_REVERSE_ORDER\020\001\022\023\n\017IN_RANDOM_ORDER\020\002"
  "\"\206\001\n\010Polarity\022\021\n\rPOLARITY_TRUE\020\000\022\022\n\016POLA"
  "RITY_FALSE\020\001\022\023\n\017POLARITY_RANDOM\020\002\022\032\n\026POL"
  "ARITY_WEIGHTED_SIGN\020\003\022\"\n\036POLARITY_REVERS"
  "E_WEIGHTED_SIGN\020\004\"V\n\035ConflictMinimizatio"
  "nAlgorithm\022\010\n\004NONE\020\000\022\n\n\006SIMPLE\020\001\022\r\n\tRECU"
  "RSIVE\020\002\022\020\n\014EXPERIMENTAL\020\003\"\340\001\n\031BinaryMini"
  "zationAlgorithm\022\032\n\026NO_BINARY_MINIMIZATIO"
  "N\020\000\022\035\n\031BINARY_MINIMIZATION_FIRST\020\001\0227\n3BI"
  "NARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_"
  "REDUCTION\020\004\022)\n%BINARY_MINIMIZATION_WITH_"
  "REACHABILITY\020\002\022$\n EXPERIMENTAL_BINARY_MI"
  "NIMIZATION\020\003\"R\n\020ClauseProtection\022\023\n\017PROT"
  "ECTION_NONE\020\000\022\025\n\021PROTECTION_ALWAYS\020\001\022\022\n\016"
  "PROTECTION_LBD\020\002\"5\n\016ClauseOrdering\022\023\n\017CL"
  "AUSE_ACTIVITY\020\000\022\016\n\nCLAUSE_LBD\020\001\"\206\001\n\020Rest"
  "artAlgorithm\022\016\n\nNO_RESTART\020\000\022\020\n\014LUBY_RES"
  "TART\020\001\022\035\n\031DL_MOVING_AVERAGE_RESTART\020\002\022\036\n"
  "\032LBD_MOVING_AVERAGE_RESTART\020\003\022\021\n\rFIXED_R"
  "ESTART\020\004\"t\n\025MaxSatAssumptionOrder\022\034\n\030DEF"
  "AULT_ASSUMPTION_ORDER\020\000\022\035\n\031ORDER_ASSUMPT"
  "ION_BY_DEPTH\020\001\022\036\n\032ORDER_ASSUMPTION_BY_WE"
  "IGHT\020\002\"o\n\035MaxSatStratificationAlgorithm\022"
  "\027\n\023STRATIFICATION_NONE\020\000\022\032\n\026STRATIFICATI"
  "ON_DESCENT\020\001\022\031\n\025STRATIFICATION_ASCENT\020\002\""
  "\312\001\n\017SearchBranching\022\024\n\020AUTOMATIC_SEARCH\020"
  "\000\022\020\n\014FIXED_SEARCH\020\001\022\024\n\020PORTFOLIO_SEARCH\020"
  "\002\022\r\n\tLP_SEARCH\020\003\022\026\n\022PSEUDO_COST_SEARCH\020\004"
  "\022\'\n#PORTFOLIO_WITH_QUICK_RESTART_SEARCH\020"
  "\005\022\017\n\013HINT_SEARCH\020\006\022\030\n\024PARTIAL_FIXED_SEAR"
  "CH\020\007\"h\n\020FPRoundingMethod\022\023\n\017NEAREST_INTE"
  "GER\020\000\022\016\n\nLOCK_BASED\020\001\022\025\n\021ACTIVE_LOCK_BAS"
  "ED\020\003\022\030\n\024PROPAGATION_ASSISTED\020\002B/\n\026com.go"
  "ogle.ortools.satP\001\252\002\022Google.OrTools.Sat"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto = {
    false, false, 10359, descriptor_table_protodef_ortools_2fsat_2fsat_5fparameters_2eproto,
    "ortools/sat/sat_parameters.proto",
    &descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto::offsets,
    file_level_metadata_ortools_2fsat_2fsat_5fparameters_2eproto, file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto,
    file_level_service_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_getter() {
  return &descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fsat_2fsat_5fparameters_2eproto(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
namespace operations_research {
namespace sat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_VariableOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[0];
}
bool SatParameters_VariableOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_VariableOrder SatParameters::IN_ORDER;
constexpr SatParameters_VariableOrder SatParameters::IN_REVERSE_ORDER;
constexpr SatParameters_VariableOrder SatParameters::IN_RANDOM_ORDER;
constexpr SatParameters_VariableOrder SatParameters::VariableOrder_MIN;
constexpr SatParameters_VariableOrder SatParameters::VariableOrder_MAX;
constexpr int SatParameters::VariableOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_Polarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[1];
}
bool SatParameters_Polarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_Polarity SatParameters::POLARITY_TRUE;
constexpr SatParameters_Polarity SatParameters::POLARITY_FALSE;
constexpr SatParameters_Polarity SatParameters::POLARITY_RANDOM;
constexpr SatParameters_Polarity SatParameters::POLARITY_WEIGHTED_SIGN;
constexpr SatParameters_Polarity SatParameters::POLARITY_REVERSE_WEIGHTED_SIGN;
constexpr SatParameters_Polarity SatParameters::Polarity_MIN;
constexpr SatParameters_Polarity SatParameters::Polarity_MAX;
constexpr int SatParameters::Polarity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ConflictMinimizationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[2];
}
bool SatParameters_ConflictMinimizationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::NONE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::SIMPLE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::RECURSIVE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::EXPERIMENTAL;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MIN;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MAX;
constexpr int SatParameters::ConflictMinimizationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_BinaryMinizationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[3];
}
bool SatParameters_BinaryMinizationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::NO_BINARY_MINIMIZATION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_WITH_REACHABILITY;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::EXPERIMENTAL_BINARY_MINIMIZATION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MIN;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MAX;
constexpr int SatParameters::BinaryMinizationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ClauseProtection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[4];
}
bool SatParameters_ClauseProtection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_NONE;
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_ALWAYS;
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_LBD;
constexpr SatParameters_ClauseProtection SatParameters::ClauseProtection_MIN;
constexpr SatParameters_ClauseProtection SatParameters::ClauseProtection_MAX;
constexpr int SatParameters::ClauseProtection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ClauseOrdering_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[5];
}
bool SatParameters_ClauseOrdering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_ClauseOrdering SatParameters::CLAUSE_ACTIVITY;
constexpr SatParameters_ClauseOrdering SatParameters::CLAUSE_LBD;
constexpr SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MIN;
constexpr SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MAX;
constexpr int SatParameters::ClauseOrdering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_RestartAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[6];
}
bool SatParameters_RestartAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_RestartAlgorithm SatParameters::NO_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::LUBY_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::DL_MOVING_AVERAGE_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::LBD_MOVING_AVERAGE_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::FIXED_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MIN;
constexpr SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MAX;
constexpr int SatParameters::RestartAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_MaxSatAssumptionOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[7];
}
bool SatParameters_MaxSatAssumptionOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::DEFAULT_ASSUMPTION_ORDER;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_DEPTH;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_WEIGHT;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MIN;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MAX;
constexpr int SatParameters::MaxSatAssumptionOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_MaxSatStratificationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[8];
}
bool SatParameters_MaxSatStratificationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_NONE;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_DESCENT;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_ASCENT;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MIN;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MAX;
constexpr int SatParameters::MaxSatStratificationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_SearchBranching_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[9];
}
bool SatParameters_SearchBranching_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_SearchBranching SatParameters::AUTOMATIC_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::FIXED_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PORTFOLIO_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::LP_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PSEUDO_COST_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PORTFOLIO_WITH_QUICK_RESTART_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::HINT_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PARTIAL_FIXED_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::SearchBranching_MIN;
constexpr SatParameters_SearchBranching SatParameters::SearchBranching_MAX;
constexpr int SatParameters::SearchBranching_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_FPRoundingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[10];
}
bool SatParameters_FPRoundingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SatParameters_FPRoundingMethod SatParameters::NEAREST_INTEGER;
constexpr SatParameters_FPRoundingMethod SatParameters::LOCK_BASED;
constexpr SatParameters_FPRoundingMethod SatParameters::ACTIVE_LOCK_BASED;
constexpr SatParameters_FPRoundingMethod SatParameters::PROPAGATION_ASSISTED;
constexpr SatParameters_FPRoundingMethod SatParameters::FPRoundingMethod_MIN;
constexpr SatParameters_FPRoundingMethod SatParameters::FPRoundingMethod_MAX;
constexpr int SatParameters::FPRoundingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SatParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<SatParameters>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_variable_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_polarity(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_use_phase_saving(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_polarity_rephase_increment(HasBits* has_bits) {
    (*has_bits)[5] |= 1024u;
  }
  static void set_has_random_polarity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_random_branches_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_erwa_heuristic(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_initial_variables_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_also_bump_variables_in_conflict_reasons(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_minimization_algorithm(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_binary_minimization_algorithm(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_subsumption_during_conflict_analysis(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_clause_cleanup_period(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_clause_cleanup_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clause_cleanup_ratio(HasBits* has_bits) {
    (*has_bits)[5] |= 524288u;
  }
  static void set_has_clause_cleanup_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clause_cleanup_lbd_bound(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_clause_cleanup_ordering(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pb_cleanup_increment(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_pb_cleanup_ratio(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_minimize_with_propagation_restart_period(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_minimize_with_propagation_num_decisions(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_variable_activity_decay(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_max_variable_activity_value(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_glucose_max_decay(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_glucose_decay_increment(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_glucose_decay_increment_period(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_clause_activity_decay(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_max_clause_activity_value(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_default_restart_algorithms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_restart_period(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_restart_running_window_size(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_restart_dl_average_ratio(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_restart_lbd_average_ratio(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_use_blocking_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_blocking_restart_window_size(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_blocking_restart_multiplier(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_num_conflicts_before_strategy_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_strategy_change_increase_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_time_in_seconds(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_max_deterministic_time(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_max_number_of_conflicts(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_max_memory_in_mb(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_absolute_gap_limit(HasBits* has_bits) {
    (*has_bits)[5] |= 16u;
  }
  static void set_has_relative_gap_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_permute_variable_randomly(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_permute_presolve_constraint_order(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_use_absl_random(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_log_search_progress(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_log_frequency_in_seconds(HasBits* has_bits) {
    (*has_bits)[5] |= 134217728u;
  }
  static void set_has_model_reduction_log_frequency_in_seconds(HasBits* has_bits) {
    (*has_bits)[5] |= 268435456u;
  }
  static void set_has_log_subsolver_statistics(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static void set_has_log_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_log_to_stdout(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static void set_has_log_to_response(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_use_pb_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_minimize_reduction_during_pb_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_count_assumption_levels_in_lbd(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_presolve_bve_threshold(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_presolve_bve_clause_weight(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_probing_deterministic_time_limit(HasBits* has_bits) {
    (*has_bits)[6] |= 1u;
  }
  static void set_has_presolve_probing_deterministic_time_limit(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_presolve_blocked_clause(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_presolve_use_bva(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_presolve_bva_threshold(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_max_presolve_iterations(HasBits* has_bits) {
    (*has_bits)[4] |= 262144u;
  }
  static void set_has_cp_model_presolve(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_cp_model_probing_level(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_cp_model_use_sat_presolve(HasBits* has_bits) {
    (*has_bits)[5] |= 2048u;
  }
  static void set_has_use_sat_inprocessing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_detect_table_with_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_table_compression_level(HasBits* has_bits) {
    (*has_bits)[5] |= 1073741824u;
  }
  static void set_has_expand_alldiff_constraints(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_expand_reservoir_constraints(HasBits* has_bits) {
    (*has_bits)[5] |= 4096u;
  }
  static void set_has_disable_constraint_expansion(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_encode_complex_linear_constraint_with_integer(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_merge_no_overlap_work_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 8388608u;
  }
  static void set_has_merge_at_most_one_work_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 16777216u;
  }
  static void set_has_presolve_substitution_level(HasBits* has_bits) {
    (*has_bits)[4] |= 33554432u;
  }
  static void set_has_presolve_extract_integer_enforcement(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_presolve_inclusion_work_limit(HasBits* has_bits) {
    (*has_bits)[5] |= 8388608u;
  }
  static void set_has_ignore_names(HasBits* has_bits) {
    (*has_bits)[5] |= 8192u;
  }
  static void set_has_infer_all_diffs(HasBits* has_bits) {
    (*has_bits)[5] |= 16384u;
  }
  static void set_has_find_big_linear_overlap(HasBits* has_bits) {
    (*has_bits)[5] |= 64u;
  }
  static void set_has_num_workers(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_num_search_workers(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_min_num_lns_workers(HasBits* has_bits) {
    (*has_bits)[5] |= 33554432u;
  }
  static void set_has_interleave_search(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_interleave_batch_size(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_share_objective_bounds(HasBits* has_bits) {
    (*has_bits)[5] |= 128u;
  }
  static void set_has_share_level_zero_bounds(HasBits* has_bits) {
    (*has_bits)[5] |= 256u;
  }
  static void set_has_share_binary_clauses(HasBits* has_bits) {
    (*has_bits)[5] |= 512u;
  }
  static void set_has_debug_postsolve_with_full_solver(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_debug_max_num_presolve_operations(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_debug_crash_on_bad_hint(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_use_optimization_hints(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_minimize_core(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_find_multiple_cores(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_cover_optimization(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_max_sat_assumption_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_sat_reverse_assumption_order(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_max_sat_stratification(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_propagation_loop_detection_factor(HasBits* has_bits) {
    (*has_bits)[5] |= 536870912u;
  }
  static void set_has_use_precedences_in_disjunctive_constraint(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static void set_has_max_size_to_create_precedence_literals_in_disjunctive(HasBits* has_bits) {
    (*has_bits)[6] |= 2u;
  }
  static void set_has_use_strong_propagation_in_disjunctive(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_use_overload_checker_in_cumulative(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_use_timetable_edge_finding_in_cumulative(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_use_hard_precedences_in_cumulative(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_exploit_all_precedences(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_use_disjunctive_constraint_in_cumulative(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static void set_has_use_timetabling_in_no_overlap_2d(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_use_energetic_reasoning_in_no_overlap_2d(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_use_dual_scheduling_heuristics(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static void set_has_linearization_level(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_boolean_encoding_level(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static void set_has_max_domain_size_when_encoding_eq_neq_constraints(HasBits* has_bits) {
    (*has_bits)[5] |= 1048576u;
  }
  static void set_has_max_num_cuts(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_cut_level(HasBits* has_bits) {
    (*has_bits)[5] |= 16777216u;
  }
  static void set_has_only_add_cuts_at_level_zero(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_add_objective_cut(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_add_cg_cuts(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static void set_has_add_mir_cuts(HasBits* has_bits) {
    (*has_bits)[4] |= 268435456u;
  }
  static void set_has_add_zero_half_cuts(HasBits* has_bits) {
    (*has_bits)[4] |= 536870912u;
  }
  static void set_has_add_clique_cuts(HasBits* has_bits) {
    (*has_bits)[4] |= 1073741824u;
  }
  static void set_has_max_all_diff_cut_size(HasBits* has_bits) {
    (*has_bits)[4] |= 67108864u;
  }
  static void set_has_add_lin_max_cuts(HasBits* has_bits) {
    (*has_bits)[4] |= 2147483648u;
  }
  static void set_has_max_integer_rounding_scaling(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static void set_has_add_lp_constraints_lazily(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static void set_has_root_lp_iterations(HasBits* has_bits) {
    (*has_bits)[5] |= 2147483648u;
  }
  static void set_has_min_orthogonality_for_lp_constraints(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_max_cut_rounds_at_level_zero(HasBits* has_bits) {
    (*has_bits)[5] |= 2u;
  }
  static void set_has_max_consecutive_inactive_count(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static void set_has_cut_max_active_count_value(HasBits* has_bits) {
    (*has_bits)[5] |= 1u;
  }
  static void set_has_cut_active_count_decay(HasBits* has_bits) {
    (*has_bits)[5] |= 8u;
  }
  static void set_has_cut_cleanup_target(HasBits* has_bits) {
    (*has_bits)[5] |= 4u;
  }
  static void set_has_new_constraints_batch_size(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static void set_has_search_branching(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_hint_conflict_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 134217728u;
  }
  static void set_has_repair_hint(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_fix_variables_to_their_hinted_value(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_exploit_integer_lp_solution(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_exploit_all_lp_solution(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_exploit_best_solution(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_exploit_relaxation_solution(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_exploit_objective(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_probing_period_at_root(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_use_probing_search(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_use_shaving_in_probing_search(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static void set_has_shaving_search_deterministic_time(HasBits* has_bits) {
    (*has_bits)[5] |= 67108864u;
  }
  static void set_has_use_objective_lb_search(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_pseudo_cost_reliability_threshold(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static void set_has_optimize_with_core(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_optimize_with_lb_tree_search(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_binary_search_num_conflicts(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_optimize_with_max_hs(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_enumerate_all_solutions(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_keep_all_feasible_solutions_in_presolve(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fill_tightened_domains_in_response(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_fill_additional_solutions_in_response(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_instantiate_all_variables(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static void set_has_auto_detect_greater_than_at_least_one_of(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static void set_has_stop_after_first_solution(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_stop_after_presolve(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_use_lns_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_solution_pool_size(HasBits* has_bits) {
    (*has_bits)[5] |= 2097152u;
  }
  static void set_has_use_rins_lns(HasBits* has_bits) {
    (*has_bits)[4] |= 131072u;
  }
  static void set_has_use_feasibility_pump(HasBits* has_bits) {
    (*has_bits)[4] |= 524288u;
  }
  static void set_has_fp_rounding(HasBits* has_bits) {
    (*has_bits)[5] |= 32u;
  }
  static void set_has_objective_lns_min_size(HasBits* has_bits) {
    (*has_bits)[6] |= 4u;
  }
  static void set_has_diversify_lns_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_randomize_search(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_search_randomization_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_use_optional_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_use_exact_lp_reason(HasBits* has_bits) {
    (*has_bits)[4] |= 1048576u;
  }
  static void set_has_use_branching_in_lp(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_use_combined_no_overlap(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_catch_sigint_signal(HasBits* has_bits) {
    (*has_bits)[4] |= 2097152u;
  }
  static void set_has_use_implied_bounds(HasBits* has_bits) {
    (*has_bits)[4] |= 4194304u;
  }
  static void set_has_polish_lp_solution(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_convert_intervals(HasBits* has_bits) {
    (*has_bits)[5] |= 32768u;
  }
  static void set_has_symmetry_level(HasBits* has_bits) {
    (*has_bits)[5] |= 262144u;
  }
  static void set_has_new_linear_propagation(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_mip_max_bound(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static void set_has_mip_var_scaling(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static void set_has_mip_scale_large_domain(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_mip_automatically_scale_variables(HasBits* has_bits) {
    (*has_bits)[5] |= 65536u;
  }
  static void set_has_only_solve_ip(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_mip_wanted_precision(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static void set_has_mip_max_activity_exponent(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static void set_has_mip_check_precision(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static void set_has_mip_compute_true_objective_bound(HasBits* has_bits) {
    (*has_bits)[5] |= 131072u;
  }
  static void set_has_mip_max_valid_magnitude(HasBits* has_bits) {
    (*has_bits)[5] |= 4194304u;
  }
  static void set_has_mip_drop_tolerance(HasBits* has_bits) {
    (*has_bits)[6] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SatParameters::Impl_::_i_give_permission_to_break_this_code_default_default_restart_algorithms_{{{"LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART", 65}}, {nullptr}};
SatParameters::SatParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.SatParameters)
}
SatParameters::SatParameters(const SatParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SatParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restart_algorithms_){from._impl_.restart_algorithms_}
    , decltype(_impl_.subsolvers_){from._impl_.subsolvers_}
    , decltype(_impl_.ignore_subsolvers_){from._impl_.ignore_subsolvers_}
    , decltype(_impl_.subsolver_params_){from._impl_.subsolver_params_}
    , decltype(_impl_.extra_subsolvers_){from._impl_.extra_subsolvers_}
    , decltype(_impl_.default_restart_algorithms_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.log_prefix_){}
    , decltype(_impl_.preferred_variable_order_){}
    , decltype(_impl_.clause_cleanup_target_){}
    , decltype(_impl_.random_branches_ratio_){}
    , decltype(_impl_.random_polarity_ratio_){}
    , decltype(_impl_.max_sat_assumption_order_){}
    , decltype(_impl_.clause_cleanup_protection_){}
    , decltype(_impl_.clause_cleanup_ordering_){}
    , decltype(_impl_.num_conflicts_before_strategy_changes_){}
    , decltype(_impl_.strategy_change_increase_ratio_){}
    , decltype(_impl_.initial_variables_activity_){}
    , decltype(_impl_.search_branching_){}
    , decltype(_impl_.use_erwa_heuristic_){}
    , decltype(_impl_.also_bump_variables_in_conflict_reasons_){}
    , decltype(_impl_.use_blocking_restart_){}
    , decltype(_impl_.permute_variable_randomly_){}
    , decltype(_impl_.search_randomization_tolerance_){}
    , decltype(_impl_.num_search_workers_){}
    , decltype(_impl_.use_lns_only_){}
    , decltype(_impl_.diversify_lns_params_){}
    , decltype(_impl_.randomize_search_){}
    , decltype(_impl_.use_optional_variables_){}
    , decltype(_impl_.use_pb_resolution_){}
    , decltype(_impl_.minimize_reduction_during_pb_resolution_){}
    , decltype(_impl_.use_sat_inprocessing_){}
    , decltype(_impl_.detect_table_with_cost_){}
    , decltype(_impl_.optimize_with_lb_tree_search_){}
    , decltype(_impl_.optimize_with_max_hs_){}
    , decltype(_impl_.enumerate_all_solutions_){}
    , decltype(_impl_.keep_all_feasible_solutions_in_presolve_){}
    , decltype(_impl_.interleave_batch_size_){}
    , decltype(_impl_.interleave_search_){}
    , decltype(_impl_.debug_postsolve_with_full_solver_){}
    , decltype(_impl_.debug_crash_on_bad_hint_){}
    , decltype(_impl_.max_sat_reverse_assumption_order_){}
    , decltype(_impl_.probing_period_at_root_){}
    , decltype(_impl_.fill_tightened_domains_in_response_){}
    , decltype(_impl_.fill_additional_solutions_in_response_){}
    , decltype(_impl_.stop_after_first_solution_){}
    , decltype(_impl_.stop_after_presolve_){}
    , decltype(_impl_.permute_presolve_constraint_order_){}
    , decltype(_impl_.use_absl_random_){}
    , decltype(_impl_.log_search_progress_){}
    , decltype(_impl_.log_to_response_){}
    , decltype(_impl_.use_strong_propagation_in_disjunctive_){}
    , decltype(_impl_.use_overload_checker_in_cumulative_){}
    , decltype(_impl_.use_timetable_edge_finding_in_cumulative_){}
    , decltype(_impl_.use_hard_precedences_in_cumulative_){}
    , decltype(_impl_.debug_max_num_presolve_operations_){}
    , decltype(_impl_.relative_gap_limit_){}
    , decltype(_impl_.exploit_relaxation_solution_){}
    , decltype(_impl_.use_probing_search_){}
    , decltype(_impl_.use_objective_lb_search_){}
    , decltype(_impl_.optimize_with_core_){}
    , decltype(_impl_.use_branching_in_lp_){}
    , decltype(_impl_.use_combined_no_overlap_){}
    , decltype(_impl_.polish_lp_solution_){}
    , decltype(_impl_.new_linear_propagation_){}
    , decltype(_impl_.add_objective_cut_){}
    , decltype(_impl_.repair_hint_){}
    , decltype(_impl_.fix_variables_to_their_hinted_value_){}
    , decltype(_impl_.exploit_best_solution_){}
    , decltype(_impl_.exploit_all_precedences_){}
    , decltype(_impl_.use_timetabling_in_no_overlap_2d_){}
    , decltype(_impl_.use_energetic_reasoning_in_no_overlap_2d_){}
    , decltype(_impl_.only_add_cuts_at_level_zero_){}
    , decltype(_impl_.expand_alldiff_constraints_){}
    , decltype(_impl_.disable_constraint_expansion_){}
    , decltype(_impl_.encode_complex_linear_constraint_with_integer_){}
    , decltype(_impl_.presolve_extract_integer_enforcement_){}
    , decltype(_impl_.num_workers_){}
    , decltype(_impl_.mip_scale_large_domain_){}
    , decltype(_impl_.only_solve_ip_){}
    , decltype(_impl_.initial_polarity_){}
    , decltype(_impl_.minimization_algorithm_){}
    , decltype(_impl_.variable_activity_decay_){}
    , decltype(_impl_.max_variable_activity_value_){}
    , decltype(_impl_.clause_activity_decay_){}
    , decltype(_impl_.clause_cleanup_period_){}
    , decltype(_impl_.glucose_decay_increment_period_){}
    , decltype(_impl_.max_clause_activity_value_){}
    , decltype(_impl_.glucose_max_decay_){}
    , decltype(_impl_.glucose_decay_increment_){}
    , decltype(_impl_.restart_period_){}
    , decltype(_impl_.random_seed_){}
    , decltype(_impl_.max_time_in_seconds_){}
    , decltype(_impl_.max_number_of_conflicts_){}
    , decltype(_impl_.max_memory_in_mb_){}
    , decltype(_impl_.binary_minimization_algorithm_){}
    , decltype(_impl_.pb_cleanup_increment_){}
    , decltype(_impl_.pb_cleanup_ratio_){}
    , decltype(_impl_.max_sat_stratification_){}
    , decltype(_impl_.presolve_bve_threshold_){}
    , decltype(_impl_.presolve_probing_deterministic_time_limit_){}
    , decltype(_impl_.presolve_bve_clause_weight_){}
    , decltype(_impl_.clause_cleanup_lbd_bound_){}
    , decltype(_impl_.restart_dl_average_ratio_){}
    , decltype(_impl_.restart_running_window_size_){}
    , decltype(_impl_.use_optimization_hints_){}
    , decltype(_impl_.minimize_core_){}
    , decltype(_impl_.find_multiple_cores_){}
    , decltype(_impl_.cover_optimization_){}
    , decltype(_impl_.blocking_restart_multiplier_){}
    , decltype(_impl_.max_deterministic_time_){}
    , decltype(_impl_.blocking_restart_window_size_){}
    , decltype(_impl_.presolve_bva_threshold_){}
    , decltype(_impl_.restart_lbd_average_ratio_){}
    , decltype(_impl_.count_assumption_levels_in_lbd_){}
    , decltype(_impl_.presolve_blocked_clause_){}
    , decltype(_impl_.presolve_use_bva_){}
    , decltype(_impl_.cp_model_presolve_){}
    , decltype(_impl_.linearization_level_){}
    , decltype(_impl_.max_num_cuts_){}
    , decltype(_impl_.minimize_with_propagation_restart_period_){}
    , decltype(_impl_.minimize_with_propagation_num_decisions_){}
    , decltype(_impl_.binary_search_num_conflicts_){}
    , decltype(_impl_.boolean_encoding_level_){}
    , decltype(_impl_.cp_model_probing_level_){}
    , decltype(_impl_.min_orthogonality_for_lp_constraints_){}
    , decltype(_impl_.add_lp_constraints_lazily_){}
    , decltype(_impl_.exploit_integer_lp_solution_){}
    , decltype(_impl_.exploit_all_lp_solution_){}
    , decltype(_impl_.exploit_objective_){}
    , decltype(_impl_.use_phase_saving_){}
    , decltype(_impl_.subsumption_during_conflict_analysis_){}
    , decltype(_impl_.log_subsolver_statistics_){}
    , decltype(_impl_.log_to_stdout_){}
    , decltype(_impl_.max_integer_rounding_scaling_){}
    , decltype(_impl_.max_consecutive_inactive_count_){}
    , decltype(_impl_.use_precedences_in_disjunctive_constraint_){}
    , decltype(_impl_.use_disjunctive_constraint_in_cumulative_){}
    , decltype(_impl_.use_dual_scheduling_heuristics_){}
    , decltype(_impl_.add_cg_cuts_){}
    , decltype(_impl_.new_constraints_batch_size_){}
    , decltype(_impl_.pseudo_cost_reliability_threshold_){}
    , decltype(_impl_.mip_max_bound_){}
    , decltype(_impl_.mip_var_scaling_){}
    , decltype(_impl_.mip_wanted_precision_){}
    , decltype(_impl_.mip_check_precision_){}
    , decltype(_impl_.mip_max_activity_exponent_){}
    , decltype(_impl_.use_shaving_in_probing_search_){}
    , decltype(_impl_.instantiate_all_variables_){}
    , decltype(_impl_.auto_detect_greater_than_at_least_one_of_){}
    , decltype(_impl_.use_rins_lns_){}
    , decltype(_impl_.max_presolve_iterations_){}
    , decltype(_impl_.use_feasibility_pump_){}
    , decltype(_impl_.use_exact_lp_reason_){}
    , decltype(_impl_.catch_sigint_signal_){}
    , decltype(_impl_.use_implied_bounds_){}
    , decltype(_impl_.merge_no_overlap_work_limit_){}
    , decltype(_impl_.merge_at_most_one_work_limit_){}
    , decltype(_impl_.presolve_substitution_level_){}
    , decltype(_impl_.max_all_diff_cut_size_){}
    , decltype(_impl_.hint_conflict_limit_){}
    , decltype(_impl_.add_mir_cuts_){}
    , decltype(_impl_.add_zero_half_cuts_){}
    , decltype(_impl_.add_clique_cuts_){}
    , decltype(_impl_.add_lin_max_cuts_){}
    , decltype(_impl_.cut_max_active_count_value_){}
    , decltype(_impl_.max_cut_rounds_at_level_zero_){}
    , decltype(_impl_.cut_cleanup_target_){}
    , decltype(_impl_.cut_active_count_decay_){}
    , decltype(_impl_.absolute_gap_limit_){}
    , decltype(_impl_.fp_rounding_){}
    , decltype(_impl_.find_big_linear_overlap_){}
    , decltype(_impl_.share_objective_bounds_){}
    , decltype(_impl_.share_level_zero_bounds_){}
    , decltype(_impl_.share_binary_clauses_){}
    , decltype(_impl_.polarity_rephase_increment_){}
    , decltype(_impl_.cp_model_use_sat_presolve_){}
    , decltype(_impl_.expand_reservoir_constraints_){}
    , decltype(_impl_.ignore_names_){}
    , decltype(_impl_.infer_all_diffs_){}
    , decltype(_impl_.convert_intervals_){}
    , decltype(_impl_.mip_automatically_scale_variables_){}
    , decltype(_impl_.mip_compute_true_objective_bound_){}
    , decltype(_impl_.symmetry_level_){}
    , decltype(_impl_.clause_cleanup_ratio_){}
    , decltype(_impl_.max_domain_size_when_encoding_eq_neq_constraints_){}
    , decltype(_impl_.solution_pool_size_){}
    , decltype(_impl_.mip_max_valid_magnitude_){}
    , decltype(_impl_.presolve_inclusion_work_limit_){}
    , decltype(_impl_.cut_level_){}
    , decltype(_impl_.min_num_lns_workers_){}
    , decltype(_impl_.shaving_search_deterministic_time_){}
    , decltype(_impl_.log_frequency_in_seconds_){}
    , decltype(_impl_.model_reduction_log_frequency_in_seconds_){}
    , decltype(_impl_.propagation_loop_detection_factor_){}
    , decltype(_impl_.table_compression_level_){}
    , decltype(_impl_.root_lp_iterations_){}
    , decltype(_impl_.probing_deterministic_time_limit_){}
    , decltype(_impl_.max_size_to_create_precedence_literals_in_disjunctive_){}
    , decltype(_impl_.objective_lns_min_size_){}
    , decltype(_impl_.mip_drop_tolerance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default_restart_algorithms_.InitDefault();
  if (from._internal_has_default_restart_algorithms()) {
    _this->_impl_.default_restart_algorithms_.Set(from._internal_default_restart_algorithms(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log_prefix()) {
    _this->_impl_.log_prefix_.Set(from._internal_log_prefix(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.preferred_variable_order_, &from._impl_.preferred_variable_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mip_drop_tolerance_) -
    reinterpret_cast<char*>(&_impl_.preferred_variable_order_)) + sizeof(_impl_.mip_drop_tolerance_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.SatParameters)
}

inline void SatParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restart_algorithms_){arena}
    , decltype(_impl_.subsolvers_){arena}
    , decltype(_impl_.ignore_subsolvers_){arena}
    , decltype(_impl_.subsolver_params_){arena}
    , decltype(_impl_.extra_subsolvers_){arena}
    , decltype(_impl_.default_restart_algorithms_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.log_prefix_){}
    , decltype(_impl_.preferred_variable_order_){0}
    , decltype(_impl_.clause_cleanup_target_){0}
    , decltype(_impl_.random_branches_ratio_){0}
    , decltype(_impl_.random_polarity_ratio_){0}
    , decltype(_impl_.max_sat_assumption_order_){0}
    , decltype(_impl_.clause_cleanup_protection_){0}
    , decltype(_impl_.clause_cleanup_ordering_){0}
    , decltype(_impl_.num_conflicts_before_strategy_changes_){0}
    , decltype(_impl_.strategy_change_increase_ratio_){0}
    , decltype(_impl_.initial_variables_activity_){0}
    , decltype(_impl_.search_branching_){0}
    , decltype(_impl_.use_erwa_heuristic_){false}
    , decltype(_impl_.also_bump_variables_in_conflict_reasons_){false}
    , decltype(_impl_.use_blocking_restart_){false}
    , decltype(_impl_.permute_variable_randomly_){false}
    , decltype(_impl_.search_randomization_tolerance_){int64_t{0}}
    , decltype(_impl_.num_search_workers_){0}
    , decltype(_impl_.use_lns_only_){false}
    , decltype(_impl_.diversify_lns_params_){false}
    , decltype(_impl_.randomize_search_){false}
    , decltype(_impl_.use_optional_variables_){false}
    , decltype(_impl_.use_pb_resolution_){false}
    , decltype(_impl_.minimize_reduction_during_pb_resolution_){false}
    , decltype(_impl_.use_sat_inprocessing_){false}
    , decltype(_impl_.detect_table_with_cost_){false}
    , decltype(_impl_.optimize_with_lb_tree_search_){false}
    , decltype(_impl_.optimize_with_max_hs_){false}
    , decltype(_impl_.enumerate_all_solutions_){false}
    , decltype(_impl_.keep_all_feasible_solutions_in_presolve_){false}
    , decltype(_impl_.interleave_batch_size_){0}
    , decltype(_impl_.interleave_search_){false}
    , decltype(_impl_.debug_postsolve_with_full_solver_){false}
    , decltype(_impl_.debug_crash_on_bad_hint_){false}
    , decltype(_impl_.max_sat_reverse_assumption_order_){false}
    , decltype(_impl_.probing_period_at_root_){int64_t{0}}
    , decltype(_impl_.fill_tightened_domains_in_response_){false}
    , decltype(_impl_.fill_additional_solutions_in_response_){false}
    , decltype(_impl_.stop_after_first_solution_){false}
    , decltype(_impl_.stop_after_presolve_){false}
    , decltype(_impl_.permute_presolve_constraint_order_){false}
    , decltype(_impl_.use_absl_random_){false}
    , decltype(_impl_.log_search_progress_){false}
    , decltype(_impl_.log_to_response_){false}
    , decltype(_impl_.use_strong_propagation_in_disjunctive_){false}
    , decltype(_impl_.use_overload_checker_in_cumulative_){false}
    , decltype(_impl_.use_timetable_edge_finding_in_cumulative_){false}
    , decltype(_impl_.use_hard_precedences_in_cumulative_){false}
    , decltype(_impl_.debug_max_num_presolve_operations_){0}
    , decltype(_impl_.relative_gap_limit_){0}
    , decltype(_impl_.exploit_relaxation_solution_){false}
    , decltype(_impl_.use_probing_search_){false}
    , decltype(_impl_.use_objective_lb_search_){false}
    , decltype(_impl_.optimize_with_core_){false}
    , decltype(_impl_.use_branching_in_lp_){false}
    , decltype(_impl_.use_combined_no_overlap_){false}
    , decltype(_impl_.polish_lp_solution_){false}
    , decltype(_impl_.new_linear_propagation_){false}
    , decltype(_impl_.add_objective_cut_){false}
    , decltype(_impl_.repair_hint_){false}
    , decltype(_impl_.fix_variables_to_their_hinted_value_){false}
    , decltype(_impl_.exploit_best_solution_){false}
    , decltype(_impl_.exploit_all_precedences_){false}
    , decltype(_impl_.use_timetabling_in_no_overlap_2d_){false}
    , decltype(_impl_.use_energetic_reasoning_in_no_overlap_2d_){false}
    , decltype(_impl_.only_add_cuts_at_level_zero_){false}
    , decltype(_impl_.expand_alldiff_constraints_){false}
    , decltype(_impl_.disable_constraint_expansion_){false}
    , decltype(_impl_.encode_complex_linear_constraint_with_integer_){false}
    , decltype(_impl_.presolve_extract_integer_enforcement_){false}
    , decltype(_impl_.num_workers_){0}
    , decltype(_impl_.mip_scale_large_domain_){false}
    , decltype(_impl_.only_solve_ip_){false}
    , decltype(_impl_.initial_polarity_){1}
    , decltype(_impl_.minimization_algorithm_){2}
    , decltype(_impl_.variable_activity_decay_){0.8}
    , decltype(_impl_.max_variable_activity_value_){1e+100}
    , decltype(_impl_.clause_activity_decay_){0.999}
    , decltype(_impl_.clause_cleanup_period_){10000}
    , decltype(_impl_.glucose_decay_increment_period_){5000}
    , decltype(_impl_.max_clause_activity_value_){1e+020}
    , decltype(_impl_.glucose_max_decay_){0.95}
    , decltype(_impl_.glucose_decay_increment_){0.01}
    , decltype(_impl_.restart_period_){50}
    , decltype(_impl_.random_seed_){1}
    , decltype(_impl_.max_time_in_seconds_){std::numeric_limits<double>::infinity()}
    , decltype(_impl_.max_number_of_conflicts_){int64_t{9223372036854775807}}
    , decltype(_impl_.max_memory_in_mb_){int64_t{10000}}
    , decltype(_impl_.binary_minimization_algorithm_){1}
    , decltype(_impl_.pb_cleanup_increment_){200}
    , decltype(_impl_.pb_cleanup_ratio_){0.5}
    , decltype(_impl_.max_sat_stratification_){1}
    , decltype(_impl_.presolve_bve_threshold_){500}
    , decltype(_impl_.presolve_probing_deterministic_time_limit_){30}
    , decltype(_impl_.presolve_bve_clause_weight_){3}
    , decltype(_impl_.clause_cleanup_lbd_bound_){5}
    , decltype(_impl_.restart_dl_average_ratio_){1}
    , decltype(_impl_.restart_running_window_size_){50}
    , decltype(_impl_.use_optimization_hints_){true}
    , decltype(_impl_.minimize_core_){true}
    , decltype(_impl_.find_multiple_cores_){true}
    , decltype(_impl_.cover_optimization_){true}
    , decltype(_impl_.blocking_restart_multiplier_){1.4}
    , decltype(_impl_.max_deterministic_time_){std::numeric_limits<double>::infinity()}
    , decltype(_impl_.blocking_restart_window_size_){5000}
    , decltype(_impl_.presolve_bva_threshold_){1}
    , decltype(_impl_.restart_lbd_average_ratio_){1}
    , decltype(_impl_.count_assumption_levels_in_lbd_){true}
    , decltype(_impl_.presolve_blocked_clause_){true}
    , decltype(_impl_.presolve_use_bva_){true}
    , decltype(_impl_.cp_model_presolve_){true}
    , decltype(_impl_.linearization_level_){1}
    , decltype(_impl_.max_num_cuts_){10000}
    , decltype(_impl_.minimize_with_propagation_restart_period_){10}
    , decltype(_impl_.minimize_with_propagation_num_decisions_){1000}
    , decltype(_impl_.binary_search_num_conflicts_){-1}
    , decltype(_impl_.boolean_encoding_level_){1}
    , decltype(_impl_.cp_model_probing_level_){2}
    , decltype(_impl_.min_orthogonality_for_lp_constraints_){0.05}
    , decltype(_impl_.add_lp_constraints_lazily_){true}
    , decltype(_impl_.exploit_integer_lp_solution_){true}
    , decltype(_impl_.exploit_all_lp_solution_){true}
    , decltype(_impl_.exploit_objective_){true}
    , decltype(_impl_.use_phase_saving_){true}
    , decltype(_impl_.subsumption_during_conflict_analysis_){true}
    , decltype(_impl_.log_subsolver_statistics_){true}
    , decltype(_impl_.log_to_stdout_){true}
    , decltype(_impl_.max_integer_rounding_scaling_){600}
    , decltype(_impl_.max_consecutive_inactive_count_){100}
    , decltype(_impl_.use_precedences_in_disjunctive_constraint_){true}
    , decltype(_impl_.use_disjunctive_constraint_in_cumulative_){true}
    , decltype(_impl_.use_dual_scheduling_heuristics_){true}
    , decltype(_impl_.add_cg_cuts_){true}
    , decltype(_impl_.new_constraints_batch_size_){50}
    , decltype(_impl_.pseudo_cost_reliability_threshold_){int64_t{100}}
    , decltype(_impl_.mip_max_bound_){10000000}
    , decltype(_impl_.mip_var_scaling_){1}
    , decltype(_impl_.mip_wanted_precision_){1e-006}
    , decltype(_impl_.mip_check_precision_){0.0001}
    , decltype(_impl_.mip_max_activity_exponent_){53}
    , decltype(_impl_.use_shaving_in_probing_search_){true}
    , decltype(_impl_.instantiate_all_variables_){true}
    , decltype(_impl_.auto_detect_greater_than_at_least_one_of_){true}
    , decltype(_impl_.use_rins_lns_){true}
    , decltype(_impl_.max_presolve_iterations_){3}
    , decltype(_impl_.use_feasibility_pump_){true}
    , decltype(_impl_.use_exact_lp_reason_){true}
    , decltype(_impl_.catch_sigint_signal_){true}
    , decltype(_impl_.use_implied_bounds_){true}
    , decltype(_impl_.merge_no_overlap_work_limit_){1000000000000}
    , decltype(_impl_.merge_at_most_one_work_limit_){100000000}
    , decltype(_impl_.presolve_substitution_level_){1}
    , decltype(_impl_.max_all_diff_cut_size_){64}
    , decltype(_impl_.hint_conflict_limit_){10}
    , decltype(_impl_.add_mir_cuts_){true}
    , decltype(_impl_.add_zero_half_cuts_){true}
    , decltype(_impl_.add_clique_cuts_){true}
    , decltype(_impl_.add_lin_max_cuts_){true}
    , decltype(_impl_.cut_max_active_count_value_){10000000000}
    , decltype(_impl_.max_cut_rounds_at_level_zero_){1}
    , decltype(_impl_.cut_cleanup_target_){1000}
    , decltype(_impl_.cut_active_count_decay_){0.8}
    , decltype(_impl_.absolute_gap_limit_){0.0001}
    , decltype(_impl_.fp_rounding_){2}
    , decltype(_impl_.find_big_linear_overlap_){true}
    , decltype(_impl_.share_objective_bounds_){true}
    , decltype(_impl_.share_level_zero_bounds_){true}
    , decltype(_impl_.share_binary_clauses_){true}
    , decltype(_impl_.polarity_rephase_increment_){1000}
    , decltype(_impl_.cp_model_use_sat_presolve_){true}
    , decltype(_impl_.expand_reservoir_constraints_){true}
    , decltype(_impl_.ignore_names_){true}
    , decltype(_impl_.infer_all_diffs_){true}
    , decltype(_impl_.convert_intervals_){true}
    , decltype(_impl_.mip_automatically_scale_variables_){true}
    , decltype(_impl_.mip_compute_true_objective_bound_){true}
    , decltype(_impl_.symmetry_level_){2}
    , decltype(_impl_.clause_cleanup_ratio_){0.5}
    , decltype(_impl_.max_domain_size_when_encoding_eq_neq_constraints_){16}
    , decltype(_impl_.solution_pool_size_){3}
    , decltype(_impl_.mip_max_valid_magnitude_){1e+030}
    , decltype(_impl_.presolve_inclusion_work_limit_){int64_t{100000000}}
    , decltype(_impl_.cut_level_){1}
    , decltype(_impl_.min_num_lns_workers_){2}
    , decltype(_impl_.shaving_search_deterministic_time_){0.001}
    , decltype(_impl_.log_frequency_in_seconds_){-1}
    , decltype(_impl_.model_reduction_log_frequency_in_seconds_){5}
    , decltype(_impl_.propagation_loop_detection_factor_){10}
    , decltype(_impl_.table_compression_level_){2}
    , decltype(_impl_.root_lp_iterations_){2000}
    , decltype(_impl_.probing_deterministic_time_limit_){1}
    , decltype(_impl_.max_size_to_create_precedence_literals_in_disjunctive_){60}
    , decltype(_impl_.objective_lns_min_size_){2147483647}
    , decltype(_impl_.mip_drop_tolerance_){1e-016}
  };
  _impl_.default_restart_algorithms_.InitDefault();
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SatParameters::~SatParameters() {
  // @@protoc_insertion_point(destructor:operations_research.sat.SatParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SatParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restart_algorithms_.~RepeatedField();
  _impl_.subsolvers_.~RepeatedPtrField();
  _impl_.ignore_subsolvers_.~RepeatedPtrField();
  _impl_.subsolver_params_.~RepeatedPtrField();
  _impl_.extra_subsolvers_.~RepeatedPtrField();
  _impl_.default_restart_algorithms_.Destroy();
  _impl_.name_.Destroy();
  _impl_.log_prefix_.Destroy();
}

void SatParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SatParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.SatParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.restart_algorithms_.Clear();
  _impl_.subsolvers_.Clear();
  _impl_.ignore_subsolvers_.Clear();
  _impl_.subsolver_params_.Clear();
  _impl_.extra_subsolvers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.default_restart_algorithms_.ClearToDefault(::operations_research::sat::SatParameters::Impl_::_i_give_permission_to_break_this_code_default_default_restart_algorithms_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.log_prefix_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.preferred_variable_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_sat_assumption_order_) -
        reinterpret_cast<char*>(&_impl_.preferred_variable_order_)) + sizeof(_impl_.max_sat_assumption_order_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.clause_cleanup_protection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.also_bump_variables_in_conflict_reasons_) -
        reinterpret_cast<char*>(&_impl_.clause_cleanup_protection_)) + sizeof(_impl_.also_bump_variables_in_conflict_reasons_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.use_blocking_restart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_optional_variables_) -
        reinterpret_cast<char*>(&_impl_.use_blocking_restart_)) + sizeof(_impl_.use_optional_variables_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.use_pb_resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keep_all_feasible_solutions_in_presolve_) -
        reinterpret_cast<char*>(&_impl_.use_pb_resolution_)) + sizeof(_impl_.keep_all_feasible_solutions_in_presolve_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.interleave_batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fill_additional_solutions_in_response_) -
        reinterpret_cast<char*>(&_impl_.interleave_batch_size_)) + sizeof(_impl_.fill_additional_solutions_in_response_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.stop_after_first_solution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_overload_checker_in_cumulative_) -
        reinterpret_cast<char*>(&_impl_.stop_after_first_solution_)) + sizeof(_impl_.use_overload_checker_in_cumulative_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.use_timetable_edge_finding_in_cumulative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optimize_with_core_) -
        reinterpret_cast<char*>(&_impl_.use_timetable_edge_finding_in_cumulative_)) + sizeof(_impl_.optimize_with_core_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.use_branching_in_lp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.exploit_best_solution_) -
        reinterpret_cast<char*>(&_impl_.use_branching_in_lp_)) + sizeof(_impl_.exploit_best_solution_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.exploit_all_precedences_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.presolve_extract_integer_enforcement_) -
        reinterpret_cast<char*>(&_impl_.exploit_all_precedences_)) + sizeof(_impl_.presolve_extract_integer_enforcement_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.num_workers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.only_solve_ip_) -
        reinterpret_cast<char*>(&_impl_.num_workers_)) + sizeof(_impl_.only_solve_ip_));
    _impl_.initial_polarity_ = 1;
    _impl_.minimization_algorithm_ = 2;
    _impl_.variable_activity_decay_ = 0.8;
    _impl_.max_variable_activity_value_ = 1e+100;
    _impl_.clause_activity_decay_ = 0.999;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.clause_cleanup_period_ = 10000;
    _impl_.glucose_decay_increment_period_ = 5000;
    _impl_.max_clause_activity_value_ = 1e+020;
    _impl_.glucose_max_decay_ = 0.95;
    _impl_.glucose_decay_increment_ = 0.01;
    _impl_.restart_period_ = 50;
    _impl_.random_seed_ = 1;
    _impl_.max_time_in_seconds_ = std::numeric_limits<double>::infinity();
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.max_number_of_conflicts_ = int64_t{9223372036854775807};
    _impl_.max_memory_in_mb_ = int64_t{10000};
    _impl_.binary_minimization_algorithm_ = 1;
    _impl_.pb_cleanup_increment_ = 200;
    _impl_.pb_cleanup_ratio_ = 0.5;
    _impl_.max_sat_stratification_ = 1;
    _impl_.presolve_bve_threshold_ = 500;
    _impl_.presolve_probing_deterministic_time_limit_ = 30;
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.presolve_bve_clause_weight_ = 3;
    _impl_.clause_cleanup_lbd_bound_ = 5;
    _impl_.restart_dl_average_ratio_ = 1;
    _impl_.restart_running_window_size_ = 50;
    _impl_.use_optimization_hints_ = true;
    _impl_.minimize_core_ = true;
    _impl_.find_multiple_cores_ = true;
    _impl_.cover_optimization_ = true;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.blocking_restart_multiplier_ = 1.4;
    _impl_.max_deterministic_time_ = std::numeric_limits<double>::infinity();
    _impl_.blocking_restart_window_size_ = 5000;
    _impl_.presolve_bva_threshold_ = 1;
    _impl_.restart_lbd_average_ratio_ = 1;
    _impl_.count_assumption_levels_in_lbd_ = true;
    _impl_.presolve_blocked_clause_ = true;
    _impl_.presolve_use_bva_ = true;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.cp_model_presolve_ = true;
    _impl_.linearization_level_ = 1;
    _impl_.max_num_cuts_ = 10000;
    _impl_.minimize_with_propagation_restart_period_ = 10;
    _impl_.minimize_with_propagation_num_decisions_ = 1000;
    _impl_.binary_search_num_conflicts_ = -1;
    _impl_.boolean_encoding_level_ = 1;
    _impl_.cp_model_probing_level_ = 2;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.min_orthogonality_for_lp_constraints_ = 0.05;
    _impl_.add_lp_constraints_lazily_ = true;
    _impl_.exploit_integer_lp_solution_ = true;
    _impl_.exploit_all_lp_solution_ = true;
    _impl_.exploit_objective_ = true;
    _impl_.use_phase_saving_ = true;
    _impl_.subsumption_during_conflict_analysis_ = true;
    _impl_.log_subsolver_statistics_ = true;
  }
  cached_has_bits = _impl_._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.log_to_stdout_ = true;
    _impl_.max_integer_rounding_scaling_ = 600;
    _impl_.max_consecutive_inactive_count_ = 100;
    _impl_.use_precedences_in_disjunctive_constraint_ = true;
    _impl_.use_disjunctive_constraint_in_cumulative_ = true;
    _impl_.use_dual_scheduling_heuristics_ = true;
    _impl_.add_cg_cuts_ = true;
    _impl_.new_constraints_batch_size_ = 50;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.pseudo_cost_reliability_threshold_ = int64_t{100};
    _impl_.mip_max_bound_ = 10000000;
    _impl_.mip_var_scaling_ = 1;
    _impl_.mip_wanted_precision_ = 1e-006;
    _impl_.mip_check_precision_ = 0.0001;
    _impl_.mip_max_activity_exponent_ = 53;
    _impl_.use_shaving_in_probing_search_ = true;
    _impl_.instantiate_all_variables_ = true;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.auto_detect_greater_than_at_least_one_of_ = true;
    _impl_.use_rins_lns_ = true;
    _impl_.max_presolve_iterations_ = 3;
    _impl_.use_feasibility_pump_ = true;
    _impl_.use_exact_lp_reason_ = true;
    _impl_.catch_sigint_signal_ = true;
    _impl_.use_implied_bounds_ = true;
    _impl_.merge_no_overlap_work_limit_ = 1000000000000;
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.merge_at_most_one_work_limit_ = 100000000;
    _impl_.presolve_substitution_level_ = 1;
    _impl_.max_all_diff_cut_size_ = 64;
    _impl_.hint_conflict_limit_ = 10;
    _impl_.add_mir_cuts_ = true;
    _impl_.add_zero_half_cuts_ = true;
    _impl_.add_clique_cuts_ = true;
    _impl_.add_lin_max_cuts_ = true;
  }
  cached_has_bits = _impl_._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.cut_max_active_count_value_ = 10000000000;
    _impl_.max_cut_rounds_at_level_zero_ = 1;
    _impl_.cut_cleanup_target_ = 1000;
    _impl_.cut_active_count_decay_ = 0.8;
    _impl_.absolute_gap_limit_ = 0.0001;
    _impl_.fp_rounding_ = 2;
    _impl_.find_big_linear_overlap_ = true;
    _impl_.share_objective_bounds_ = true;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.share_level_zero_bounds_ = true;
    _impl_.share_binary_clauses_ = true;
    _impl_.polarity_rephase_increment_ = 1000;
    _impl_.cp_model_use_sat_presolve_ = true;
    _impl_.expand_reservoir_constraints_ = true;
    _impl_.ignore_names_ = true;
    _impl_.infer_all_diffs_ = true;
    _impl_.convert_intervals_ = true;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.mip_automatically_scale_variables_ = true;
    _impl_.mip_compute_true_objective_bound_ = true;
    _impl_.symmetry_level_ = 2;
    _impl_.clause_cleanup_ratio_ = 0.5;
    _impl_.max_domain_size_when_encoding_eq_neq_constraints_ = 16;
    _impl_.solution_pool_size_ = 3;
    _impl_.mip_max_valid_magnitude_ = 1e+030;
    _impl_.presolve_inclusion_work_limit_ = int64_t{100000000};
  }
  if (cached_has_bits & 0xff000000u) {
    _impl_.cut_level_ = 1;
    _impl_.min_num_lns_workers_ = 2;
    _impl_.shaving_search_deterministic_time_ = 0.001;
    _impl_.log_frequency_in_seconds_ = -1;
    _impl_.model_reduction_log_frequency_in_seconds_ = 5;
    _impl_.propagation_loop_detection_factor_ = 10;
    _impl_.table_compression_level_ = 2;
    _impl_.root_lp_iterations_ = 2000;
  }
  cached_has_bits = _impl_._has_bits_[6];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.probing_deterministic_time_limit_ = 1;
    _impl_.max_size_to_create_precedence_literals_in_disjunctive_ = 60;
    _impl_.objective_lns_min_size_ = 2147483647;
    _impl_.mip_drop_tolerance_ = 1e-016;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SatParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_VariableOrder_IsValid(val))) {
            _internal_set_preferred_variable_order(static_cast<::operations_research::sat::SatParameters_VariableOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_Polarity_IsValid(val))) {
            _internal_set_initial_polarity(static_cast<::operations_research::sat::SatParameters_Polarity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm_IsValid(val))) {
            _internal_set_minimization_algorithm(static_cast<::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_period = 11 [default = 10000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_clause_cleanup_period(&_impl_._has_bits_);
          _impl_.clause_cleanup_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_target = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_clause_cleanup_target(&_impl_._has_bits_);
          _impl_.clause_cleanup_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double variable_activity_decay = 15 [default = 0.8];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_variable_activity_decay(&_impl_._has_bits_);
          _impl_.variable_activity_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_variable_activity_value = 16 [default = 1e+100];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_max_variable_activity_value(&_impl_._has_bits_);
          _impl_.max_variable_activity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double clause_activity_decay = 17 [default = 0.999];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_clause_activity_decay(&_impl_._has_bits_);
          _impl_.clause_activity_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_clause_activity_value = 18 [default = 1e+020];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_max_clause_activity_value(&_impl_._has_bits_);
          _impl_.max_clause_activity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double glucose_max_decay = 22 [default = 0.95];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_glucose_max_decay(&_impl_._has_bits_);
          _impl_.glucose_max_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double glucose_decay_increment = 23 [default = 0.01];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_glucose_decay_increment(&_impl_._has_bits_);
          _impl_.glucose_decay_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 glucose_decay_increment_period = 24 [default = 5000];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_glucose_decay_increment_period(&_impl_._has_bits_);
          _impl_.glucose_decay_increment_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 restart_period = 30 [default = 50];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_restart_period(&_impl_._has_bits_);
          _impl_.restart_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 random_seed = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_random_seed(&_impl_._has_bits_);
          _impl_.random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double random_branches_ratio = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_random_branches_ratio(&_impl_._has_bits_);
          _impl_.random_branches_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm_IsValid(val))) {
            _internal_set_binary_minimization_algorithm(static_cast<::operations_research::sat::SatParameters_BinaryMinizationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool use_optimization_hints = 35 [default = true];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_optimization_hints(&_impl_._has_bits_);
          _impl_.use_optimization_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_time_in_seconds = 36 [default = inf];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_time_in_seconds(&_impl_._has_bits_);
          _impl_.max_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_number_of_conflicts(&_impl_._has_bits_);
          _impl_.max_number_of_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_memory_in_mb = 40 [default = 10000];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_memory_in_mb(&_impl_._has_bits_);
          _impl_.max_memory_in_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool log_search_progress = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_log_search_progress(&_impl_._has_bits_);
          _impl_.log_search_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_pb_resolution = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_use_pb_resolution(&_impl_._has_bits_);
          _impl_.use_pb_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_phase_saving = 44 [default = true];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_use_phase_saving(&_impl_._has_bits_);
          _impl_.use_phase_saving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double random_polarity_ratio = 45 [default = 0];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_random_polarity_ratio(&_impl_._has_bits_);
          _impl_.random_polarity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pb_cleanup_increment = 46 [default = 200];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_pb_cleanup_increment(&_impl_._has_bits_);
          _impl_.pb_cleanup_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double pb_cleanup_ratio = 47 [default = 0.5];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_pb_cleanup_ratio(&_impl_._has_bits_);
          _impl_.pb_cleanup_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_minimize_reduction_during_pb_resolution(&_impl_._has_bits_);
          _impl_.minimize_reduction_during_pb_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool count_assumption_levels_in_lbd = 49 [default = true];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_count_assumption_levels_in_lbd(&_impl_._has_bits_);
          _impl_.count_assumption_levels_in_lbd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool minimize_core = 50 [default = true];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_minimize_core(&_impl_._has_bits_);
          _impl_.minimize_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_MaxSatAssumptionOrder_IsValid(val))) {
            _internal_set_max_sat_assumption_order(static_cast<::operations_research::sat::SatParameters_MaxSatAssumptionOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool max_sat_reverse_assumption_order = 52 [default = false];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_max_sat_reverse_assumption_order(&_impl_._has_bits_);
          _impl_.max_sat_reverse_assumption_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm_IsValid(val))) {
            _internal_set_max_sat_stratification(static_cast<::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 presolve_bve_threshold = 54 [default = 500];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_presolve_bve_threshold(&_impl_._has_bits_);
          _impl_.presolve_bve_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 presolve_bve_clause_weight = 55 [default = 3];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_presolve_bve_clause_weight(&_impl_._has_bits_);
          _impl_.presolve_bve_clause_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool subsumption_during_conflict_analysis = 56 [default = true];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_subsumption_during_conflict_analysis(&_impl_._has_bits_);
          _impl_.subsumption_during_conflict_analysis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_presolve_probing_deterministic_time_limit(&_impl_._has_bits_);
          _impl_.presolve_probing_deterministic_time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ClauseProtection_IsValid(val))) {
            _internal_set_clause_cleanup_protection(static_cast<::operations_research::sat::SatParameters_ClauseProtection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(58, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_clause_cleanup_lbd_bound(&_impl_._has_bits_);
          _impl_.clause_cleanup_lbd_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ClauseOrdering_IsValid(val))) {
            _internal_set_clause_cleanup_ordering(static_cast<::operations_research::sat::SatParameters_ClauseOrdering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(60, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_RestartAlgorithm_IsValid(val))) {
              _internal_add_restart_algorithms(static_cast<::operations_research::sat::SatParameters_RestartAlgorithm>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(61, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<488>(ptr));
        } else if (static_cast<uint8_t>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_restart_algorithms(), ptr, ctx, ::operations_research::sat::SatParameters_RestartAlgorithm_IsValid, &_internal_metadata_, 61);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 restart_running_window_size = 62 [default = 50];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_restart_running_window_size(&_impl_._has_bits_);
          _impl_.restart_running_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double restart_dl_average_ratio = 63 [default = 1];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_restart_dl_average_ratio(&_impl_._has_bits_);
          _impl_.restart_dl_average_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_blocking_restart = 64 [default = false];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_use_blocking_restart(&_impl_._has_bits_);
          _impl_.use_blocking_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 blocking_restart_window_size = 65 [default = 5000];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_blocking_restart_window_size(&_impl_._has_bits_);
          _impl_.blocking_restart_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double blocking_restart_multiplier = 66 [default = 1.4];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_blocking_restart_multiplier(&_impl_._has_bits_);
          _impl_.blocking_restart_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_deterministic_time = 67 [default = inf];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_deterministic_time(&_impl_._has_bits_);
          _impl_.max_deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_conflicts_before_strategy_changes(&_impl_._has_bits_);
          _impl_.num_conflicts_before_strategy_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double strategy_change_increase_ratio = 69 [default = 0];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_strategy_change_increase_ratio(&_impl_._has_bits_);
          _impl_.strategy_change_increase_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_default_restart_algorithms();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.default_restart_algorithms");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double restart_lbd_average_ratio = 71 [default = 1];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_restart_lbd_average_ratio(&_impl_._has_bits_);
          _impl_.restart_lbd_average_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool presolve_use_bva = 72 [default = true];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_presolve_use_bva(&_impl_._has_bits_);
          _impl_.presolve_use_bva_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 presolve_bva_threshold = 73 [default = 1];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_presolve_bva_threshold(&_impl_._has_bits_);
          _impl_.presolve_bva_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_use_precedences_in_disjunctive_constraint(&_impl_._has_bits_);
          _impl_.use_precedences_in_disjunctive_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_erwa_heuristic = 75 [default = false];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_use_erwa_heuristic(&_impl_._has_bits_);
          _impl_.use_erwa_heuristic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double initial_variables_activity = 76 [default = 0];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_initial_variables_activity(&_impl_._has_bits_);
          _impl_.initial_variables_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_also_bump_variables_in_conflict_reasons(&_impl_._has_bits_);
          _impl_.also_bump_variables_in_conflict_reasons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_overload_checker_in_cumulative = 78 [default = false];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_use_overload_checker_in_cumulative(&_impl_._has_bits_);
          _impl_.use_overload_checker_in_cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_timetable_edge_finding_in_cumulative = 79 [default = false];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_use_timetable_edge_finding_in_cumulative(&_impl_._has_bits_);
          _impl_.use_timetable_edge_finding_in_cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_disjunctive_constraint_in_cumulative = 80 [default = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_use_disjunctive_constraint_in_cumulative(&_impl_._has_bits_);
          _impl_.use_disjunctive_constraint_in_cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_SearchBranching_IsValid(val))) {
            _internal_set_search_branching(static_cast<::operations_research::sat::SatParameters_SearchBranching>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(82, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool optimize_with_core = 83 [default = false];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_optimize_with_core(&_impl_._has_bits_);
          _impl_.optimize_with_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool find_multiple_cores = 84 [default = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_find_multiple_cores(&_impl_._has_bits_);
          _impl_.find_multiple_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool optimize_with_max_hs = 85 [default = false];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_optimize_with_max_hs(&_impl_._has_bits_);
          _impl_.optimize_with_max_hs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cp_model_presolve = 86 [default = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_cp_model_presolve(&_impl_._has_bits_);
          _impl_.cp_model_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enumerate_all_solutions = 87 [default = false];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_enumerate_all_solutions(&_impl_._has_bits_);
          _impl_.enumerate_all_solutions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool presolve_blocked_clause = 88 [default = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_presolve_blocked_clause(&_impl_._has_bits_);
          _impl_.presolve_blocked_clause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cover_optimization = 89 [default = true];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_cover_optimization(&_impl_._has_bits_);
          _impl_.cover_optimization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 linearization_level = 90 [default = 1];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_linearization_level(&_impl_._has_bits_);
          _impl_.linearization_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_num_cuts = 91 [default = 10000];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_max_num_cuts(&_impl_._has_bits_);
          _impl_.max_num_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_add_cuts_at_level_zero = 92 [default = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_only_add_cuts_at_level_zero(&_impl_._has_bits_);
          _impl_.only_add_cuts_at_level_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cp_model_use_sat_presolve = 93 [default = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_cp_model_use_sat_presolve(&_impl_._has_bits_);
          _impl_.cp_model_use_sat_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_integer_lp_solution = 94 [default = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_exploit_integer_lp_solution(&_impl_._has_bits_);
          _impl_.exploit_integer_lp_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_auto_detect_greater_than_at_least_one_of(&_impl_._has_bits_);
          _impl_.auto_detect_greater_than_at_least_one_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_minimize_with_propagation_restart_period(&_impl_._has_bits_);
          _impl_.minimize_with_propagation_restart_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_minimize_with_propagation_num_decisions(&_impl_._has_bits_);
          _impl_.minimize_with_propagation_num_decisions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stop_after_first_solution = 98 [default = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stop_after_first_solution(&_impl_._has_bits_);
          _impl_.stop_after_first_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 binary_search_num_conflicts = 99 [default = -1];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_binary_search_num_conflicts(&_impl_._has_bits_);
          _impl_.binary_search_num_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_search_workers = 100 [default = 0];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_search_workers(&_impl_._has_bits_);
          _impl_.num_search_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_lns_only = 101 [default = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_use_lns_only(&_impl_._has_bits_);
          _impl_.use_lns_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool randomize_search = 103 [default = false];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_randomize_search(&_impl_._has_bits_);
          _impl_.randomize_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 search_randomization_tolerance = 104 [default = 0];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_search_randomization_tolerance(&_impl_._has_bits_);
          _impl_.search_randomization_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool instantiate_all_variables = 106 [default = true];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_instantiate_all_variables(&_impl_._has_bits_);
          _impl_.instantiate_all_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 boolean_encoding_level = 107 [default = 1];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_boolean_encoding_level(&_impl_._has_bits_);
          _impl_.boolean_encoding_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_optional_variables = 108 [default = false];
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_use_optional_variables(&_impl_._has_bits_);
          _impl_.use_optional_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_exact_lp_reason = 109 [default = true];
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_use_exact_lp_reason(&_impl_._has_bits_);
          _impl_.use_exact_lp_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cp_model_probing_level = 110 [default = 2];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_cp_model_probing_level(&_impl_._has_bits_);
          _impl_.cp_model_probing_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_lp_constraints_lazily = 112 [default = true];
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_add_lp_constraints_lazily(&_impl_._has_bits_);
          _impl_.add_lp_constraints_lazily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_objective_bounds = 113 [default = true];
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_share_objective_bounds(&_impl_._has_bits_);
          _impl_.share_objective_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_level_zero_bounds = 114 [default = true];
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_share_level_zero_bounds(&_impl_._has_bits_);
          _impl_.share_level_zero_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_min_orthogonality_for_lp_constraints(&_impl_._has_bits_);
          _impl_.min_orthogonality_for_lp_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_all_lp_solution = 116 [default = true];
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_exploit_all_lp_solution(&_impl_._has_bits_);
          _impl_.exploit_all_lp_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_cg_cuts = 117 [default = true];
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_add_cg_cuts(&_impl_._has_bits_);
          _impl_.add_cg_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_integer_rounding_scaling = 119 [default = 600];
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_max_integer_rounding_scaling(&_impl_._has_bits_);
          _impl_.max_integer_rounding_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_mir_cuts = 120 [default = true];
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_add_mir_cuts(&_impl_._has_bits_);
          _impl_.add_mir_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_consecutive_inactive_count = 121 [default = 100];
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_max_consecutive_inactive_count(&_impl_._has_bits_);
          _impl_.max_consecutive_inactive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_constraints_batch_size = 122 [default = 50];
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_new_constraints_batch_size(&_impl_._has_bits_);
          _impl_.new_constraints_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_pseudo_cost_reliability_threshold(&_impl_._has_bits_);
          _impl_.pseudo_cost_reliability_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_max_bound = 124 [default = 10000000];
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_mip_max_bound(&_impl_._has_bits_);
          _impl_.mip_max_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_var_scaling = 125 [default = 1];
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_mip_var_scaling(&_impl_._has_bits_);
          _impl_.mip_var_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_wanted_precision = 126 [default = 1e-006];
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_mip_wanted_precision(&_impl_._has_bits_);
          _impl_.mip_wanted_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mip_max_activity_exponent = 127 [default = 53];
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_mip_max_activity_exponent(&_impl_._has_bits_);
          _impl_.mip_max_activity_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_check_precision = 128 [default = 0.0001];
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_mip_check_precision(&_impl_._has_bits_);
          _impl_.mip_check_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_rins_lns = 129 [default = true];
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_rins_lns(&_impl_._has_bits_);
          _impl_.use_rins_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_best_solution = 130 [default = false];
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_exploit_best_solution(&_impl_._has_bits_);
          _impl_.exploit_best_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_objective = 131 [default = true];
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_exploit_objective(&_impl_._has_bits_);
          _impl_.exploit_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_tightened_domains_in_response = 132 [default = false];
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fill_tightened_domains_in_response(&_impl_._has_bits_);
          _impl_.fill_tightened_domains_in_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_combined_no_overlap = 133 [default = false];
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_use_combined_no_overlap(&_impl_._has_bits_);
          _impl_.use_combined_no_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interleave_batch_size = 134 [default = 0];
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_interleave_batch_size(&_impl_._has_bits_);
          _impl_.interleave_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool catch_sigint_signal = 135 [default = true];
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_catch_sigint_signal(&_impl_._has_bits_);
          _impl_.catch_sigint_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool interleave_search = 136 [default = false];
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_interleave_search(&_impl_._has_bits_);
          _impl_.interleave_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool diversify_lns_params = 137 [default = false];
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_diversify_lns_params(&_impl_._has_bits_);
          _impl_.diversify_lns_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_presolve_iterations = 138 [default = 3];
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_presolve_iterations(&_impl_._has_bits_);
          _impl_.max_presolve_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_branching_in_lp = 139 [default = false];
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_use_branching_in_lp(&_impl_._has_bits_);
          _impl_.use_branching_in_lp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 probing_period_at_root = 142 [default = 0];
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_probing_period_at_root(&_impl_._has_bits_);
          _impl_.probing_period_at_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_implied_bounds = 144 [default = true];
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_use_implied_bounds(&_impl_._has_bits_);
          _impl_.use_implied_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_merge_no_overlap_work_limit(&_impl_._has_bits_);
          _impl_.merge_no_overlap_work_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_merge_at_most_one_work_limit(&_impl_._has_bits_);
          _impl_.merge_at_most_one_work_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 presolve_substitution_level = 147 [default = 1];
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_presolve_substitution_level(&_impl_._has_bits_);
          _impl_.presolve_substitution_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_all_diff_cut_size = 148 [default = 64];
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_max_all_diff_cut_size(&_impl_._has_bits_);
          _impl_.max_all_diff_cut_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stop_after_presolve = 149 [default = false];
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_stop_after_presolve(&_impl_._has_bits_);
          _impl_.stop_after_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 debug_max_num_presolve_operations = 151 [default = 0];
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_debug_max_num_presolve_operations(&_impl_._has_bits_);
          _impl_.debug_max_num_presolve_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_lin_max_cuts = 152 [default = true];
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_add_lin_max_cuts(&_impl_._has_bits_);
          _impl_.add_lin_max_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hint_conflict_limit = 153 [default = 10];
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_hint_conflict_limit(&_impl_._has_bits_);
          _impl_.hint_conflict_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_max_cut_rounds_at_level_zero(&_impl_._has_bits_);
          _impl_.max_cut_rounds_at_level_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cut_max_active_count_value = 155 [default = 10000000000];
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_cut_max_active_count_value(&_impl_._has_bits_);
          _impl_.cut_max_active_count_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cut_active_count_decay = 156 [default = 0.8];
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_cut_active_count_decay(&_impl_._has_bits_);
          _impl_.cut_active_count_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cut_cleanup_target = 157 [default = 1000];
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_cut_cleanup_target(&_impl_._has_bits_);
          _impl_.cut_cleanup_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double absolute_gap_limit = 159 [default = 0.0001];
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_absolute_gap_limit(&_impl_._has_bits_);
          _impl_.absolute_gap_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_gap_limit = 160 [default = 0];
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_relative_gap_limit(&_impl_._has_bits_);
          _impl_.relative_gap_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_relaxation_solution = 161 [default = false];
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_exploit_relaxation_solution(&_impl_._has_bits_);
          _impl_.exploit_relaxation_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_postsolve_with_full_solver = 162 [default = false];
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_debug_postsolve_with_full_solver(&_impl_._has_bits_);
          _impl_.debug_postsolve_with_full_solver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_sat_inprocessing = 163 [default = false];
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_sat_inprocessing(&_impl_._has_bits_);
          _impl_.use_sat_inprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_feasibility_pump = 164 [default = true];
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_feasibility_pump(&_impl_._has_bits_);
          _impl_.use_feasibility_pump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_FPRoundingMethod_IsValid(val))) {
            _internal_set_fp_rounding(static_cast<::operations_research::sat::SatParameters_FPRoundingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(165, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool mip_automatically_scale_variables = 166 [default = true];
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mip_automatically_scale_variables(&_impl_._has_bits_);
          _impl_.mip_automatically_scale_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool repair_hint = 167 [default = false];
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_repair_hint(&_impl_._has_bits_);
          _impl_.repair_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 polarity_rephase_increment = 168 [default = 1000];
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_polarity_rephase_increment(&_impl_._has_bits_);
          _impl_.polarity_rephase_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_zero_half_cuts = 169 [default = true];
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_add_zero_half_cuts(&_impl_._has_bits_);
          _impl_.add_zero_half_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool expand_alldiff_constraints = 170 [default = false];
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_expand_alldiff_constraints(&_impl_._has_bits_);
          _impl_.expand_alldiff_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 171 [default = ""];
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool add_clique_cuts = 172 [default = true];
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_add_clique_cuts(&_impl_._has_bits_);
          _impl_.add_clique_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keep_all_feasible_solutions_in_presolve = 173 [default = false];
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_keep_all_feasible_solutions_in_presolve(&_impl_._has_bits_);
          _impl_.keep_all_feasible_solutions_in_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool presolve_extract_integer_enforcement = 174 [default = false];
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_presolve_extract_integer_enforcement(&_impl_._has_bits_);
          _impl_.presolve_extract_integer_enforcement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool polish_lp_solution = 175 [default = false];
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_polish_lp_solution(&_impl_._has_bits_);
          _impl_.polish_lp_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_probing_search = 176 [default = false];
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_use_probing_search(&_impl_._has_bits_);
          _impl_.use_probing_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool convert_intervals = 177 [default = true];
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_convert_intervals(&_impl_._has_bits_);
          _impl_.convert_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool permute_variable_randomly = 178 [default = false];
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_permute_variable_randomly(&_impl_._has_bits_);
          _impl_.permute_variable_randomly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool permute_presolve_constraint_order = 179 [default = false];
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_permute_presolve_constraint_order(&_impl_._has_bits_);
          _impl_.permute_presolve_constraint_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_absl_random = 180 [default = false];
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_use_absl_random(&_impl_._has_bits_);
          _impl_.use_absl_random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_constraint_expansion = 181 [default = false];
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_disable_constraint_expansion(&_impl_._has_bits_);
          _impl_.disable_constraint_expansion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool expand_reservoir_constraints = 182 [default = true];
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_expand_reservoir_constraints(&_impl_._has_bits_);
          _impl_.expand_reservoir_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 symmetry_level = 183 [default = 2];
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_symmetry_level(&_impl_._has_bits_);
          _impl_.symmetry_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string log_prefix = 185 [default = ""];
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_log_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.log_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool log_to_stdout = 186 [default = true];
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_log_to_stdout(&_impl_._has_bits_);
          _impl_.log_to_stdout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool log_to_response = 187 [default = false];
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_log_to_response(&_impl_._has_bits_);
          _impl_.log_to_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool optimize_with_lb_tree_search = 188 [default = false];
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_optimize_with_lb_tree_search(&_impl_._has_bits_);
          _impl_.optimize_with_lb_tree_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool log_subsolver_statistics = 189 [default = true];
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_log_subsolver_statistics(&_impl_._has_bits_);
          _impl_.log_subsolver_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double clause_cleanup_ratio = 190 [default = 0.5];
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_clause_cleanup_ratio(&_impl_._has_bits_);
          _impl_.clause_cleanup_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_domain_size_when_encoding_eq_neq_constraints = 191 [default = 16];
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_max_domain_size_when_encoding_eq_neq_constraints(&_impl_._has_bits_);
          _impl_.max_domain_size_when_encoding_eq_neq_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fix_variables_to_their_hinted_value = 192 [default = false];
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_fix_variables_to_their_hinted_value(&_impl_._has_bits_);
          _impl_.fix_variables_to_their_hinted_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 solution_pool_size = 193 [default = 3];
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_solution_pool_size(&_impl_._has_bits_);
          _impl_.solution_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_additional_solutions_in_response = 194 [default = false];
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fill_additional_solutions_in_response(&_impl_._has_bits_);
          _impl_.fill_additional_solutions_in_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_crash_on_bad_hint = 195 [default = false];
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_debug_crash_on_bad_hint(&_impl_._has_bits_);
          _impl_.debug_crash_on_bad_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cut_level = 196 [default = 1];
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cut_level(&_impl_._has_bits_);
          _impl_.cut_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool add_objective_cut = 197 [default = false];
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_add_objective_cut(&_impl_._has_bits_);
          _impl_.add_objective_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mip_compute_true_objective_bound = 198 [default = true];
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mip_compute_true_objective_bound(&_impl_._has_bits_);
          _impl_.mip_compute_true_objective_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_max_valid_magnitude = 199 [default = 1e+030];
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_mip_max_valid_magnitude(&_impl_._has_bits_);
          _impl_.mip_max_valid_magnitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_timetabling_in_no_overlap_2d = 200 [default = false];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_use_timetabling_in_no_overlap_2d(&_impl_._has_bits_);
          _impl_.use_timetabling_in_no_overlap_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 presolve_inclusion_work_limit = 201 [default = 100000000];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_presolve_inclusion_work_limit(&_impl_._has_bits_);
          _impl_.presolve_inclusion_work_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_names = 202 [default = true];
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ignore_names(&_impl_._has_bits_);
          _impl_.ignore_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool share_binary_clauses = 203 [default = true];
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_share_binary_clauses(&_impl_._has_bits_);
          _impl_.share_binary_clauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_shaving_in_probing_search = 204 [default = true];
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_use_shaving_in_probing_search(&_impl_._has_bits_);
          _impl_.use_shaving_in_probing_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double shaving_search_deterministic_time = 205 [default = 0.001];
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_shaving_search_deterministic_time(&_impl_._has_bits_);
          _impl_.shaving_search_deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_workers = 206 [default = 0];
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_num_workers(&_impl_._has_bits_);
          _impl_.num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string subsolvers = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_subsolvers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.subsolvers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1658>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ignore_subsolvers = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_ignore_subsolvers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.ignore_subsolvers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1674>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.sat.SatParameters subsolver_params = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_subsolver_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1682>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_num_lns_workers = 211 [default = 2];
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_min_num_lns_workers(&_impl_._has_bits_);
          _impl_.min_num_lns_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double log_frequency_in_seconds = 212 [default = -1];
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_log_frequency_in_seconds(&_impl_._has_bits_);
          _impl_.log_frequency_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_energetic_reasoning_in_no_overlap_2d = 213 [default = false];
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_use_energetic_reasoning_in_no_overlap_2d(&_impl_._has_bits_);
          _impl_.use_energetic_reasoning_in_no_overlap_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_dual_scheduling_heuristics = 214 [default = true];
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_use_dual_scheduling_heuristics(&_impl_._has_bits_);
          _impl_.use_dual_scheduling_heuristics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_hard_precedences_in_cumulative = 215 [default = false];
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_hard_precedences_in_cumulative(&_impl_._has_bits_);
          _impl_.use_hard_precedences_in_cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool detect_table_with_cost = 216 [default = false];
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_detect_table_with_cost(&_impl_._has_bits_);
          _impl_.detect_table_with_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 table_compression_level = 217 [default = 2];
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_table_compression_level(&_impl_._has_bits_);
          _impl_.table_compression_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double model_reduction_log_frequency_in_seconds = 218 [default = 5];
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_model_reduction_log_frequency_in_seconds(&_impl_._has_bits_);
          _impl_.model_reduction_log_frequency_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string extra_subsolvers = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_extra_subsolvers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "operations_research.sat.SatParameters.extra_subsolvers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1754>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool exploit_all_precedences = 220 [default = false];
      case 220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_exploit_all_precedences(&_impl_._has_bits_);
          _impl_.exploit_all_precedences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double propagation_loop_detection_factor = 221 [default = 10];
      case 221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_propagation_loop_detection_factor(&_impl_._has_bits_);
          _impl_.propagation_loop_detection_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_solve_ip = 222 [default = false];
      case 222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_only_solve_ip(&_impl_._has_bits_);
          _impl_.only_solve_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool encode_complex_linear_constraint_with_integer = 223 [default = false];
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_encode_complex_linear_constraint_with_integer(&_impl_._has_bits_);
          _impl_.encode_complex_linear_constraint_with_integer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_linear_propagation = 224 [default = false];
      case 224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_new_linear_propagation(&_impl_._has_bits_);
          _impl_.new_linear_propagation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mip_scale_large_domain = 225 [default = false];
      case 225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mip_scale_large_domain(&_impl_._has_bits_);
          _impl_.mip_scale_large_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double probing_deterministic_time_limit = 226 [default = 1];
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_probing_deterministic_time_limit(&_impl_._has_bits_);
          _impl_.probing_deterministic_time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 root_lp_iterations = 227 [default = 2000];
      case 227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_root_lp_iterations(&_impl_._has_bits_);
          _impl_.root_lp_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_objective_lb_search = 228 [default = false];
      case 228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_objective_lb_search(&_impl_._has_bits_);
          _impl_.use_objective_lb_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_size_to_create_precedence_literals_in_disjunctive = 229 [default = 60];
      case 229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_size_to_create_precedence_literals_in_disjunctive(&_impl_._has_bits_);
          _impl_.max_size_to_create_precedence_literals_in_disjunctive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_strong_propagation_in_disjunctive = 230 [default = false];
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_strong_propagation_in_disjunctive(&_impl_._has_bits_);
          _impl_.use_strong_propagation_in_disjunctive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 objective_lns_min_size = 231 [default = 2147483647];
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_objective_lns_min_size(&_impl_._has_bits_);
          _impl_.objective_lns_min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mip_drop_tolerance = 232 [default = 1e-016];
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_mip_drop_tolerance(&_impl_._has_bits_);
          _impl_.mip_drop_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool infer_all_diffs = 233 [default = true];
      case 233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_infer_all_diffs(&_impl_._has_bits_);
          _impl_.infer_all_diffs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool find_big_linear_overlap = 234 [default = true];
      case 234:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_find_big_linear_overlap(&_impl_._has_bits_);
          _impl_.find_big_linear_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SatParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.SatParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_preferred_variable_order(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_initial_polarity(), target);
  }

  // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_minimization_algorithm(), target);
  }

  // optional int32 clause_cleanup_period = 11 [default = 10000];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_clause_cleanup_period(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 clause_cleanup_target = 13 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_clause_cleanup_target(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional double variable_activity_decay = 15 [default = 0.8];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_variable_activity_decay(), target);
  }

  // optional double max_variable_activity_value = 16 [default = 1e+100];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_variable_activity_value(), target);
  }

  // optional double clause_activity_decay = 17 [default = 0.999];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_clause_activity_decay(), target);
  }

  // optional double max_clause_activity_value = 18 [default = 1e+020];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_max_clause_activity_value(), target);
  }

  // optional double glucose_max_decay = 22 [default = 0.95];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_glucose_max_decay(), target);
  }

  // optional double glucose_decay_increment = 23 [default = 0.01];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_glucose_decay_increment(), target);
  }

  // optional int32 glucose_decay_increment_period = 24 [default = 5000];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_glucose_decay_increment_period(), target);
  }

  // optional int32 restart_period = 30 [default = 50];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_restart_period(), target);
  }

  // optional int32 random_seed = 31 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_random_seed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double random_branches_ratio = 32 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_random_branches_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_binary_minimization_algorithm(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool use_optimization_hints = 35 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_use_optimization_hints(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional double max_time_in_seconds = 36 [default = inf];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_max_time_in_seconds(), target);
  }

  // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_max_number_of_conflicts(), target);
  }

  // optional int64 max_memory_in_mb = 40 [default = 10000];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(40, this->_internal_max_memory_in_mb(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool log_search_progress = 41 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_log_search_progress(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_pb_resolution = 43 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_use_pb_resolution(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool use_phase_saving = 44 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_use_phase_saving(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double random_polarity_ratio = 45 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(45, this->_internal_random_polarity_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 pb_cleanup_increment = 46 [default = 200];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_pb_cleanup_increment(), target);
  }

  // optional double pb_cleanup_ratio = 47 [default = 0.5];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(47, this->_internal_pb_cleanup_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(48, this->_internal_minimize_reduction_during_pb_resolution(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool count_assumption_levels_in_lbd = 49 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(49, this->_internal_count_assumption_levels_in_lbd(), target);
  }

  // optional bool minimize_core = 50 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_minimize_core(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      51, this->_internal_max_sat_assumption_order(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool max_sat_reverse_assumption_order = 52 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(52, this->_internal_max_sat_reverse_assumption_order(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      53, this->_internal_max_sat_stratification(), target);
  }

  // optional int32 presolve_bve_threshold = 54 [default = 500];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(54, this->_internal_presolve_bve_threshold(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 presolve_bve_clause_weight = 55 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_presolve_bve_clause_weight(), target);
  }

  // optional bool subsumption_during_conflict_analysis = 56 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(56, this->_internal_subsumption_during_conflict_analysis(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_presolve_probing_deterministic_time_limit(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      58, this->_internal_clause_cleanup_protection(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(59, this->_internal_clause_cleanup_lbd_bound(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      60, this->_internal_clause_cleanup_ordering(), target);
  }

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  for (int i = 0, n = this->_internal_restart_algorithms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        61, this->_internal_restart_algorithms(i), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 restart_running_window_size = 62 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(62, this->_internal_restart_running_window_size(), target);
  }

  // optional double restart_dl_average_ratio = 63 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(63, this->_internal_restart_dl_average_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_blocking_restart = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(64, this->_internal_use_blocking_restart(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 blocking_restart_window_size = 65 [default = 5000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(65, this->_internal_blocking_restart_window_size(), target);
  }

  // optional double blocking_restart_multiplier = 66 [default = 1.4];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(66, this->_internal_blocking_restart_multiplier(), target);
  }

  // optional double max_deterministic_time = 67 [default = inf];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(67, this->_internal_max_deterministic_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(68, this->_internal_num_conflicts_before_strategy_changes(), target);
  }

  // optional double strategy_change_increase_ratio = 69 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(69, this->_internal_strategy_change_increase_ratio(), target);
  }

  // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_restart_algorithms().data(), static_cast<int>(this->_internal_default_restart_algorithms().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.default_restart_algorithms");
    target = stream->WriteStringMaybeAliased(
        70, this->_internal_default_restart_algorithms(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional double restart_lbd_average_ratio = 71 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(71, this->_internal_restart_lbd_average_ratio(), target);
  }

  // optional bool presolve_use_bva = 72 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_presolve_use_bva(), target);
  }

  // optional int32 presolve_bva_threshold = 73 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(73, this->_internal_presolve_bva_threshold(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(74, this->_internal_use_precedences_in_disjunctive_constraint(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_erwa_heuristic = 75 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(75, this->_internal_use_erwa_heuristic(), target);
  }

  // optional double initial_variables_activity = 76 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(76, this->_internal_initial_variables_activity(), target);
  }

  // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(77, this->_internal_also_bump_variables_in_conflict_reasons(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool use_overload_checker_in_cumulative = 78 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(78, this->_internal_use_overload_checker_in_cumulative(), target);
  }

  // optional bool use_timetable_edge_finding_in_cumulative = 79 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(79, this->_internal_use_timetable_edge_finding_in_cumulative(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_disjunctive_constraint_in_cumulative = 80 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(80, this->_internal_use_disjunctive_constraint_in_cumulative(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      82, this->_internal_search_branching(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool optimize_with_core = 83 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(83, this->_internal_optimize_with_core(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool find_multiple_cores = 84 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(84, this->_internal_find_multiple_cores(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool optimize_with_max_hs = 85 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(85, this->_internal_optimize_with_max_hs(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool cp_model_presolve = 86 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(86, this->_internal_cp_model_presolve(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enumerate_all_solutions = 87 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(87, this->_internal_enumerate_all_solutions(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool presolve_blocked_clause = 88 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(88, this->_internal_presolve_blocked_clause(), target);
  }

  // optional bool cover_optimization = 89 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(89, this->_internal_cover_optimization(), target);
  }

  // optional int32 linearization_level = 90 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(90, this->_internal_linearization_level(), target);
  }

  // optional int32 max_num_cuts = 91 [default = 10000];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(91, this->_internal_max_num_cuts(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool only_add_cuts_at_level_zero = 92 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(92, this->_internal_only_add_cuts_at_level_zero(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool cp_model_use_sat_presolve = 93 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(93, this->_internal_cp_model_use_sat_presolve(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool exploit_integer_lp_solution = 94 [default = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(94, this->_internal_exploit_integer_lp_solution(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(95, this->_internal_auto_detect_greater_than_at_least_one_of(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(96, this->_internal_minimize_with_propagation_restart_period(), target);
  }

  // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(97, this->_internal_minimize_with_propagation_num_decisions(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool stop_after_first_solution = 98 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(98, this->_internal_stop_after_first_solution(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 binary_search_num_conflicts = 99 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(99, this->_internal_binary_search_num_conflicts(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_search_workers = 100 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(100, this->_internal_num_search_workers(), target);
  }

  // optional bool use_lns_only = 101 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_use_lns_only(), target);
  }

  // optional bool randomize_search = 103 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(103, this->_internal_randomize_search(), target);
  }

  // optional int64 search_randomization_tolerance = 104 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(104, this->_internal_search_randomization_tolerance(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool instantiate_all_variables = 106 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(106, this->_internal_instantiate_all_variables(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 boolean_encoding_level = 107 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(107, this->_internal_boolean_encoding_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_optional_variables = 108 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(108, this->_internal_use_optional_variables(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_exact_lp_reason = 109 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(109, this->_internal_use_exact_lp_reason(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 cp_model_probing_level = 110 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(110, this->_internal_cp_model_probing_level(), target);
  }

  // optional bool add_lp_constraints_lazily = 112 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(112, this->_internal_add_lp_constraints_lazily(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool share_objective_bounds = 113 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(113, this->_internal_share_objective_bounds(), target);
  }

  // optional bool share_level_zero_bounds = 114 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(114, this->_internal_share_level_zero_bounds(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(115, this->_internal_min_orthogonality_for_lp_constraints(), target);
  }

  // optional bool exploit_all_lp_solution = 116 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(116, this->_internal_exploit_all_lp_solution(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool add_cg_cuts = 117 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(117, this->_internal_add_cg_cuts(), target);
  }

  // optional int32 max_integer_rounding_scaling = 119 [default = 600];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(119, this->_internal_max_integer_rounding_scaling(), target);
  }

  // optional bool add_mir_cuts = 120 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(120, this->_internal_add_mir_cuts(), target);
  }

  // optional int32 max_consecutive_inactive_count = 121 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(121, this->_internal_max_consecutive_inactive_count(), target);
  }

  // optional int32 new_constraints_batch_size = 122 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(122, this->_internal_new_constraints_batch_size(), target);
  }

  // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(123, this->_internal_pseudo_cost_reliability_threshold(), target);
  }

  // optional double mip_max_bound = 124 [default = 10000000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(124, this->_internal_mip_max_bound(), target);
  }

  // optional double mip_var_scaling = 125 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(125, this->_internal_mip_var_scaling(), target);
  }

  // optional double mip_wanted_precision = 126 [default = 1e-006];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(126, this->_internal_mip_wanted_precision(), target);
  }

  // optional int32 mip_max_activity_exponent = 127 [default = 53];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(127, this->_internal_mip_max_activity_exponent(), target);
  }

  // optional double mip_check_precision = 128 [default = 0.0001];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(128, this->_internal_mip_check_precision(), target);
  }

  // optional bool use_rins_lns = 129 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(129, this->_internal_use_rins_lns(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool exploit_best_solution = 130 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(130, this->_internal_exploit_best_solution(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool exploit_objective = 131 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(131, this->_internal_exploit_objective(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool fill_tightened_domains_in_response = 132 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(132, this->_internal_fill_tightened_domains_in_response(), target);
  }

  // optional bool use_combined_no_overlap = 133 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(133, this->_internal_use_combined_no_overlap(), target);
  }

  // optional int32 interleave_batch_size = 134 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(134, this->_internal_interleave_batch_size(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool catch_sigint_signal = 135 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(135, this->_internal_catch_sigint_signal(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool interleave_search = 136 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(136, this->_internal_interleave_search(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool diversify_lns_params = 137 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(137, this->_internal_diversify_lns_params(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional int32 max_presolve_iterations = 138 [default = 3];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(138, this->_internal_max_presolve_iterations(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool use_branching_in_lp = 139 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(139, this->_internal_use_branching_in_lp(), target);
  }

  // optional int64 probing_period_at_root = 142 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(142, this->_internal_probing_period_at_root(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_implied_bounds = 144 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(144, this->_internal_use_implied_bounds(), target);
  }

  // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(145, this->_internal_merge_no_overlap_work_limit(), target);
  }

  // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(146, this->_internal_merge_at_most_one_work_limit(), target);
  }

  // optional int32 presolve_substitution_level = 147 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(147, this->_internal_presolve_substitution_level(), target);
  }

  // optional int32 max_all_diff_cut_size = 148 [default = 64];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(148, this->_internal_max_all_diff_cut_size(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool stop_after_presolve = 149 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(149, this->_internal_stop_after_presolve(), target);
  }

  // optional int32 debug_max_num_presolve_operations = 151 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(151, this->_internal_debug_max_num_presolve_operations(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool add_lin_max_cuts = 152 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(152, this->_internal_add_lin_max_cuts(), target);
  }

  // optional int32 hint_conflict_limit = 153 [default = 10];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(153, this->_internal_hint_conflict_limit(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(154, this->_internal_max_cut_rounds_at_level_zero(), target);
  }

  // optional double cut_max_active_count_value = 155 [default = 10000000000];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(155, this->_internal_cut_max_active_count_value(), target);
  }

  // optional double cut_active_count_decay = 156 [default = 0.8];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(156, this->_internal_cut_active_count_decay(), target);
  }

  // optional int32 cut_cleanup_target = 157 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(157, this->_internal_cut_cleanup_target(), target);
  }

  // optional double absolute_gap_limit = 159 [default = 0.0001];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(159, this->_internal_absolute_gap_limit(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double relative_gap_limit = 160 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(160, this->_internal_relative_gap_limit(), target);
  }

  // optional bool exploit_relaxation_solution = 161 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(161, this->_internal_exploit_relaxation_solution(), target);
  }

  // optional bool debug_postsolve_with_full_solver = 162 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(162, this->_internal_debug_postsolve_with_full_solver(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_sat_inprocessing = 163 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(163, this->_internal_use_sat_inprocessing(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_feasibility_pump = 164 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(164, this->_internal_use_feasibility_pump(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      165, this->_internal_fp_rounding(), target);
  }

  // optional bool mip_automatically_scale_variables = 166 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(166, this->_internal_mip_automatically_scale_variables(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool repair_hint = 167 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(167, this->_internal_repair_hint(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 polarity_rephase_increment = 168 [default = 1000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(168, this->_internal_polarity_rephase_increment(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool add_zero_half_cuts = 169 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(169, this->_internal_add_zero_half_cuts(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool expand_alldiff_constraints = 170 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(170, this->_internal_expand_alldiff_constraints(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 171 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.name");
    target = stream->WriteStringMaybeAliased(
        171, this->_internal_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool add_clique_cuts = 172 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(172, this->_internal_add_clique_cuts(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool keep_all_feasible_solutions_in_presolve = 173 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(173, this->_internal_keep_all_feasible_solutions_in_presolve(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool presolve_extract_integer_enforcement = 174 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(174, this->_internal_presolve_extract_integer_enforcement(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool polish_lp_solution = 175 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(175, this->_internal_polish_lp_solution(), target);
  }

  // optional bool use_probing_search = 176 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(176, this->_internal_use_probing_search(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool convert_intervals = 177 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(177, this->_internal_convert_intervals(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool permute_variable_randomly = 178 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(178, this->_internal_permute_variable_randomly(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool permute_presolve_constraint_order = 179 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(179, this->_internal_permute_presolve_constraint_order(), target);
  }

  // optional bool use_absl_random = 180 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(180, this->_internal_use_absl_random(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool disable_constraint_expansion = 181 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(181, this->_internal_disable_constraint_expansion(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool expand_reservoir_constraints = 182 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(182, this->_internal_expand_reservoir_constraints(), target);
  }

  // optional int32 symmetry_level = 183 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(183, this->_internal_symmetry_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string log_prefix = 185 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_log_prefix().data(), static_cast<int>(this->_internal_log_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.log_prefix");
    target = stream->WriteStringMaybeAliased(
        185, this->_internal_log_prefix(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool log_to_stdout = 186 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(186, this->_internal_log_to_stdout(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool log_to_response = 187 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(187, this->_internal_log_to_response(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool optimize_with_lb_tree_search = 188 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(188, this->_internal_optimize_with_lb_tree_search(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool log_subsolver_statistics = 189 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(189, this->_internal_log_subsolver_statistics(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional double clause_cleanup_ratio = 190 [default = 0.5];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(190, this->_internal_clause_cleanup_ratio(), target);
  }

  // optional int32 max_domain_size_when_encoding_eq_neq_constraints = 191 [default = 16];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(191, this->_internal_max_domain_size_when_encoding_eq_neq_constraints(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool fix_variables_to_their_hinted_value = 192 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(192, this->_internal_fix_variables_to_their_hinted_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 solution_pool_size = 193 [default = 3];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(193, this->_internal_solution_pool_size(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool fill_additional_solutions_in_response = 194 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(194, this->_internal_fill_additional_solutions_in_response(), target);
  }

  // optional bool debug_crash_on_bad_hint = 195 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(195, this->_internal_debug_crash_on_bad_hint(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 cut_level = 196 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(196, this->_internal_cut_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool add_objective_cut = 197 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(197, this->_internal_add_objective_cut(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool mip_compute_true_objective_bound = 198 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(198, this->_internal_mip_compute_true_objective_bound(), target);
  }

  // optional double mip_max_valid_magnitude = 199 [default = 1e+030];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(199, this->_internal_mip_max_valid_magnitude(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool use_timetabling_in_no_overlap_2d = 200 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(200, this->_internal_use_timetabling_in_no_overlap_2d(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int64 presolve_inclusion_work_limit = 201 [default = 100000000];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(201, this->_internal_presolve_inclusion_work_limit(), target);
  }

  // optional bool ignore_names = 202 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(202, this->_internal_ignore_names(), target);
  }

  // optional bool share_binary_clauses = 203 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(203, this->_internal_share_binary_clauses(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_shaving_in_probing_search = 204 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(204, this->_internal_use_shaving_in_probing_search(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional double shaving_search_deterministic_time = 205 [default = 0.001];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(205, this->_internal_shaving_search_deterministic_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 num_workers = 206 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(206, this->_internal_num_workers(), target);
  }

  // repeated string subsolvers = 207;
  for (int i = 0, n = this->_internal_subsolvers_size(); i < n; i++) {
    const auto& s = this->_internal_subsolvers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.subsolvers");
    target = stream->WriteString(207, s, target);
  }

  // repeated string ignore_subsolvers = 209;
  for (int i = 0, n = this->_internal_ignore_subsolvers_size(); i < n; i++) {
    const auto& s = this->_internal_ignore_subsolvers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.ignore_subsolvers");
    target = stream->WriteString(209, s, target);
  }

  // repeated .operations_research.sat.SatParameters subsolver_params = 210;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subsolver_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_subsolver_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(210, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 min_num_lns_workers = 211 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(211, this->_internal_min_num_lns_workers(), target);
  }

  // optional double log_frequency_in_seconds = 212 [default = -1];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(212, this->_internal_log_frequency_in_seconds(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool use_energetic_reasoning_in_no_overlap_2d = 213 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(213, this->_internal_use_energetic_reasoning_in_no_overlap_2d(), target);
  }

  cached_has_bits = _impl_._has_bits_[4];
  // optional bool use_dual_scheduling_heuristics = 214 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(214, this->_internal_use_dual_scheduling_heuristics(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool use_hard_precedences_in_cumulative = 215 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(215, this->_internal_use_hard_precedences_in_cumulative(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool detect_table_with_cost = 216 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(216, this->_internal_detect_table_with_cost(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 table_compression_level = 217 [default = 2];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(217, this->_internal_table_compression_level(), target);
  }

  // optional double model_reduction_log_frequency_in_seconds = 218 [default = 5];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(218, this->_internal_model_reduction_log_frequency_in_seconds(), target);
  }

  // repeated string extra_subsolvers = 219;
  for (int i = 0, n = this->_internal_extra_subsolvers_size(); i < n; i++) {
    const auto& s = this->_internal_extra_subsolvers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.extra_subsolvers");
    target = stream->WriteString(219, s, target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool exploit_all_precedences = 220 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(220, this->_internal_exploit_all_precedences(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional double propagation_loop_detection_factor = 221 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(221, this->_internal_propagation_loop_detection_factor(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool only_solve_ip = 222 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(222, this->_internal_only_solve_ip(), target);
  }

  // optional bool encode_complex_linear_constraint_with_integer = 223 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(223, this->_internal_encode_complex_linear_constraint_with_integer(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool new_linear_propagation = 224 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(224, this->_internal_new_linear_propagation(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool mip_scale_large_domain = 225 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(225, this->_internal_mip_scale_large_domain(), target);
  }

  cached_has_bits = _impl_._has_bits_[6];
  // optional double probing_deterministic_time_limit = 226 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(226, this->_internal_probing_deterministic_time_limit(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional int32 root_lp_iterations = 227 [default = 2000];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(227, this->_internal_root_lp_iterations(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool use_objective_lb_search = 228 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(228, this->_internal_use_objective_lb_search(), target);
  }

  cached_has_bits = _impl_._has_bits_[6];
  // optional int32 max_size_to_create_precedence_literals_in_disjunctive = 229 [default = 60];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(229, this->_internal_max_size_to_create_precedence_literals_in_disjunctive(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool use_strong_propagation_in_disjunctive = 230 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(230, this->_internal_use_strong_propagation_in_disjunctive(), target);
  }

  cached_has_bits = _impl_._has_bits_[6];
  // optional int32 objective_lns_min_size = 231 [default = 2147483647];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(231, this->_internal_objective_lns_min_size(), target);
  }

  // optional double mip_drop_tolerance = 232 [default = 1e-016];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(232, this->_internal_mip_drop_tolerance(), target);
  }

  cached_has_bits = _impl_._has_bits_[5];
  // optional bool infer_all_diffs = 233 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(233, this->_internal_infer_all_diffs(), target);
  }

  // optional bool find_big_linear_overlap = 234 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(234, this->_internal_find_big_linear_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.SatParameters)
  return target;
}

size_t SatParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.SatParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_restart_algorithms_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_restart_algorithms(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string subsolvers = 207;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.subsolvers_.size());
  for (int i = 0, n = _impl_.subsolvers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.subsolvers_.Get(i));
  }

  // repeated string ignore_subsolvers = 209;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ignore_subsolvers_.size());
  for (int i = 0, n = _impl_.ignore_subsolvers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ignore_subsolvers_.Get(i));
  }

  // repeated .operations_research.sat.SatParameters subsolver_params = 210;
  total_size += 2UL * this->_internal_subsolver_params_size();
  for (const auto& msg : this->_impl_.subsolver_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string extra_subsolvers = 219;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.extra_subsolvers_.size());
  for (int i = 0, n = _impl_.extra_subsolvers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.extra_subsolvers_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_restart_algorithms());
    }

    // optional string name = 171 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string log_prefix = 185 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_prefix());
    }

    // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_preferred_variable_order());
    }

    // optional int32 clause_cleanup_target = 13 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clause_cleanup_target());
    }

    // optional double random_branches_ratio = 32 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double random_polarity_ratio = 45 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_max_sat_assumption_order());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_clause_cleanup_protection());
    }

    // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_clause_cleanup_ordering());
    }

    // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_conflicts_before_strategy_changes());
    }

    // optional double strategy_change_increase_ratio = 69 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double initial_variables_activity = 76 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_search_branching());
    }

    // optional bool use_erwa_heuristic = 75 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool use_blocking_restart = 64 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool permute_variable_randomly = 178 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int64 search_randomization_tolerance = 104 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_search_randomization_tolerance());
    }

    // optional int32 num_search_workers = 100 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_search_workers());
    }

    // optional bool use_lns_only = 101 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool diversify_lns_params = 137 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool randomize_search = 103 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool use_optional_variables = 108 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool use_pb_resolution = 43 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_sat_inprocessing = 163 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool detect_table_with_cost = 216 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool optimize_with_lb_tree_search = 188 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool optimize_with_max_hs = 85 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool enumerate_all_solutions = 87 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool keep_all_feasible_solutions_in_presolve = 173 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 interleave_batch_size = 134 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_interleave_batch_size());
    }

    // optional bool interleave_search = 136 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool debug_postsolve_with_full_solver = 162 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool debug_crash_on_bad_hint = 195 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool max_sat_reverse_assumption_order = 52 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int64 probing_period_at_root = 142 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_probing_period_at_root());
    }

    // optional bool fill_tightened_domains_in_response = 132 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool fill_additional_solutions_in_response = 194 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool stop_after_first_solution = 98 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool stop_after_presolve = 149 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool permute_presolve_constraint_order = 179 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool use_absl_random = 180 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool log_search_progress = 41 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool log_to_response = 187 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool use_strong_propagation_in_disjunctive = 230 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool use_overload_checker_in_cumulative = 78 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool use_timetable_edge_finding_in_cumulative = 79 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool use_hard_precedences_in_cumulative = 215 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 debug_max_num_presolve_operations = 151 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_debug_max_num_presolve_operations());
    }

    // optional double relative_gap_limit = 160 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool exploit_relaxation_solution = 161 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool use_probing_search = 176 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool use_objective_lb_search = 228 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool optimize_with_core = 83 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool use_branching_in_lp = 139 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_combined_no_overlap = 133 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool polish_lp_solution = 175 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool new_linear_propagation = 224 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool add_objective_cut = 197 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool repair_hint = 167 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool fix_variables_to_their_hinted_value = 192 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_best_solution = 130 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool exploit_all_precedences = 220 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool use_timetabling_in_no_overlap_2d = 200 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool use_energetic_reasoning_in_no_overlap_2d = 213 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool only_add_cuts_at_level_zero = 92 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool expand_alldiff_constraints = 170 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool disable_constraint_expansion = 181 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool encode_complex_linear_constraint_with_integer = 223 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool presolve_extract_integer_enforcement = 174 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 num_workers = 206 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_workers());
    }

    // optional bool mip_scale_large_domain = 225 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool only_solve_ip = 222 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_initial_polarity());
    }

    // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_minimization_algorithm());
    }

    // optional double variable_activity_decay = 15 [default = 0.8];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double max_variable_activity_value = 16 [default = 1e+100];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double clause_activity_decay = 17 [default = 0.999];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 clause_cleanup_period = 11 [default = 10000];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clause_cleanup_period());
    }

    // optional int32 glucose_decay_increment_period = 24 [default = 5000];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_glucose_decay_increment_period());
    }

    // optional double max_clause_activity_value = 18 [default = 1e+020];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double glucose_max_decay = 22 [default = 0.95];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double glucose_decay_increment = 23 [default = 0.01];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional int32 restart_period = 30 [default = 50];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_restart_period());
    }

    // optional int32 random_seed = 31 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_random_seed());
    }

    // optional double max_time_in_seconds = 36 [default = inf];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_max_number_of_conflicts());
    }

    // optional int64 max_memory_in_mb = 40 [default = 10000];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_max_memory_in_mb());
    }

    // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_binary_minimization_algorithm());
    }

    // optional int32 pb_cleanup_increment = 46 [default = 200];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_pb_cleanup_increment());
    }

    // optional double pb_cleanup_ratio = 47 [default = 0.5];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_max_sat_stratification());
    }

    // optional int32 presolve_bve_threshold = 54 [default = 500];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_presolve_bve_threshold());
    }

    // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 presolve_bve_clause_weight = 55 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_presolve_bve_clause_weight());
    }

    // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_clause_cleanup_lbd_bound());
    }

    // optional double restart_dl_average_ratio = 63 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional int32 restart_running_window_size = 62 [default = 50];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_restart_running_window_size());
    }

    // optional bool use_optimization_hints = 35 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool minimize_core = 50 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool find_multiple_cores = 84 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool cover_optimization = 89 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double blocking_restart_multiplier = 66 [default = 1.4];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double max_deterministic_time = 67 [default = inf];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional int32 blocking_restart_window_size = 65 [default = 5000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_blocking_restart_window_size());
    }

    // optional int32 presolve_bva_threshold = 73 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_presolve_bva_threshold());
    }

    // optional double restart_lbd_average_ratio = 71 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional bool count_assumption_levels_in_lbd = 49 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool presolve_blocked_clause = 88 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool presolve_use_bva = 72 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool cp_model_presolve = 86 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 linearization_level = 90 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_linearization_level());
    }

    // optional int32 max_num_cuts = 91 [default = 10000];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_num_cuts());
    }

    // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minimize_with_propagation_restart_period());
    }

    // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_minimize_with_propagation_num_decisions());
    }

    // optional int32 binary_search_num_conflicts = 99 [default = -1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_binary_search_num_conflicts());
    }

    // optional int32 boolean_encoding_level = 107 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_boolean_encoding_level());
    }

    // optional int32 cp_model_probing_level = 110 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_cp_model_probing_level());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional bool add_lp_constraints_lazily = 112 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_integer_lp_solution = 94 [default = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_all_lp_solution = 116 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_objective = 131 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_phase_saving = 44 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool subsumption_during_conflict_analysis = 56 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool log_subsolver_statistics = 189 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool log_to_stdout = 186 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional int32 max_integer_rounding_scaling = 119 [default = 600];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_integer_rounding_scaling());
    }

    // optional int32 max_consecutive_inactive_count = 121 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_consecutive_inactive_count());
    }

    // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool use_disjunctive_constraint_in_cumulative = 80 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool use_dual_scheduling_heuristics = 214 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool add_cg_cuts = 117 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 new_constraints_batch_size = 122 [default = 50];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_new_constraints_batch_size());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_pseudo_cost_reliability_threshold());
    }

    // optional double mip_max_bound = 124 [default = 10000000];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double mip_var_scaling = 125 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double mip_wanted_precision = 126 [default = 1e-006];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double mip_check_precision = 128 [default = 0.0001];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int32 mip_max_activity_exponent = 127 [default = 53];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_mip_max_activity_exponent());
    }

    // optional bool use_shaving_in_probing_search = 204 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool instantiate_all_variables = 106 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool use_rins_lns = 129 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_presolve_iterations = 138 [default = 3];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_presolve_iterations());
    }

    // optional bool use_feasibility_pump = 164 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool use_exact_lp_reason = 109 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool catch_sigint_signal = 135 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool use_implied_bounds = 144 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional int32 presolve_substitution_level = 147 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_presolve_substitution_level());
    }

    // optional int32 max_all_diff_cut_size = 148 [default = 64];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_all_diff_cut_size());
    }

    // optional int32 hint_conflict_limit = 153 [default = 10];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_hint_conflict_limit());
    }

    // optional bool add_mir_cuts = 120 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool add_zero_half_cuts = 169 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool add_clique_cuts = 172 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool add_lin_max_cuts = 152 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    // optional double cut_max_active_count_value = 155 [default = 10000000000];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_cut_rounds_at_level_zero());
    }

    // optional int32 cut_cleanup_target = 157 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_cut_cleanup_target());
    }

    // optional double cut_active_count_decay = 156 [default = 0.8];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double absolute_gap_limit = 159 [default = 0.0001];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fp_rounding());
    }

    // optional bool find_big_linear_overlap = 234 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool share_objective_bounds = 113 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool share_level_zero_bounds = 114 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool share_binary_clauses = 203 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 polarity_rephase_increment = 168 [default = 1000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_polarity_rephase_increment());
    }

    // optional bool cp_model_use_sat_presolve = 93 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool expand_reservoir_constraints = 182 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_names = 202 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool infer_all_diffs = 233 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool convert_intervals = 177 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool mip_automatically_scale_variables = 166 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool mip_compute_true_objective_bound = 198 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 symmetry_level = 183 [default = 2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_symmetry_level());
    }

    // optional double clause_cleanup_ratio = 190 [default = 0.5];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_domain_size_when_encoding_eq_neq_constraints = 191 [default = 16];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_domain_size_when_encoding_eq_neq_constraints());
    }

    // optional int32 solution_pool_size = 193 [default = 3];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_solution_pool_size());
    }

    // optional double mip_max_valid_magnitude = 199 [default = 1e+030];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional int64 presolve_inclusion_work_limit = 201 [default = 100000000];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_presolve_inclusion_work_limit());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 cut_level = 196 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_cut_level());
    }

    // optional int32 min_num_lns_workers = 211 [default = 2];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_min_num_lns_workers());
    }

    // optional double shaving_search_deterministic_time = 205 [default = 0.001];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double log_frequency_in_seconds = 212 [default = -1];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double model_reduction_log_frequency_in_seconds = 218 [default = 5];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double propagation_loop_detection_factor = 221 [default = 10];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional int32 table_compression_level = 217 [default = 2];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_table_compression_level());
    }

    // optional int32 root_lp_iterations = 227 [default = 2000];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_root_lp_iterations());
    }

  }
  cached_has_bits = _impl_._has_bits_[6];
  if (cached_has_bits & 0x0000000fu) {
    // optional double probing_deterministic_time_limit = 226 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional int32 max_size_to_create_precedence_literals_in_disjunctive = 229 [default = 60];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_size_to_create_precedence_literals_in_disjunctive());
    }

    // optional int32 objective_lns_min_size = 231 [default = 2147483647];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_objective_lns_min_size());
    }

    // optional double mip_drop_tolerance = 232 [default = 1e-016];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SatParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SatParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SatParameters::GetClassData() const { return &_class_data_; }


void SatParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SatParameters*>(&to_msg);
  auto& from = static_cast<const SatParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.SatParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.restart_algorithms_.MergeFrom(from._impl_.restart_algorithms_);
  _this->_impl_.subsolvers_.MergeFrom(from._impl_.subsolvers_);
  _this->_impl_.ignore_subsolvers_.MergeFrom(from._impl_.ignore_subsolvers_);
  _this->_impl_.subsolver_params_.MergeFrom(from._impl_.subsolver_params_);
  _this->_impl_.extra_subsolvers_.MergeFrom(from._impl_.extra_subsolvers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_default_restart_algorithms(from._internal_default_restart_algorithms());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_log_prefix(from._internal_log_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.preferred_variable_order_ = from._impl_.preferred_variable_order_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.clause_cleanup_target_ = from._impl_.clause_cleanup_target_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.random_branches_ratio_ = from._impl_.random_branches_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.random_polarity_ratio_ = from._impl_.random_polarity_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.max_sat_assumption_order_ = from._impl_.max_sat_assumption_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.clause_cleanup_protection_ = from._impl_.clause_cleanup_protection_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.clause_cleanup_ordering_ = from._impl_.clause_cleanup_ordering_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.num_conflicts_before_strategy_changes_ = from._impl_.num_conflicts_before_strategy_changes_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.strategy_change_increase_ratio_ = from._impl_.strategy_change_increase_ratio_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.initial_variables_activity_ = from._impl_.initial_variables_activity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.search_branching_ = from._impl_.search_branching_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.use_erwa_heuristic_ = from._impl_.use_erwa_heuristic_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.also_bump_variables_in_conflict_reasons_ = from._impl_.also_bump_variables_in_conflict_reasons_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.use_blocking_restart_ = from._impl_.use_blocking_restart_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.permute_variable_randomly_ = from._impl_.permute_variable_randomly_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.search_randomization_tolerance_ = from._impl_.search_randomization_tolerance_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.num_search_workers_ = from._impl_.num_search_workers_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.use_lns_only_ = from._impl_.use_lns_only_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.diversify_lns_params_ = from._impl_.diversify_lns_params_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.randomize_search_ = from._impl_.randomize_search_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.use_optional_variables_ = from._impl_.use_optional_variables_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.use_pb_resolution_ = from._impl_.use_pb_resolution_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.minimize_reduction_during_pb_resolution_ = from._impl_.minimize_reduction_during_pb_resolution_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.use_sat_inprocessing_ = from._impl_.use_sat_inprocessing_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.detect_table_with_cost_ = from._impl_.detect_table_with_cost_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.optimize_with_lb_tree_search_ = from._impl_.optimize_with_lb_tree_search_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.optimize_with_max_hs_ = from._impl_.optimize_with_max_hs_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.enumerate_all_solutions_ = from._impl_.enumerate_all_solutions_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.keep_all_feasible_solutions_in_presolve_ = from._impl_.keep_all_feasible_solutions_in_presolve_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.interleave_batch_size_ = from._impl_.interleave_batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.interleave_search_ = from._impl_.interleave_search_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.debug_postsolve_with_full_solver_ = from._impl_.debug_postsolve_with_full_solver_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.debug_crash_on_bad_hint_ = from._impl_.debug_crash_on_bad_hint_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_sat_reverse_assumption_order_ = from._impl_.max_sat_reverse_assumption_order_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.probing_period_at_root_ = from._impl_.probing_period_at_root_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fill_tightened_domains_in_response_ = from._impl_.fill_tightened_domains_in_response_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fill_additional_solutions_in_response_ = from._impl_.fill_additional_solutions_in_response_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stop_after_first_solution_ = from._impl_.stop_after_first_solution_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.stop_after_presolve_ = from._impl_.stop_after_presolve_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.permute_presolve_constraint_order_ = from._impl_.permute_presolve_constraint_order_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.use_absl_random_ = from._impl_.use_absl_random_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.log_search_progress_ = from._impl_.log_search_progress_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.log_to_response_ = from._impl_.log_to_response_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.use_strong_propagation_in_disjunctive_ = from._impl_.use_strong_propagation_in_disjunctive_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.use_overload_checker_in_cumulative_ = from._impl_.use_overload_checker_in_cumulative_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.use_timetable_edge_finding_in_cumulative_ = from._impl_.use_timetable_edge_finding_in_cumulative_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.use_hard_precedences_in_cumulative_ = from._impl_.use_hard_precedences_in_cumulative_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.debug_max_num_presolve_operations_ = from._impl_.debug_max_num_presolve_operations_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.relative_gap_limit_ = from._impl_.relative_gap_limit_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.exploit_relaxation_solution_ = from._impl_.exploit_relaxation_solution_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.use_probing_search_ = from._impl_.use_probing_search_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.use_objective_lb_search_ = from._impl_.use_objective_lb_search_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.optimize_with_core_ = from._impl_.optimize_with_core_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.use_branching_in_lp_ = from._impl_.use_branching_in_lp_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.use_combined_no_overlap_ = from._impl_.use_combined_no_overlap_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.polish_lp_solution_ = from._impl_.polish_lp_solution_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.new_linear_propagation_ = from._impl_.new_linear_propagation_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.add_objective_cut_ = from._impl_.add_objective_cut_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.repair_hint_ = from._impl_.repair_hint_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.fix_variables_to_their_hinted_value_ = from._impl_.fix_variables_to_their_hinted_value_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.exploit_best_solution_ = from._impl_.exploit_best_solution_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.exploit_all_precedences_ = from._impl_.exploit_all_precedences_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.use_timetabling_in_no_overlap_2d_ = from._impl_.use_timetabling_in_no_overlap_2d_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.use_energetic_reasoning_in_no_overlap_2d_ = from._impl_.use_energetic_reasoning_in_no_overlap_2d_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.only_add_cuts_at_level_zero_ = from._impl_.only_add_cuts_at_level_zero_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.expand_alldiff_constraints_ = from._impl_.expand_alldiff_constraints_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.disable_constraint_expansion_ = from._impl_.disable_constraint_expansion_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.encode_complex_linear_constraint_with_integer_ = from._impl_.encode_complex_linear_constraint_with_integer_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.presolve_extract_integer_enforcement_ = from._impl_.presolve_extract_integer_enforcement_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.num_workers_ = from._impl_.num_workers_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mip_scale_large_domain_ = from._impl_.mip_scale_large_domain_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.only_solve_ip_ = from._impl_.only_solve_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.initial_polarity_ = from._impl_.initial_polarity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.minimization_algorithm_ = from._impl_.minimization_algorithm_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.variable_activity_decay_ = from._impl_.variable_activity_decay_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_variable_activity_value_ = from._impl_.max_variable_activity_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.clause_activity_decay_ = from._impl_.clause_activity_decay_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.clause_cleanup_period_ = from._impl_.clause_cleanup_period_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.glucose_decay_increment_period_ = from._impl_.glucose_decay_increment_period_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.max_clause_activity_value_ = from._impl_.max_clause_activity_value_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.glucose_max_decay_ = from._impl_.glucose_max_decay_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.glucose_decay_increment_ = from._impl_.glucose_decay_increment_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.restart_period_ = from._impl_.restart_period_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.random_seed_ = from._impl_.random_seed_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.max_time_in_seconds_ = from._impl_.max_time_in_seconds_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.max_number_of_conflicts_ = from._impl_.max_number_of_conflicts_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.max_memory_in_mb_ = from._impl_.max_memory_in_mb_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.binary_minimization_algorithm_ = from._impl_.binary_minimization_algorithm_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.pb_cleanup_increment_ = from._impl_.pb_cleanup_increment_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.pb_cleanup_ratio_ = from._impl_.pb_cleanup_ratio_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.max_sat_stratification_ = from._impl_.max_sat_stratification_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.presolve_bve_threshold_ = from._impl_.presolve_bve_threshold_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.presolve_probing_deterministic_time_limit_ = from._impl_.presolve_probing_deterministic_time_limit_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.presolve_bve_clause_weight_ = from._impl_.presolve_bve_clause_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clause_cleanup_lbd_bound_ = from._impl_.clause_cleanup_lbd_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.restart_dl_average_ratio_ = from._impl_.restart_dl_average_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.restart_running_window_size_ = from._impl_.restart_running_window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.use_optimization_hints_ = from._impl_.use_optimization_hints_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.minimize_core_ = from._impl_.minimize_core_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.find_multiple_cores_ = from._impl_.find_multiple_cores_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cover_optimization_ = from._impl_.cover_optimization_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.blocking_restart_multiplier_ = from._impl_.blocking_restart_multiplier_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_deterministic_time_ = from._impl_.max_deterministic_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.blocking_restart_window_size_ = from._impl_.blocking_restart_window_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.presolve_bva_threshold_ = from._impl_.presolve_bva_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.restart_lbd_average_ratio_ = from._impl_.restart_lbd_average_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.count_assumption_levels_in_lbd_ = from._impl_.count_assumption_levels_in_lbd_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.presolve_blocked_clause_ = from._impl_.presolve_blocked_clause_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.presolve_use_bva_ = from._impl_.presolve_use_bva_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.cp_model_presolve_ = from._impl_.cp_model_presolve_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.linearization_level_ = from._impl_.linearization_level_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.max_num_cuts_ = from._impl_.max_num_cuts_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.minimize_with_propagation_restart_period_ = from._impl_.minimize_with_propagation_restart_period_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.minimize_with_propagation_num_decisions_ = from._impl_.minimize_with_propagation_num_decisions_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.binary_search_num_conflicts_ = from._impl_.binary_search_num_conflicts_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.boolean_encoding_level_ = from._impl_.boolean_encoding_level_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.cp_model_probing_level_ = from._impl_.cp_model_probing_level_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.min_orthogonality_for_lp_constraints_ = from._impl_.min_orthogonality_for_lp_constraints_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.add_lp_constraints_lazily_ = from._impl_.add_lp_constraints_lazily_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.exploit_integer_lp_solution_ = from._impl_.exploit_integer_lp_solution_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.exploit_all_lp_solution_ = from._impl_.exploit_all_lp_solution_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.exploit_objective_ = from._impl_.exploit_objective_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.use_phase_saving_ = from._impl_.use_phase_saving_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.subsumption_during_conflict_analysis_ = from._impl_.subsumption_during_conflict_analysis_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.log_subsolver_statistics_ = from._impl_.log_subsolver_statistics_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.log_to_stdout_ = from._impl_.log_to_stdout_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_integer_rounding_scaling_ = from._impl_.max_integer_rounding_scaling_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_consecutive_inactive_count_ = from._impl_.max_consecutive_inactive_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_precedences_in_disjunctive_constraint_ = from._impl_.use_precedences_in_disjunctive_constraint_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.use_disjunctive_constraint_in_cumulative_ = from._impl_.use_disjunctive_constraint_in_cumulative_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.use_dual_scheduling_heuristics_ = from._impl_.use_dual_scheduling_heuristics_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.add_cg_cuts_ = from._impl_.add_cg_cuts_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.new_constraints_batch_size_ = from._impl_.new_constraints_batch_size_;
    }
    _this->_impl_._has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pseudo_cost_reliability_threshold_ = from._impl_.pseudo_cost_reliability_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mip_max_bound_ = from._impl_.mip_max_bound_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.mip_var_scaling_ = from._impl_.mip_var_scaling_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.mip_wanted_precision_ = from._impl_.mip_wanted_precision_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mip_check_precision_ = from._impl_.mip_check_precision_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.mip_max_activity_exponent_ = from._impl_.mip_max_activity_exponent_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.use_shaving_in_probing_search_ = from._impl_.use_shaving_in_probing_search_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.instantiate_all_variables_ = from._impl_.instantiate_all_variables_;
    }
    _this->_impl_._has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.auto_detect_greater_than_at_least_one_of_ = from._impl_.auto_detect_greater_than_at_least_one_of_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.use_rins_lns_ = from._impl_.use_rins_lns_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.max_presolve_iterations_ = from._impl_.max_presolve_iterations_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.use_feasibility_pump_ = from._impl_.use_feasibility_pump_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.use_exact_lp_reason_ = from._impl_.use_exact_lp_reason_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.catch_sigint_signal_ = from._impl_.catch_sigint_signal_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.use_implied_bounds_ = from._impl_.use_implied_bounds_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.merge_no_overlap_work_limit_ = from._impl_.merge_no_overlap_work_limit_;
    }
    _this->_impl_._has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.merge_at_most_one_work_limit_ = from._impl_.merge_at_most_one_work_limit_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.presolve_substitution_level_ = from._impl_.presolve_substitution_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.max_all_diff_cut_size_ = from._impl_.max_all_diff_cut_size_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.hint_conflict_limit_ = from._impl_.hint_conflict_limit_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.add_mir_cuts_ = from._impl_.add_mir_cuts_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.add_zero_half_cuts_ = from._impl_.add_zero_half_cuts_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.add_clique_cuts_ = from._impl_.add_clique_cuts_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.add_lin_max_cuts_ = from._impl_.add_lin_max_cuts_;
    }
    _this->_impl_._has_bits_[4] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cut_max_active_count_value_ = from._impl_.cut_max_active_count_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_cut_rounds_at_level_zero_ = from._impl_.max_cut_rounds_at_level_zero_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cut_cleanup_target_ = from._impl_.cut_cleanup_target_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cut_active_count_decay_ = from._impl_.cut_active_count_decay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.absolute_gap_limit_ = from._impl_.absolute_gap_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.fp_rounding_ = from._impl_.fp_rounding_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.find_big_linear_overlap_ = from._impl_.find_big_linear_overlap_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.share_objective_bounds_ = from._impl_.share_objective_bounds_;
    }
    _this->_impl_._has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.share_level_zero_bounds_ = from._impl_.share_level_zero_bounds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.share_binary_clauses_ = from._impl_.share_binary_clauses_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.polarity_rephase_increment_ = from._impl_.polarity_rephase_increment_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.cp_model_use_sat_presolve_ = from._impl_.cp_model_use_sat_presolve_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.expand_reservoir_constraints_ = from._impl_.expand_reservoir_constraints_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ignore_names_ = from._impl_.ignore_names_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.infer_all_diffs_ = from._impl_.infer_all_diffs_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.convert_intervals_ = from._impl_.convert_intervals_;
    }
    _this->_impl_._has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.mip_automatically_scale_variables_ = from._impl_.mip_automatically_scale_variables_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.mip_compute_true_objective_bound_ = from._impl_.mip_compute_true_objective_bound_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.symmetry_level_ = from._impl_.symmetry_level_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.clause_cleanup_ratio_ = from._impl_.clause_cleanup_ratio_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.max_domain_size_when_encoding_eq_neq_constraints_ = from._impl_.max_domain_size_when_encoding_eq_neq_constraints_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.solution_pool_size_ = from._impl_.solution_pool_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.mip_max_valid_magnitude_ = from._impl_.mip_max_valid_magnitude_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.presolve_inclusion_work_limit_ = from._impl_.presolve_inclusion_work_limit_;
    }
    _this->_impl_._has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.cut_level_ = from._impl_.cut_level_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.min_num_lns_workers_ = from._impl_.min_num_lns_workers_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.shaving_search_deterministic_time_ = from._impl_.shaving_search_deterministic_time_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.log_frequency_in_seconds_ = from._impl_.log_frequency_in_seconds_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.model_reduction_log_frequency_in_seconds_ = from._impl_.model_reduction_log_frequency_in_seconds_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.propagation_loop_detection_factor_ = from._impl_.propagation_loop_detection_factor_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.table_compression_level_ = from._impl_.table_compression_level_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.root_lp_iterations_ = from._impl_.root_lp_iterations_;
    }
    _this->_impl_._has_bits_[5] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[6];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.probing_deterministic_time_limit_ = from._impl_.probing_deterministic_time_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_size_to_create_precedence_literals_in_disjunctive_ = from._impl_.max_size_to_create_precedence_literals_in_disjunctive_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.objective_lns_min_size_ = from._impl_.objective_lns_min_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mip_drop_tolerance_ = from._impl_.mip_drop_tolerance_;
    }
    _this->_impl_._has_bits_[6] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SatParameters::CopyFrom(const SatParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.SatParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatParameters::IsInitialized() const {
  return true;
}

void SatParameters::InternalSwap(SatParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  swap(_impl_._has_bits_[4], other->_impl_._has_bits_[4]);
  swap(_impl_._has_bits_[5], other->_impl_._has_bits_[5]);
  swap(_impl_._has_bits_[6], other->_impl_._has_bits_[6]);
  _impl_.restart_algorithms_.InternalSwap(&other->_impl_.restart_algorithms_);
  _impl_.subsolvers_.InternalSwap(&other->_impl_.subsolvers_);
  _impl_.ignore_subsolvers_.InternalSwap(&other->_impl_.ignore_subsolvers_);
  _impl_.subsolver_params_.InternalSwap(&other->_impl_.subsolver_params_);
  _impl_.extra_subsolvers_.InternalSwap(&other->_impl_.extra_subsolvers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_restart_algorithms_, lhs_arena,
      &other->_impl_.default_restart_algorithms_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_prefix_, lhs_arena,
      &other->_impl_.log_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatParameters, _impl_.only_solve_ip_)
      + sizeof(SatParameters::_impl_.only_solve_ip_)
      - PROTOBUF_FIELD_OFFSET(SatParameters, _impl_.preferred_variable_order_)>(
          reinterpret_cast<char*>(&_impl_.preferred_variable_order_),
          reinterpret_cast<char*>(&other->_impl_.preferred_variable_order_));
  swap(_impl_.initial_polarity_, other->_impl_.initial_polarity_);
  swap(_impl_.minimization_algorithm_, other->_impl_.minimization_algorithm_);
  swap(_impl_.variable_activity_decay_, other->_impl_.variable_activity_decay_);
  swap(_impl_.max_variable_activity_value_, other->_impl_.max_variable_activity_value_);
  swap(_impl_.clause_activity_decay_, other->_impl_.clause_activity_decay_);
  swap(_impl_.clause_cleanup_period_, other->_impl_.clause_cleanup_period_);
  swap(_impl_.glucose_decay_increment_period_, other->_impl_.glucose_decay_increment_period_);
  swap(_impl_.max_clause_activity_value_, other->_impl_.max_clause_activity_value_);
  swap(_impl_.glucose_max_decay_, other->_impl_.glucose_max_decay_);
  swap(_impl_.glucose_decay_increment_, other->_impl_.glucose_decay_increment_);
  swap(_impl_.restart_period_, other->_impl_.restart_period_);
  swap(_impl_.random_seed_, other->_impl_.random_seed_);
  swap(_impl_.max_time_in_seconds_, other->_impl_.max_time_in_seconds_);
  swap(_impl_.max_number_of_conflicts_, other->_impl_.max_number_of_conflicts_);
  swap(_impl_.max_memory_in_mb_, other->_impl_.max_memory_in_mb_);
  swap(_impl_.binary_minimization_algorithm_, other->_impl_.binary_minimization_algorithm_);
  swap(_impl_.pb_cleanup_increment_, other->_impl_.pb_cleanup_increment_);
  swap(_impl_.pb_cleanup_ratio_, other->_impl_.pb_cleanup_ratio_);
  swap(_impl_.max_sat_stratification_, other->_impl_.max_sat_stratification_);
  swap(_impl_.presolve_bve_threshold_, other->_impl_.presolve_bve_threshold_);
  swap(_impl_.presolve_probing_deterministic_time_limit_, other->_impl_.presolve_probing_deterministic_time_limit_);
  swap(_impl_.presolve_bve_clause_weight_, other->_impl_.presolve_bve_clause_weight_);
  swap(_impl_.clause_cleanup_lbd_bound_, other->_impl_.clause_cleanup_lbd_bound_);
  swap(_impl_.restart_dl_average_ratio_, other->_impl_.restart_dl_average_ratio_);
  swap(_impl_.restart_running_window_size_, other->_impl_.restart_running_window_size_);
  swap(_impl_.use_optimization_hints_, other->_impl_.use_optimization_hints_);
  swap(_impl_.minimize_core_, other->_impl_.minimize_core_);
  swap(_impl_.find_multiple_cores_, other->_impl_.find_multiple_cores_);
  swap(_impl_.cover_optimization_, other->_impl_.cover_optimization_);
  swap(_impl_.blocking_restart_multiplier_, other->_impl_.blocking_restart_multiplier_);
  swap(_impl_.max_deterministic_time_, other->_impl_.max_deterministic_time_);
  swap(_impl_.blocking_restart_window_size_, other->_impl_.blocking_restart_window_size_);
  swap(_impl_.presolve_bva_threshold_, other->_impl_.presolve_bva_threshold_);
  swap(_impl_.restart_lbd_average_ratio_, other->_impl_.restart_lbd_average_ratio_);
  swap(_impl_.count_assumption_levels_in_lbd_, other->_impl_.count_assumption_levels_in_lbd_);
  swap(_impl_.presolve_blocked_clause_, other->_impl_.presolve_blocked_clause_);
  swap(_impl_.presolve_use_bva_, other->_impl_.presolve_use_bva_);
  swap(_impl_.cp_model_presolve_, other->_impl_.cp_model_presolve_);
  swap(_impl_.linearization_level_, other->_impl_.linearization_level_);
  swap(_impl_.max_num_cuts_, other->_impl_.max_num_cuts_);
  swap(_impl_.minimize_with_propagation_restart_period_, other->_impl_.minimize_with_propagation_restart_period_);
  swap(_impl_.minimize_with_propagation_num_decisions_, other->_impl_.minimize_with_propagation_num_decisions_);
  swap(_impl_.binary_search_num_conflicts_, other->_impl_.binary_search_num_conflicts_);
  swap(_impl_.boolean_encoding_level_, other->_impl_.boolean_encoding_level_);
  swap(_impl_.cp_model_probing_level_, other->_impl_.cp_model_probing_level_);
  swap(_impl_.min_orthogonality_for_lp_constraints_, other->_impl_.min_orthogonality_for_lp_constraints_);
  swap(_impl_.add_lp_constraints_lazily_, other->_impl_.add_lp_constraints_lazily_);
  swap(_impl_.exploit_integer_lp_solution_, other->_impl_.exploit_integer_lp_solution_);
  swap(_impl_.exploit_all_lp_solution_, other->_impl_.exploit_all_lp_solution_);
  swap(_impl_.exploit_objective_, other->_impl_.exploit_objective_);
  swap(_impl_.use_phase_saving_, other->_impl_.use_phase_saving_);
  swap(_impl_.subsumption_during_conflict_analysis_, other->_impl_.subsumption_during_conflict_analysis_);
  swap(_impl_.log_subsolver_statistics_, other->_impl_.log_subsolver_statistics_);
  swap(_impl_.log_to_stdout_, other->_impl_.log_to_stdout_);
  swap(_impl_.max_integer_rounding_scaling_, other->_impl_.max_integer_rounding_scaling_);
  swap(_impl_.max_consecutive_inactive_count_, other->_impl_.max_consecutive_inactive_count_);
  swap(_impl_.use_precedences_in_disjunctive_constraint_, other->_impl_.use_precedences_in_disjunctive_constraint_);
  swap(_impl_.use_disjunctive_constraint_in_cumulative_, other->_impl_.use_disjunctive_constraint_in_cumulative_);
  swap(_impl_.use_dual_scheduling_heuristics_, other->_impl_.use_dual_scheduling_heuristics_);
  swap(_impl_.add_cg_cuts_, other->_impl_.add_cg_cuts_);
  swap(_impl_.new_constraints_batch_size_, other->_impl_.new_constraints_batch_size_);
  swap(_impl_.pseudo_cost_reliability_threshold_, other->_impl_.pseudo_cost_reliability_threshold_);
  swap(_impl_.mip_max_bound_, other->_impl_.mip_max_bound_);
  swap(_impl_.mip_var_scaling_, other->_impl_.mip_var_scaling_);
  swap(_impl_.mip_wanted_precision_, other->_impl_.mip_wanted_precision_);
  swap(_impl_.mip_check_precision_, other->_impl_.mip_check_precision_);
  swap(_impl_.mip_max_activity_exponent_, other->_impl_.mip_max_activity_exponent_);
  swap(_impl_.use_shaving_in_probing_search_, other->_impl_.use_shaving_in_probing_search_);
  swap(_impl_.instantiate_all_variables_, other->_impl_.instantiate_all_variables_);
  swap(_impl_.auto_detect_greater_than_at_least_one_of_, other->_impl_.auto_detect_greater_than_at_least_one_of_);
  swap(_impl_.use_rins_lns_, other->_impl_.use_rins_lns_);
  swap(_impl_.max_presolve_iterations_, other->_impl_.max_presolve_iterations_);
  swap(_impl_.use_feasibility_pump_, other->_impl_.use_feasibility_pump_);
  swap(_impl_.use_exact_lp_reason_, other->_impl_.use_exact_lp_reason_);
  swap(_impl_.catch_sigint_signal_, other->_impl_.catch_sigint_signal_);
  swap(_impl_.use_implied_bounds_, other->_impl_.use_implied_bounds_);
  swap(_impl_.merge_no_overlap_work_limit_, other->_impl_.merge_no_overlap_work_limit_);
  swap(_impl_.merge_at_most_one_work_limit_, other->_impl_.merge_at_most_one_work_limit_);
  swap(_impl_.presolve_substitution_level_, other->_impl_.presolve_substitution_level_);
  swap(_impl_.max_all_diff_cut_size_, other->_impl_.max_all_diff_cut_size_);
  swap(_impl_.hint_conflict_limit_, other->_impl_.hint_conflict_limit_);
  swap(_impl_.add_mir_cuts_, other->_impl_.add_mir_cuts_);
  swap(_impl_.add_zero_half_cuts_, other->_impl_.add_zero_half_cuts_);
  swap(_impl_.add_clique_cuts_, other->_impl_.add_clique_cuts_);
  swap(_impl_.add_lin_max_cuts_, other->_impl_.add_lin_max_cuts_);
  swap(_impl_.cut_max_active_count_value_, other->_impl_.cut_max_active_count_value_);
  swap(_impl_.max_cut_rounds_at_level_zero_, other->_impl_.max_cut_rounds_at_level_zero_);
  swap(_impl_.cut_cleanup_target_, other->_impl_.cut_cleanup_target_);
  swap(_impl_.cut_active_count_decay_, other->_impl_.cut_active_count_decay_);
  swap(_impl_.absolute_gap_limit_, other->_impl_.absolute_gap_limit_);
  swap(_impl_.fp_rounding_, other->_impl_.fp_rounding_);
  swap(_impl_.find_big_linear_overlap_, other->_impl_.find_big_linear_overlap_);
  swap(_impl_.share_objective_bounds_, other->_impl_.share_objective_bounds_);
  swap(_impl_.share_level_zero_bounds_, other->_impl_.share_level_zero_bounds_);
  swap(_impl_.share_binary_clauses_, other->_impl_.share_binary_clauses_);
  swap(_impl_.polarity_rephase_increment_, other->_impl_.polarity_rephase_increment_);
  swap(_impl_.cp_model_use_sat_presolve_, other->_impl_.cp_model_use_sat_presolve_);
  swap(_impl_.expand_reservoir_constraints_, other->_impl_.expand_reservoir_constraints_);
  swap(_impl_.ignore_names_, other->_impl_.ignore_names_);
  swap(_impl_.infer_all_diffs_, other->_impl_.infer_all_diffs_);
  swap(_impl_.convert_intervals_, other->_impl_.convert_intervals_);
  swap(_impl_.mip_automatically_scale_variables_, other->_impl_.mip_automatically_scale_variables_);
  swap(_impl_.mip_compute_true_objective_bound_, other->_impl_.mip_compute_true_objective_bound_);
  swap(_impl_.symmetry_level_, other->_impl_.symmetry_level_);
  swap(_impl_.clause_cleanup_ratio_, other->_impl_.clause_cleanup_ratio_);
  swap(_impl_.max_domain_size_when_encoding_eq_neq_constraints_, other->_impl_.max_domain_size_when_encoding_eq_neq_constraints_);
  swap(_impl_.solution_pool_size_, other->_impl_.solution_pool_size_);
  swap(_impl_.mip_max_valid_magnitude_, other->_impl_.mip_max_valid_magnitude_);
  swap(_impl_.presolve_inclusion_work_limit_, other->_impl_.presolve_inclusion_work_limit_);
  swap(_impl_.cut_level_, other->_impl_.cut_level_);
  swap(_impl_.min_num_lns_workers_, other->_impl_.min_num_lns_workers_);
  swap(_impl_.shaving_search_deterministic_time_, other->_impl_.shaving_search_deterministic_time_);
  swap(_impl_.log_frequency_in_seconds_, other->_impl_.log_frequency_in_seconds_);
  swap(_impl_.model_reduction_log_frequency_in_seconds_, other->_impl_.model_reduction_log_frequency_in_seconds_);
  swap(_impl_.propagation_loop_detection_factor_, other->_impl_.propagation_loop_detection_factor_);
  swap(_impl_.table_compression_level_, other->_impl_.table_compression_level_);
  swap(_impl_.root_lp_iterations_, other->_impl_.root_lp_iterations_);
  swap(_impl_.probing_deterministic_time_limit_, other->_impl_.probing_deterministic_time_limit_);
  swap(_impl_.max_size_to_create_precedence_literals_in_disjunctive_, other->_impl_.max_size_to_create_precedence_literals_in_disjunctive_);
  swap(_impl_.objective_lns_min_size_, other->_impl_.objective_lns_min_size_);
  swap(_impl_.mip_drop_tolerance_, other->_impl_.mip_drop_tolerance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SatParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_getter, &descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_once,
      file_level_metadata_ortools_2fsat_2fsat_5fparameters_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::sat::SatParameters*
Arena::CreateMaybeMessage< ::operations_research::sat::SatParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::SatParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
