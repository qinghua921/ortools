// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

#include "ortools/sat/boolean_problem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace sat {
PROTOBUF_CONSTEXPR LinearBooleanConstraint::LinearBooleanConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.literals_)*/{}
  , /*decltype(_impl_.coefficients_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lower_bound_)*/int64_t{0}
  , /*decltype(_impl_.upper_bound_)*/int64_t{0}} {}
struct LinearBooleanConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearBooleanConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearBooleanConstraintDefaultTypeInternal() {}
  union {
    LinearBooleanConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearBooleanConstraintDefaultTypeInternal _LinearBooleanConstraint_default_instance_;
PROTOBUF_CONSTEXPR LinearObjective::LinearObjective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.literals_)*/{}
  , /*decltype(_impl_.coefficients_)*/{}
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.scaling_factor_)*/1} {}
struct LinearObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearObjectiveDefaultTypeInternal() {}
  union {
    LinearObjective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearObjectiveDefaultTypeInternal _LinearObjective_default_instance_;
PROTOBUF_CONSTEXPR BooleanAssignment::BooleanAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.literals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BooleanAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanAssignmentDefaultTypeInternal() {}
  union {
    BooleanAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanAssignmentDefaultTypeInternal _BooleanAssignment_default_instance_;
PROTOBUF_CONSTEXPR LinearBooleanProblem::LinearBooleanProblem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.constraints_)*/{}
  , /*decltype(_impl_.var_names_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objective_)*/nullptr
  , /*decltype(_impl_.assignment_)*/nullptr
  , /*decltype(_impl_.num_variables_)*/0
  , /*decltype(_impl_.original_num_variables_)*/0} {}
struct LinearBooleanProblemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearBooleanProblemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearBooleanProblemDefaultTypeInternal() {}
  union {
    LinearBooleanProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearBooleanProblemDefaultTypeInternal _LinearBooleanProblem_default_instance_;
}  // namespace sat
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_.literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_.coefficients_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _impl_.name_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _impl_.literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _impl_.coefficients_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _impl_.scaling_factor_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BooleanAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BooleanAssignment, _impl_.literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.num_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.var_names_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.assignment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _impl_.original_num_variables_),
  0,
  3,
  ~0u,
  1,
  ~0u,
  2,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::operations_research::sat::LinearBooleanConstraint)},
  { 16, 26, -1, sizeof(::operations_research::sat::LinearObjective)},
  { 30, -1, -1, sizeof(::operations_research::sat::BooleanAssignment)},
  { 37, 50, -1, sizeof(::operations_research::sat::LinearBooleanProblem)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::sat::_LinearBooleanConstraint_default_instance_._instance,
  &::operations_research::sat::_LinearObjective_default_instance_._instance,
  &::operations_research::sat::_BooleanAssignment_default_instance_._instance,
  &::operations_research::sat::_LinearBooleanProblem_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fsat_2fboolean_5fproblem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!ortools/sat/boolean_problem.proto\022\027ope"
  "rations_research.sat\"{\n\027LinearBooleanCon"
  "straint\022\020\n\010literals\030\001 \003(\005\022\024\n\014coefficient"
  "s\030\002 \003(\003\022\023\n\013lower_bound\030\003 \001(\003\022\023\n\013upper_bo"
  "und\030\004 \001(\003\022\016\n\004name\030\005 \001(\t:\000\"g\n\017LinearObjec"
  "tive\022\020\n\010literals\030\001 \003(\005\022\024\n\014coefficients\030\002"
  " \003(\003\022\021\n\006offset\030\003 \001(\001:\0010\022\031\n\016scaling_facto"
  "r\030\004 \001(\001:\0011\"%\n\021BooleanAssignment\022\020\n\010liter"
  "als\030\001 \003(\005\"\264\002\n\024LinearBooleanProblem\022\016\n\004na"
  "me\030\001 \001(\t:\000\022\025\n\rnum_variables\030\003 \001(\005\022E\n\013con"
  "straints\030\004 \003(\01320.operations_research.sat"
  ".LinearBooleanConstraint\022;\n\tobjective\030\005 "
  "\001(\0132(.operations_research.sat.LinearObje"
  "ctive\022\021\n\tvar_names\030\006 \003(\t\022>\n\nassignment\030\007"
  " \001(\0132*.operations_research.sat.BooleanAs"
  "signment\022\036\n\026original_num_variables\030\010 \001(\005"
  "B/\n\026com.google.ortools.satP\001\252\002\022Google.Or"
  "Tools.Sat"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto = {
    false, false, 689, descriptor_table_protodef_ortools_2fsat_2fboolean_5fproblem_2eproto,
    "ortools/sat/boolean_problem.proto",
    &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto::offsets,
    file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto, file_level_enum_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto,
    file_level_service_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_getter() {
  return &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fsat_2fboolean_5fproblem_2eproto(&descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto);
namespace operations_research {
namespace sat {

// ===================================================================

class LinearBooleanConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearBooleanConstraint>()._impl_._has_bits_);
  static void set_has_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LinearBooleanConstraint::LinearBooleanConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearBooleanConstraint)
}
LinearBooleanConstraint::LinearBooleanConstraint(const LinearBooleanConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinearBooleanConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.literals_){from._impl_.literals_}
    , decltype(_impl_.coefficients_){from._impl_.coefficients_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.upper_bound_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lower_bound_, &from._impl_.lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upper_bound_) -
    reinterpret_cast<char*>(&_impl_.lower_bound_)) + sizeof(_impl_.upper_bound_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearBooleanConstraint)
}

inline void LinearBooleanConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.literals_){arena}
    , decltype(_impl_.coefficients_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lower_bound_){int64_t{0}}
    , decltype(_impl_.upper_bound_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinearBooleanConstraint::~LinearBooleanConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearBooleanConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearBooleanConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.literals_.~RepeatedField();
  _impl_.coefficients_.~RepeatedField();
  _impl_.name_.Destroy();
}

void LinearBooleanConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearBooleanConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearBooleanConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.literals_.Clear();
  _impl_.coefficients_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.lower_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.upper_bound_) -
        reinterpret_cast<char*>(&_impl_.lower_bound_)) + sizeof(_impl_.upper_bound_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearBooleanConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 lower_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lower_bound(&has_bits);
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.sat.LinearBooleanConstraint.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearBooleanConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearBooleanConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0, n = this->_internal_coefficients_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_coefficients(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 lower_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lower_bound(), target);
  }

  // optional int64 upper_bound = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_upper_bound(), target);
  }

  // optional string name = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanConstraint.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearBooleanConstraint)
  return target;
}

size_t LinearBooleanConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearBooleanConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.literals_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  // repeated int64 coefficients = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.coefficients_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_coefficients_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 5 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 lower_bound = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lower_bound());
    }

    // optional int64 upper_bound = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_upper_bound());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearBooleanConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinearBooleanConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearBooleanConstraint::GetClassData() const { return &_class_data_; }


void LinearBooleanConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinearBooleanConstraint*>(&to_msg);
  auto& from = static_cast<const LinearBooleanConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearBooleanConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.literals_.MergeFrom(from._impl_.literals_);
  _this->_impl_.coefficients_.MergeFrom(from._impl_.coefficients_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lower_bound_ = from._impl_.lower_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearBooleanConstraint::CopyFrom(const LinearBooleanConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearBooleanConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanConstraint::IsInitialized() const {
  return true;
}

void LinearBooleanConstraint::InternalSwap(LinearBooleanConstraint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.literals_.InternalSwap(&other->_impl_.literals_);
  _impl_.coefficients_.InternalSwap(&other->_impl_.coefficients_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearBooleanConstraint, _impl_.upper_bound_)
      + sizeof(LinearBooleanConstraint::_impl_.upper_bound_)
      - PROTOBUF_FIELD_OFFSET(LinearBooleanConstraint, _impl_.lower_bound_)>(
          reinterpret_cast<char*>(&_impl_.lower_bound_),
          reinterpret_cast<char*>(&other->_impl_.lower_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearBooleanConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_getter, &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once,
      file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[0]);
}

// ===================================================================

class LinearObjective::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearObjective>()._impl_._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scaling_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LinearObjective::LinearObjective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearObjective)
}
LinearObjective::LinearObjective(const LinearObjective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinearObjective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.literals_){from._impl_.literals_}
    , decltype(_impl_.coefficients_){from._impl_.coefficients_}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.scaling_factor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scaling_factor_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.scaling_factor_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearObjective)
}

inline void LinearObjective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.literals_){arena}
    , decltype(_impl_.coefficients_){arena}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.scaling_factor_){1}
  };
}

LinearObjective::~LinearObjective() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearObjective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearObjective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.literals_.~RepeatedField();
  _impl_.coefficients_.~RepeatedField();
}

void LinearObjective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearObjective::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearObjective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.literals_.Clear();
  _impl_.coefficients_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.offset_ = 0;
    _impl_.scaling_factor_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearObjective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double offset = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double scaling_factor = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_scaling_factor(&has_bits);
          _impl_.scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearObjective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearObjective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0, n = this->_internal_coefficients_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_coefficients(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double offset = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  // optional double scaling_factor = 4 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_scaling_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearObjective)
  return target;
}

size_t LinearObjective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearObjective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.literals_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  // repeated int64 coefficients = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.coefficients_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_coefficients_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double offset = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double scaling_factor = 4 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearObjective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinearObjective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearObjective::GetClassData() const { return &_class_data_; }


void LinearObjective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinearObjective*>(&to_msg);
  auto& from = static_cast<const LinearObjective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearObjective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.literals_.MergeFrom(from._impl_.literals_);
  _this->_impl_.coefficients_.MergeFrom(from._impl_.coefficients_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scaling_factor_ = from._impl_.scaling_factor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearObjective::CopyFrom(const LinearObjective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearObjective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearObjective::IsInitialized() const {
  return true;
}

void LinearObjective::InternalSwap(LinearObjective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.literals_.InternalSwap(&other->_impl_.literals_);
  _impl_.coefficients_.InternalSwap(&other->_impl_.coefficients_);
  swap(_impl_.offset_, other->_impl_.offset_);
  swap(_impl_.scaling_factor_, other->_impl_.scaling_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearObjective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_getter, &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once,
      file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[1]);
}

// ===================================================================

class BooleanAssignment::_Internal {
 public:
};

BooleanAssignment::BooleanAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.BooleanAssignment)
}
BooleanAssignment::BooleanAssignment(const BooleanAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BooleanAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.literals_){from._impl_.literals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.BooleanAssignment)
}

inline void BooleanAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.literals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BooleanAssignment::~BooleanAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.sat.BooleanAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BooleanAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.literals_.~RepeatedField();
}

void BooleanAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BooleanAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.BooleanAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.literals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BooleanAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.BooleanAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.BooleanAssignment)
  return target;
}

size_t BooleanAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.BooleanAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.literals_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BooleanAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BooleanAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BooleanAssignment::GetClassData() const { return &_class_data_; }


void BooleanAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BooleanAssignment*>(&to_msg);
  auto& from = static_cast<const BooleanAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.BooleanAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.literals_.MergeFrom(from._impl_.literals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BooleanAssignment::CopyFrom(const BooleanAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.BooleanAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanAssignment::IsInitialized() const {
  return true;
}

void BooleanAssignment::InternalSwap(BooleanAssignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.literals_.InternalSwap(&other->_impl_.literals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_getter, &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once,
      file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[2]);
}

// ===================================================================

class LinearBooleanProblem::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearBooleanProblem>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::operations_research::sat::LinearObjective& objective(const LinearBooleanProblem* msg);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::sat::BooleanAssignment& assignment(const LinearBooleanProblem* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_num_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::operations_research::sat::LinearObjective&
LinearBooleanProblem::_Internal::objective(const LinearBooleanProblem* msg) {
  return *msg->_impl_.objective_;
}
const ::operations_research::sat::BooleanAssignment&
LinearBooleanProblem::_Internal::assignment(const LinearBooleanProblem* msg) {
  return *msg->_impl_.assignment_;
}
LinearBooleanProblem::LinearBooleanProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearBooleanProblem)
}
LinearBooleanProblem::LinearBooleanProblem(const LinearBooleanProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinearBooleanProblem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constraints_){from._impl_.constraints_}
    , decltype(_impl_.var_names_){from._impl_.var_names_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objective_){nullptr}
    , decltype(_impl_.assignment_){nullptr}
    , decltype(_impl_.num_variables_){}
    , decltype(_impl_.original_num_variables_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objective()) {
    _this->_impl_.objective_ = new ::operations_research::sat::LinearObjective(*from._impl_.objective_);
  }
  if (from._internal_has_assignment()) {
    _this->_impl_.assignment_ = new ::operations_research::sat::BooleanAssignment(*from._impl_.assignment_);
  }
  ::memcpy(&_impl_.num_variables_, &from._impl_.num_variables_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.original_num_variables_) -
    reinterpret_cast<char*>(&_impl_.num_variables_)) + sizeof(_impl_.original_num_variables_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearBooleanProblem)
}

inline void LinearBooleanProblem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constraints_){arena}
    , decltype(_impl_.var_names_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objective_){nullptr}
    , decltype(_impl_.assignment_){nullptr}
    , decltype(_impl_.num_variables_){0}
    , decltype(_impl_.original_num_variables_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinearBooleanProblem::~LinearBooleanProblem() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearBooleanProblem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearBooleanProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.constraints_.~RepeatedPtrField();
  _impl_.var_names_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objective_;
  if (this != internal_default_instance()) delete _impl_.assignment_;
}

void LinearBooleanProblem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearBooleanProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearBooleanProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.constraints_.Clear();
  _impl_.var_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.objective_ != nullptr);
      _impl_.objective_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.assignment_ != nullptr);
      _impl_.assignment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.num_variables_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.original_num_variables_) -
        reinterpret_cast<char*>(&_impl_.num_variables_)) + sizeof(_impl_.original_num_variables_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearBooleanProblem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.sat.LinearBooleanProblem.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_variables(&has_bits);
          _impl_.num_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.LinearObjective objective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string var_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "operations_research.sat.LinearBooleanProblem.var_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.sat.BooleanAssignment assignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 original_num_variables = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_original_num_variables(&has_bits);
          _impl_.original_num_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearBooleanProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearBooleanProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanProblem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 num_variables = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_variables(), target);
  }

  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_constraints_size()); i < n; i++) {
    const auto& repfield = this->_internal_constraints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .operations_research.sat.LinearObjective objective = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::objective(this),
        _Internal::objective(this).GetCachedSize(), target, stream);
  }

  // repeated string var_names = 6;
  for (int i = 0, n = this->_internal_var_names_size(); i < n; i++) {
    const auto& s = this->_internal_var_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanProblem.var_names");
    target = stream->WriteString(6, s, target);
  }

  // optional .operations_research.sat.BooleanAssignment assignment = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::assignment(this),
        _Internal::assignment(this).GetCachedSize(), target, stream);
  }

  // optional int32 original_num_variables = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_original_num_variables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearBooleanProblem)
  return target;
}

size_t LinearBooleanProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearBooleanProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->_impl_.constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string var_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.var_names_.size());
  for (int i = 0, n = _impl_.var_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.var_names_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .operations_research.sat.LinearObjective objective = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objective_);
    }

    // optional .operations_research.sat.BooleanAssignment assignment = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.assignment_);
    }

    // optional int32 num_variables = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_variables());
    }

    // optional int32 original_num_variables = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_original_num_variables());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearBooleanProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinearBooleanProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearBooleanProblem::GetClassData() const { return &_class_data_; }


void LinearBooleanProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinearBooleanProblem*>(&to_msg);
  auto& from = static_cast<const LinearBooleanProblem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearBooleanProblem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.constraints_.MergeFrom(from._impl_.constraints_);
  _this->_impl_.var_names_.MergeFrom(from._impl_.var_names_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_objective()->::operations_research::sat::LinearObjective::MergeFrom(
          from._internal_objective());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_assignment()->::operations_research::sat::BooleanAssignment::MergeFrom(
          from._internal_assignment());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_variables_ = from._impl_.num_variables_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.original_num_variables_ = from._impl_.original_num_variables_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearBooleanProblem::CopyFrom(const LinearBooleanProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearBooleanProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanProblem::IsInitialized() const {
  return true;
}

void LinearBooleanProblem::InternalSwap(LinearBooleanProblem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.constraints_.InternalSwap(&other->_impl_.constraints_);
  _impl_.var_names_.InternalSwap(&other->_impl_.var_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearBooleanProblem, _impl_.original_num_variables_)
      + sizeof(LinearBooleanProblem::_impl_.original_num_variables_)
      - PROTOBUF_FIELD_OFFSET(LinearBooleanProblem, _impl_.objective_)>(
          reinterpret_cast<char*>(&_impl_.objective_),
          reinterpret_cast<char*>(&other->_impl_.objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearBooleanProblem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_getter, &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once,
      file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearBooleanConstraint*
Arena::CreateMaybeMessage< ::operations_research::sat::LinearBooleanConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearBooleanConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearObjective*
Arena::CreateMaybeMessage< ::operations_research::sat::LinearObjective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearObjective >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::BooleanAssignment*
Arena::CreateMaybeMessage< ::operations_research::sat::BooleanAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::BooleanAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearBooleanProblem*
Arena::CreateMaybeMessage< ::operations_research::sat::LinearBooleanProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearBooleanProblem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
