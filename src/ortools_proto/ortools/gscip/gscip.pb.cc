// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/gscip/gscip.proto

#include "ortools/gscip/gscip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
PROTOBUF_CONSTEXPR GScipParameters_BoolParamsEntry_DoNotUse::GScipParameters_BoolParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_BoolParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_BoolParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters_IntParamsEntry_DoNotUse::GScipParameters_IntParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_IntParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_IntParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters_LongParamsEntry_DoNotUse::GScipParameters_LongParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_LongParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_LongParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters_RealParamsEntry_DoNotUse::GScipParameters_RealParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_RealParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_RealParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters_CharParamsEntry_DoNotUse::GScipParameters_CharParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_CharParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_CharParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters_StringParamsEntry_DoNotUse::GScipParameters_StringParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GScipParameters_StringParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_StringParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GScipParameters::GScipParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bool_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.int_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.long_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.real_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.char_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.string_params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.search_logs_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detailed_solving_stats_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scip_model_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emphasis_)*/0
  , /*decltype(_impl_.heuristics_)*/0
  , /*decltype(_impl_.presolve_)*/0
  , /*decltype(_impl_.separating_)*/0
  , /*decltype(_impl_.silence_output_)*/false
  , /*decltype(_impl_.print_detailed_solving_stats_)*/false
  , /*decltype(_impl_.print_scip_model_)*/false
  , /*decltype(_impl_.num_solutions_)*/0
  , /*decltype(_impl_.objective_limit_)*/0} {}
struct GScipParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipParametersDefaultTypeInternal() {}
  union {
    GScipParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipParametersDefaultTypeInternal _GScipParameters_default_instance_;
PROTOBUF_CONSTEXPR GScipSolvingStats::GScipSolvingStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.best_objective_)*/0
  , /*decltype(_impl_.best_bound_)*/0
  , /*decltype(_impl_.primal_simplex_iterations_)*/int64_t{0}
  , /*decltype(_impl_.dual_simplex_iterations_)*/int64_t{0}
  , /*decltype(_impl_.total_lp_iterations_)*/int64_t{0}
  , /*decltype(_impl_.node_count_)*/int64_t{0}
  , /*decltype(_impl_.first_lp_relaxation_bound_)*/0
  , /*decltype(_impl_.root_node_bound_)*/0
  , /*decltype(_impl_.deterministic_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GScipSolvingStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipSolvingStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipSolvingStatsDefaultTypeInternal() {}
  union {
    GScipSolvingStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipSolvingStatsDefaultTypeInternal _GScipSolvingStats_default_instance_;
PROTOBUF_CONSTEXPR GScipOutput::GScipOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GScipOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GScipOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GScipOutputDefaultTypeInternal() {}
  union {
    GScipOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GScipOutputDefaultTypeInternal _GScipOutput_default_instance_;
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fgscip_2fgscip_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fgscip_2fgscip_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fgscip_2fgscip_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fgscip_2fgscip_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_BoolParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_BoolParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_BoolParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_BoolParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_IntParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_IntParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_IntParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_IntParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_LongParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_LongParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_LongParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_LongParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_RealParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_RealParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_RealParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_RealParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_CharParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_CharParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_CharParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_CharParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_StringParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_StringParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_StringParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters_StringParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.emphasis_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.heuristics_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.separating_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.bool_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.int_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.long_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.real_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.char_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.string_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.silence_output_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.print_detailed_solving_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.print_scip_model_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.search_logs_filename_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.detailed_solving_stats_filename_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.scip_model_filename_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.num_solutions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipParameters, _impl_.objective_limit_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.best_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.best_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.primal_simplex_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.dual_simplex_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.total_lp_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.node_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.first_lp_relaxation_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.root_node_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipSolvingStats, _impl_.deterministic_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipOutput, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipOutput, _impl_.status_detail_),
  PROTOBUF_FIELD_OFFSET(::operations_research::GScipOutput, _impl_.stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::operations_research::GScipParameters_BoolParamsEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::operations_research::GScipParameters_IntParamsEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::operations_research::GScipParameters_LongParamsEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::operations_research::GScipParameters_RealParamsEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::operations_research::GScipParameters_CharParamsEntry_DoNotUse)},
  { 50, 58, -1, sizeof(::operations_research::GScipParameters_StringParamsEntry_DoNotUse)},
  { 60, 84, -1, sizeof(::operations_research::GScipParameters)},
  { 102, -1, -1, sizeof(::operations_research::GScipSolvingStats)},
  { 117, -1, -1, sizeof(::operations_research::GScipOutput)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::_GScipParameters_BoolParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_IntParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_LongParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_RealParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_CharParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_StringParamsEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_GScipParameters_default_instance_._instance,
  &::operations_research::_GScipSolvingStats_default_instance_._instance,
  &::operations_research::_GScipOutput_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fgscip_2fgscip_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ortools/gscip/gscip.proto\022\023operations_"
  "research\"\222\r\n\017GScipParameters\022\?\n\010emphasis"
  "\030\001 \001(\0162-.operations_research.GScipParame"
  "ters.Emphasis\022L\n\nheuristics\030\002 \001(\01623.oper"
  "ations_research.GScipParameters.MetaPara"
  "mValueH\000\210\001\001\022J\n\010presolve\030\003 \001(\01623.operatio"
  "ns_research.GScipParameters.MetaParamVal"
  "ueH\001\210\001\001\022L\n\nseparating\030\004 \001(\01623.operations"
  "_research.GScipParameters.MetaParamValue"
  "H\002\210\001\001\022I\n\013bool_params\030\005 \003(\01324.operations_"
  "research.GScipParameters.BoolParamsEntry"
  "\022G\n\nint_params\030\006 \003(\01323.operations_resear"
  "ch.GScipParameters.IntParamsEntry\022I\n\013lon"
  "g_params\030\007 \003(\01324.operations_research.GSc"
  "ipParameters.LongParamsEntry\022I\n\013real_par"
  "ams\030\010 \003(\01324.operations_research.GScipPar"
  "ameters.RealParamsEntry\022I\n\013char_params\030\t"
  " \003(\01324.operations_research.GScipParamete"
  "rs.CharParamsEntry\022M\n\rstring_params\030\n \003("
  "\01326.operations_research.GScipParameters."
  "StringParamsEntry\022\033\n\016silence_output\030\013 \001("
  "\010H\003\210\001\001\022$\n\034print_detailed_solving_stats\030\014"
  " \001(\010\022\030\n\020print_scip_model\030\r \001(\010\022\034\n\024search"
  "_logs_filename\030\016 \001(\t\022\'\n\037detailed_solving"
  "_stats_filename\030\017 \001(\t\022\033\n\023scip_model_file"
  "name\030\020 \001(\t\022\032\n\rnum_solutions\030\021 \001(\005H\004\210\001\001\022\034"
  "\n\017objective_limit\030\022 \001(\001H\005\210\001\001\0321\n\017BoolPara"
  "msEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032"
  "0\n\016IntParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\005:\0028\001\0321\n\017LongParamsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\003:\0028\001\0321\n\017RealParamsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0321\n\017CharP"
  "aramsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\0323\n\021StringParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\254\001\n\010Emphasis\022\024\n\020DEFAULT_"
  "EMPHASIS\020\000\022\013\n\007COUNTER\020\001\022\r\n\tCP_SOLVER\020\002\022\014"
  "\n\010EASY_CIP\020\003\022\017\n\013FEASIBILITY\020\004\022\013\n\007HARD_LP"
  "\020\005\022\016\n\nOPTIMALITY\020\006\022\016\n\nPHASE_FEAS\020\007\022\021\n\rPH"
  "ASE_IMPROVE\020\010\022\017\n\013PHASE_PROOF\020\t\"Q\n\016MetaPa"
  "ramValue\022\034\n\030DEFAULT_META_PARAM_VALUE\020\000\022\016"
  "\n\nAGGRESSIVE\020\001\022\010\n\004FAST\020\002\022\007\n\003OFF\020\003B\r\n\013_he"
  "uristicsB\013\n\t_presolveB\r\n\013_separatingB\021\n\017"
  "_silence_outputB\020\n\016_num_solutionsB\022\n\020_ob"
  "jective_limit\"\214\002\n\021GScipSolvingStats\022\026\n\016b"
  "est_objective\030\001 \001(\001\022\022\n\nbest_bound\030\002 \001(\001\022"
  "!\n\031primal_simplex_iterations\030\003 \001(\003\022\037\n\027du"
  "al_simplex_iterations\030\004 \001(\003\022\033\n\023total_lp_"
  "iterations\030\005 \001(\003\022\022\n\nnode_count\030\006 \001(\003\022!\n\031"
  "first_lp_relaxation_bound\030\007 \001(\001\022\027\n\017root_"
  "node_bound\030\010 \001(\001\022\032\n\022deterministic_time\030\t"
  " \001(\001\"\313\003\n\013GScipOutput\0227\n\006status\030\001 \001(\0162\'.o"
  "perations_research.GScipOutput.Status\022\025\n"
  "\rstatus_detail\030\002 \001(\t\0225\n\005stats\030\003 \001(\0132&.op"
  "erations_research.GScipSolvingStats\"\264\002\n\006"
  "Status\022\013\n\007UNKNOWN\020\000\022\022\n\016USER_INTERRUPT\020\001\022"
  "\016\n\nNODE_LIMIT\020\002\022\024\n\020TOTAL_NODE_LIMIT\020\003\022\024\n"
  "\020STALL_NODE_LIMIT\020\004\022\016\n\nTIME_LIMIT\020\005\022\r\n\tM"
  "EM_LIMIT\020\006\022\r\n\tGAP_LIMIT\020\007\022\r\n\tSOL_LIMIT\020\010"
  "\022\022\n\016BEST_SOL_LIMIT\020\t\022\021\n\rRESTART_LIMIT\020\n\022"
  "\013\n\007OPTIMAL\020\013\022\016\n\nINFEASIBLE\020\014\022\r\n\tUNBOUNDE"
  "D\020\r\022\017\n\013INF_OR_UNBD\020\016\022\r\n\tTERMINATE\020\017\022\035\n\031I"
  "NVALID_SOLVER_PARAMETERS\020\020b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fgscip_2fgscip_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fgscip_2fgscip_2eproto = {
    false, false, 2474, descriptor_table_protodef_ortools_2fgscip_2fgscip_2eproto,
    "ortools/gscip/gscip.proto",
    &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_ortools_2fgscip_2fgscip_2eproto::offsets,
    file_level_metadata_ortools_2fgscip_2fgscip_2eproto, file_level_enum_descriptors_ortools_2fgscip_2fgscip_2eproto,
    file_level_service_descriptors_ortools_2fgscip_2fgscip_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter() {
  return &descriptor_table_ortools_2fgscip_2fgscip_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fgscip_2fgscip_2eproto(&descriptor_table_ortools_2fgscip_2fgscip_2eproto);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GScipParameters_Emphasis_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fgscip_2fgscip_2eproto);
  return file_level_enum_descriptors_ortools_2fgscip_2fgscip_2eproto[0];
}
bool GScipParameters_Emphasis_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GScipParameters_Emphasis GScipParameters::DEFAULT_EMPHASIS;
constexpr GScipParameters_Emphasis GScipParameters::COUNTER;
constexpr GScipParameters_Emphasis GScipParameters::CP_SOLVER;
constexpr GScipParameters_Emphasis GScipParameters::EASY_CIP;
constexpr GScipParameters_Emphasis GScipParameters::FEASIBILITY;
constexpr GScipParameters_Emphasis GScipParameters::HARD_LP;
constexpr GScipParameters_Emphasis GScipParameters::OPTIMALITY;
constexpr GScipParameters_Emphasis GScipParameters::PHASE_FEAS;
constexpr GScipParameters_Emphasis GScipParameters::PHASE_IMPROVE;
constexpr GScipParameters_Emphasis GScipParameters::PHASE_PROOF;
constexpr GScipParameters_Emphasis GScipParameters::Emphasis_MIN;
constexpr GScipParameters_Emphasis GScipParameters::Emphasis_MAX;
constexpr int GScipParameters::Emphasis_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GScipParameters_MetaParamValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fgscip_2fgscip_2eproto);
  return file_level_enum_descriptors_ortools_2fgscip_2fgscip_2eproto[1];
}
bool GScipParameters_MetaParamValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GScipParameters_MetaParamValue GScipParameters::DEFAULT_META_PARAM_VALUE;
constexpr GScipParameters_MetaParamValue GScipParameters::AGGRESSIVE;
constexpr GScipParameters_MetaParamValue GScipParameters::FAST;
constexpr GScipParameters_MetaParamValue GScipParameters::OFF;
constexpr GScipParameters_MetaParamValue GScipParameters::MetaParamValue_MIN;
constexpr GScipParameters_MetaParamValue GScipParameters::MetaParamValue_MAX;
constexpr int GScipParameters::MetaParamValue_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GScipOutput_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fgscip_2fgscip_2eproto);
  return file_level_enum_descriptors_ortools_2fgscip_2fgscip_2eproto[2];
}
bool GScipOutput_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GScipOutput_Status GScipOutput::UNKNOWN;
constexpr GScipOutput_Status GScipOutput::USER_INTERRUPT;
constexpr GScipOutput_Status GScipOutput::NODE_LIMIT;
constexpr GScipOutput_Status GScipOutput::TOTAL_NODE_LIMIT;
constexpr GScipOutput_Status GScipOutput::STALL_NODE_LIMIT;
constexpr GScipOutput_Status GScipOutput::TIME_LIMIT;
constexpr GScipOutput_Status GScipOutput::MEM_LIMIT;
constexpr GScipOutput_Status GScipOutput::GAP_LIMIT;
constexpr GScipOutput_Status GScipOutput::SOL_LIMIT;
constexpr GScipOutput_Status GScipOutput::BEST_SOL_LIMIT;
constexpr GScipOutput_Status GScipOutput::RESTART_LIMIT;
constexpr GScipOutput_Status GScipOutput::OPTIMAL;
constexpr GScipOutput_Status GScipOutput::INFEASIBLE;
constexpr GScipOutput_Status GScipOutput::UNBOUNDED;
constexpr GScipOutput_Status GScipOutput::INF_OR_UNBD;
constexpr GScipOutput_Status GScipOutput::TERMINATE;
constexpr GScipOutput_Status GScipOutput::INVALID_SOLVER_PARAMETERS;
constexpr GScipOutput_Status GScipOutput::Status_MIN;
constexpr GScipOutput_Status GScipOutput::Status_MAX;
constexpr int GScipOutput::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

GScipParameters_BoolParamsEntry_DoNotUse::GScipParameters_BoolParamsEntry_DoNotUse() {}
GScipParameters_BoolParamsEntry_DoNotUse::GScipParameters_BoolParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_BoolParamsEntry_DoNotUse::MergeFrom(const GScipParameters_BoolParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_BoolParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[0]);
}

// ===================================================================

GScipParameters_IntParamsEntry_DoNotUse::GScipParameters_IntParamsEntry_DoNotUse() {}
GScipParameters_IntParamsEntry_DoNotUse::GScipParameters_IntParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_IntParamsEntry_DoNotUse::MergeFrom(const GScipParameters_IntParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_IntParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[1]);
}

// ===================================================================

GScipParameters_LongParamsEntry_DoNotUse::GScipParameters_LongParamsEntry_DoNotUse() {}
GScipParameters_LongParamsEntry_DoNotUse::GScipParameters_LongParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_LongParamsEntry_DoNotUse::MergeFrom(const GScipParameters_LongParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_LongParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[2]);
}

// ===================================================================

GScipParameters_RealParamsEntry_DoNotUse::GScipParameters_RealParamsEntry_DoNotUse() {}
GScipParameters_RealParamsEntry_DoNotUse::GScipParameters_RealParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_RealParamsEntry_DoNotUse::MergeFrom(const GScipParameters_RealParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_RealParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[3]);
}

// ===================================================================

GScipParameters_CharParamsEntry_DoNotUse::GScipParameters_CharParamsEntry_DoNotUse() {}
GScipParameters_CharParamsEntry_DoNotUse::GScipParameters_CharParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_CharParamsEntry_DoNotUse::MergeFrom(const GScipParameters_CharParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_CharParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[4]);
}

// ===================================================================

GScipParameters_StringParamsEntry_DoNotUse::GScipParameters_StringParamsEntry_DoNotUse() {}
GScipParameters_StringParamsEntry_DoNotUse::GScipParameters_StringParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GScipParameters_StringParamsEntry_DoNotUse::MergeFrom(const GScipParameters_StringParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters_StringParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[5]);
}

// ===================================================================

class GScipParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<GScipParameters>()._impl_._has_bits_);
  static void set_has_heuristics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_presolve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_separating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_silence_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_solutions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objective_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

GScipParameters::GScipParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GScipParameters::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.GScipParameters)
}
GScipParameters::GScipParameters(const GScipParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GScipParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.bool_params_)*/{}
    , /*decltype(_impl_.int_params_)*/{}
    , /*decltype(_impl_.long_params_)*/{}
    , /*decltype(_impl_.real_params_)*/{}
    , /*decltype(_impl_.char_params_)*/{}
    , /*decltype(_impl_.string_params_)*/{}
    , decltype(_impl_.search_logs_filename_){}
    , decltype(_impl_.detailed_solving_stats_filename_){}
    , decltype(_impl_.scip_model_filename_){}
    , decltype(_impl_.emphasis_){}
    , decltype(_impl_.heuristics_){}
    , decltype(_impl_.presolve_){}
    , decltype(_impl_.separating_){}
    , decltype(_impl_.silence_output_){}
    , decltype(_impl_.print_detailed_solving_stats_){}
    , decltype(_impl_.print_scip_model_){}
    , decltype(_impl_.num_solutions_){}
    , decltype(_impl_.objective_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bool_params_.MergeFrom(from._impl_.bool_params_);
  _this->_impl_.int_params_.MergeFrom(from._impl_.int_params_);
  _this->_impl_.long_params_.MergeFrom(from._impl_.long_params_);
  _this->_impl_.real_params_.MergeFrom(from._impl_.real_params_);
  _this->_impl_.char_params_.MergeFrom(from._impl_.char_params_);
  _this->_impl_.string_params_.MergeFrom(from._impl_.string_params_);
  _impl_.search_logs_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_logs_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_logs_filename().empty()) {
    _this->_impl_.search_logs_filename_.Set(from._internal_search_logs_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detailed_solving_stats_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailed_solving_stats_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detailed_solving_stats_filename().empty()) {
    _this->_impl_.detailed_solving_stats_filename_.Set(from._internal_detailed_solving_stats_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scip_model_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scip_model_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scip_model_filename().empty()) {
    _this->_impl_.scip_model_filename_.Set(from._internal_scip_model_filename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.emphasis_, &from._impl_.emphasis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objective_limit_) -
    reinterpret_cast<char*>(&_impl_.emphasis_)) + sizeof(_impl_.objective_limit_));
  // @@protoc_insertion_point(copy_constructor:operations_research.GScipParameters)
}

inline void GScipParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.bool_params_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.int_params_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.long_params_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.real_params_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.char_params_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.string_params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.search_logs_filename_){}
    , decltype(_impl_.detailed_solving_stats_filename_){}
    , decltype(_impl_.scip_model_filename_){}
    , decltype(_impl_.emphasis_){0}
    , decltype(_impl_.heuristics_){0}
    , decltype(_impl_.presolve_){0}
    , decltype(_impl_.separating_){0}
    , decltype(_impl_.silence_output_){false}
    , decltype(_impl_.print_detailed_solving_stats_){false}
    , decltype(_impl_.print_scip_model_){false}
    , decltype(_impl_.num_solutions_){0}
    , decltype(_impl_.objective_limit_){0}
  };
  _impl_.search_logs_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_logs_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detailed_solving_stats_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailed_solving_stats_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scip_model_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scip_model_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GScipParameters::~GScipParameters() {
  // @@protoc_insertion_point(destructor:operations_research.GScipParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GScipParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bool_params_.Destruct();
  _impl_.bool_params_.~MapField();
  _impl_.int_params_.Destruct();
  _impl_.int_params_.~MapField();
  _impl_.long_params_.Destruct();
  _impl_.long_params_.~MapField();
  _impl_.real_params_.Destruct();
  _impl_.real_params_.~MapField();
  _impl_.char_params_.Destruct();
  _impl_.char_params_.~MapField();
  _impl_.string_params_.Destruct();
  _impl_.string_params_.~MapField();
  _impl_.search_logs_filename_.Destroy();
  _impl_.detailed_solving_stats_filename_.Destroy();
  _impl_.scip_model_filename_.Destroy();
}

void GScipParameters::ArenaDtor(void* object) {
  GScipParameters* _this = reinterpret_cast< GScipParameters* >(object);
  _this->_impl_.bool_params_.Destruct();
  _this->_impl_.int_params_.Destruct();
  _this->_impl_.long_params_.Destruct();
  _this->_impl_.real_params_.Destruct();
  _this->_impl_.char_params_.Destruct();
  _this->_impl_.string_params_.Destruct();
}
void GScipParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GScipParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.GScipParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bool_params_.Clear();
  _impl_.int_params_.Clear();
  _impl_.long_params_.Clear();
  _impl_.real_params_.Clear();
  _impl_.char_params_.Clear();
  _impl_.string_params_.Clear();
  _impl_.search_logs_filename_.ClearToEmpty();
  _impl_.detailed_solving_stats_filename_.ClearToEmpty();
  _impl_.scip_model_filename_.ClearToEmpty();
  _impl_.emphasis_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.heuristics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.silence_output_) -
        reinterpret_cast<char*>(&_impl_.heuristics_)) + sizeof(_impl_.silence_output_));
  }
  ::memset(&_impl_.print_detailed_solving_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.print_scip_model_) -
      reinterpret_cast<char*>(&_impl_.print_detailed_solving_stats_)) + sizeof(_impl_.print_scip_model_));
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.num_solutions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.objective_limit_) -
        reinterpret_cast<char*>(&_impl_.num_solutions_)) + sizeof(_impl_.objective_limit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GScipParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.GScipParameters.Emphasis emphasis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_emphasis(static_cast<::operations_research::GScipParameters_Emphasis>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.GScipParameters.MetaParamValue heuristics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_heuristics(static_cast<::operations_research::GScipParameters_MetaParamValue>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.GScipParameters.MetaParamValue presolve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_presolve(static_cast<::operations_research::GScipParameters_MetaParamValue>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.GScipParameters.MetaParamValue separating = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_separating(static_cast<::operations_research::GScipParameters_MetaParamValue>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> bool_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.bool_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> int_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.int_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> long_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.long_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> real_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.real_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> char_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.char_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> string_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.string_params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool silence_output = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_silence_output(&has_bits);
          _impl_.silence_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool print_detailed_solving_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.print_detailed_solving_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool print_scip_model = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.print_scip_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string search_logs_filename = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_search_logs_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.GScipParameters.search_logs_filename"));
        } else
          goto handle_unusual;
        continue;
      // string detailed_solving_stats_filename = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_detailed_solving_stats_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.GScipParameters.detailed_solving_stats_filename"));
        } else
          goto handle_unusual;
        continue;
      // string scip_model_filename = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_scip_model_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.GScipParameters.scip_model_filename"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_solutions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_num_solutions(&has_bits);
          _impl_.num_solutions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_limit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_objective_limit(&has_bits);
          _impl_.objective_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GScipParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.GScipParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.GScipParameters.Emphasis emphasis = 1;
  if (this->_internal_emphasis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_emphasis(), target);
  }

  // optional .operations_research.GScipParameters.MetaParamValue heuristics = 2;
  if (_internal_has_heuristics()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_heuristics(), target);
  }

  // optional .operations_research.GScipParameters.MetaParamValue presolve = 3;
  if (_internal_has_presolve()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_presolve(), target);
  }

  // optional .operations_research.GScipParameters.MetaParamValue separating = 4;
  if (_internal_has_separating()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_separating(), target);
  }

  // map<string, bool> bool_params = 5;
  if (!this->_internal_bool_params().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = GScipParameters_BoolParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_bool_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.BoolParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> int_params = 6;
  if (!this->_internal_int_params().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = GScipParameters_IntParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_int_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.IntParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int64> long_params = 7;
  if (!this->_internal_long_params().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = GScipParameters_LongParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_long_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.LongParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, double> real_params = 8;
  if (!this->_internal_real_params().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = GScipParameters_RealParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_real_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.RealParamsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> char_params = 9;
  if (!this->_internal_char_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GScipParameters_CharParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_char_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.CharParamsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.CharParamsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> string_params = 10;
  if (!this->_internal_string_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GScipParameters_StringParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_string_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.StringParamsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "operations_research.GScipParameters.StringParamsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional bool silence_output = 11;
  if (_internal_has_silence_output()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_silence_output(), target);
  }

  // bool print_detailed_solving_stats = 12;
  if (this->_internal_print_detailed_solving_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_print_detailed_solving_stats(), target);
  }

  // bool print_scip_model = 13;
  if (this->_internal_print_scip_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_print_scip_model(), target);
  }

  // string search_logs_filename = 14;
  if (!this->_internal_search_logs_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_logs_filename().data(), static_cast<int>(this->_internal_search_logs_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.GScipParameters.search_logs_filename");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_search_logs_filename(), target);
  }

  // string detailed_solving_stats_filename = 15;
  if (!this->_internal_detailed_solving_stats_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detailed_solving_stats_filename().data(), static_cast<int>(this->_internal_detailed_solving_stats_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.GScipParameters.detailed_solving_stats_filename");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_detailed_solving_stats_filename(), target);
  }

  // string scip_model_filename = 16;
  if (!this->_internal_scip_model_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scip_model_filename().data(), static_cast<int>(this->_internal_scip_model_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.GScipParameters.scip_model_filename");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_scip_model_filename(), target);
  }

  // optional int32 num_solutions = 17;
  if (_internal_has_num_solutions()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_num_solutions(), target);
  }

  // optional double objective_limit = 18;
  if (_internal_has_objective_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_objective_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.GScipParameters)
  return target;
}

size_t GScipParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.GScipParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> bool_params = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bool_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_bool_params().begin();
      it != this->_internal_bool_params().end(); ++it) {
    total_size += GScipParameters_BoolParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> int_params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_int_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_int_params().begin();
      it != this->_internal_int_params().end(); ++it) {
    total_size += GScipParameters_IntParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> long_params = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_long_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_long_params().begin();
      it != this->_internal_long_params().end(); ++it) {
    total_size += GScipParameters_LongParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> real_params = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_real_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_real_params().begin();
      it != this->_internal_real_params().end(); ++it) {
    total_size += GScipParameters_RealParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> char_params = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_char_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_char_params().begin();
      it != this->_internal_char_params().end(); ++it) {
    total_size += GScipParameters_CharParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> string_params = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_params().begin();
      it != this->_internal_string_params().end(); ++it) {
    total_size += GScipParameters_StringParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string search_logs_filename = 14;
  if (!this->_internal_search_logs_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_logs_filename());
  }

  // string detailed_solving_stats_filename = 15;
  if (!this->_internal_detailed_solving_stats_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detailed_solving_stats_filename());
  }

  // string scip_model_filename = 16;
  if (!this->_internal_scip_model_filename().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scip_model_filename());
  }

  // .operations_research.GScipParameters.Emphasis emphasis = 1;
  if (this->_internal_emphasis() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_emphasis());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .operations_research.GScipParameters.MetaParamValue heuristics = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_heuristics());
    }

    // optional .operations_research.GScipParameters.MetaParamValue presolve = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_presolve());
    }

    // optional .operations_research.GScipParameters.MetaParamValue separating = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_separating());
    }

    // optional bool silence_output = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  // bool print_detailed_solving_stats = 12;
  if (this->_internal_print_detailed_solving_stats() != 0) {
    total_size += 1 + 1;
  }

  // bool print_scip_model = 13;
  if (this->_internal_print_scip_model() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00000030u) {
    // optional int32 num_solutions = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_solutions());
    }

    // optional double objective_limit = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GScipParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GScipParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GScipParameters::GetClassData() const { return &_class_data_; }


void GScipParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GScipParameters*>(&to_msg);
  auto& from = static_cast<const GScipParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.GScipParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bool_params_.MergeFrom(from._impl_.bool_params_);
  _this->_impl_.int_params_.MergeFrom(from._impl_.int_params_);
  _this->_impl_.long_params_.MergeFrom(from._impl_.long_params_);
  _this->_impl_.real_params_.MergeFrom(from._impl_.real_params_);
  _this->_impl_.char_params_.MergeFrom(from._impl_.char_params_);
  _this->_impl_.string_params_.MergeFrom(from._impl_.string_params_);
  if (!from._internal_search_logs_filename().empty()) {
    _this->_internal_set_search_logs_filename(from._internal_search_logs_filename());
  }
  if (!from._internal_detailed_solving_stats_filename().empty()) {
    _this->_internal_set_detailed_solving_stats_filename(from._internal_detailed_solving_stats_filename());
  }
  if (!from._internal_scip_model_filename().empty()) {
    _this->_internal_set_scip_model_filename(from._internal_scip_model_filename());
  }
  if (from._internal_emphasis() != 0) {
    _this->_internal_set_emphasis(from._internal_emphasis());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.heuristics_ = from._impl_.heuristics_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.presolve_ = from._impl_.presolve_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.separating_ = from._impl_.separating_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.silence_output_ = from._impl_.silence_output_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_print_detailed_solving_stats() != 0) {
    _this->_internal_set_print_detailed_solving_stats(from._internal_print_detailed_solving_stats());
  }
  if (from._internal_print_scip_model() != 0) {
    _this->_internal_set_print_scip_model(from._internal_print_scip_model());
  }
  if (cached_has_bits & 0x00000030u) {
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_solutions_ = from._impl_.num_solutions_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.objective_limit_ = from._impl_.objective_limit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GScipParameters::CopyFrom(const GScipParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.GScipParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GScipParameters::IsInitialized() const {
  return true;
}

void GScipParameters::InternalSwap(GScipParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bool_params_.InternalSwap(&other->_impl_.bool_params_);
  _impl_.int_params_.InternalSwap(&other->_impl_.int_params_);
  _impl_.long_params_.InternalSwap(&other->_impl_.long_params_);
  _impl_.real_params_.InternalSwap(&other->_impl_.real_params_);
  _impl_.char_params_.InternalSwap(&other->_impl_.char_params_);
  _impl_.string_params_.InternalSwap(&other->_impl_.string_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_logs_filename_, lhs_arena,
      &other->_impl_.search_logs_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailed_solving_stats_filename_, lhs_arena,
      &other->_impl_.detailed_solving_stats_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scip_model_filename_, lhs_arena,
      &other->_impl_.scip_model_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GScipParameters, _impl_.objective_limit_)
      + sizeof(GScipParameters::_impl_.objective_limit_)
      - PROTOBUF_FIELD_OFFSET(GScipParameters, _impl_.emphasis_)>(
          reinterpret_cast<char*>(&_impl_.emphasis_),
          reinterpret_cast<char*>(&other->_impl_.emphasis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GScipParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[6]);
}

// ===================================================================

class GScipSolvingStats::_Internal {
 public:
};

GScipSolvingStats::GScipSolvingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.GScipSolvingStats)
}
GScipSolvingStats::GScipSolvingStats(const GScipSolvingStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GScipSolvingStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.best_objective_){}
    , decltype(_impl_.best_bound_){}
    , decltype(_impl_.primal_simplex_iterations_){}
    , decltype(_impl_.dual_simplex_iterations_){}
    , decltype(_impl_.total_lp_iterations_){}
    , decltype(_impl_.node_count_){}
    , decltype(_impl_.first_lp_relaxation_bound_){}
    , decltype(_impl_.root_node_bound_){}
    , decltype(_impl_.deterministic_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.best_objective_, &from._impl_.best_objective_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deterministic_time_) -
    reinterpret_cast<char*>(&_impl_.best_objective_)) + sizeof(_impl_.deterministic_time_));
  // @@protoc_insertion_point(copy_constructor:operations_research.GScipSolvingStats)
}

inline void GScipSolvingStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.best_objective_){0}
    , decltype(_impl_.best_bound_){0}
    , decltype(_impl_.primal_simplex_iterations_){int64_t{0}}
    , decltype(_impl_.dual_simplex_iterations_){int64_t{0}}
    , decltype(_impl_.total_lp_iterations_){int64_t{0}}
    , decltype(_impl_.node_count_){int64_t{0}}
    , decltype(_impl_.first_lp_relaxation_bound_){0}
    , decltype(_impl_.root_node_bound_){0}
    , decltype(_impl_.deterministic_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GScipSolvingStats::~GScipSolvingStats() {
  // @@protoc_insertion_point(destructor:operations_research.GScipSolvingStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GScipSolvingStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GScipSolvingStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GScipSolvingStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.GScipSolvingStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.best_objective_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deterministic_time_) -
      reinterpret_cast<char*>(&_impl_.best_objective_)) + sizeof(_impl_.deterministic_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GScipSolvingStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double best_objective = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.best_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double best_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.best_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 primal_simplex_iterations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.primal_simplex_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dual_simplex_iterations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dual_simplex_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_lp_iterations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_lp_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 node_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.node_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double first_lp_relaxation_bound = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.first_lp_relaxation_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double root_node_bound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.root_node_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double deterministic_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GScipSolvingStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.GScipSolvingStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double best_objective = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_objective = this->_internal_best_objective();
  uint64_t raw_best_objective;
  memcpy(&raw_best_objective, &tmp_best_objective, sizeof(tmp_best_objective));
  if (raw_best_objective != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_best_objective(), target);
  }

  // double best_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_bound = this->_internal_best_bound();
  uint64_t raw_best_bound;
  memcpy(&raw_best_bound, &tmp_best_bound, sizeof(tmp_best_bound));
  if (raw_best_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_best_bound(), target);
  }

  // int64 primal_simplex_iterations = 3;
  if (this->_internal_primal_simplex_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_primal_simplex_iterations(), target);
  }

  // int64 dual_simplex_iterations = 4;
  if (this->_internal_dual_simplex_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_dual_simplex_iterations(), target);
  }

  // int64 total_lp_iterations = 5;
  if (this->_internal_total_lp_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_lp_iterations(), target);
  }

  // int64 node_count = 6;
  if (this->_internal_node_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_node_count(), target);
  }

  // double first_lp_relaxation_bound = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_first_lp_relaxation_bound = this->_internal_first_lp_relaxation_bound();
  uint64_t raw_first_lp_relaxation_bound;
  memcpy(&raw_first_lp_relaxation_bound, &tmp_first_lp_relaxation_bound, sizeof(tmp_first_lp_relaxation_bound));
  if (raw_first_lp_relaxation_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_first_lp_relaxation_bound(), target);
  }

  // double root_node_bound = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_root_node_bound = this->_internal_root_node_bound();
  uint64_t raw_root_node_bound;
  memcpy(&raw_root_node_bound, &tmp_root_node_bound, sizeof(tmp_root_node_bound));
  if (raw_root_node_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_root_node_bound(), target);
  }

  // double deterministic_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deterministic_time = this->_internal_deterministic_time();
  uint64_t raw_deterministic_time;
  memcpy(&raw_deterministic_time, &tmp_deterministic_time, sizeof(tmp_deterministic_time));
  if (raw_deterministic_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_deterministic_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.GScipSolvingStats)
  return target;
}

size_t GScipSolvingStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.GScipSolvingStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double best_objective = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_objective = this->_internal_best_objective();
  uint64_t raw_best_objective;
  memcpy(&raw_best_objective, &tmp_best_objective, sizeof(tmp_best_objective));
  if (raw_best_objective != 0) {
    total_size += 1 + 8;
  }

  // double best_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_bound = this->_internal_best_bound();
  uint64_t raw_best_bound;
  memcpy(&raw_best_bound, &tmp_best_bound, sizeof(tmp_best_bound));
  if (raw_best_bound != 0) {
    total_size += 1 + 8;
  }

  // int64 primal_simplex_iterations = 3;
  if (this->_internal_primal_simplex_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_primal_simplex_iterations());
  }

  // int64 dual_simplex_iterations = 4;
  if (this->_internal_dual_simplex_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dual_simplex_iterations());
  }

  // int64 total_lp_iterations = 5;
  if (this->_internal_total_lp_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_lp_iterations());
  }

  // int64 node_count = 6;
  if (this->_internal_node_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_node_count());
  }

  // double first_lp_relaxation_bound = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_first_lp_relaxation_bound = this->_internal_first_lp_relaxation_bound();
  uint64_t raw_first_lp_relaxation_bound;
  memcpy(&raw_first_lp_relaxation_bound, &tmp_first_lp_relaxation_bound, sizeof(tmp_first_lp_relaxation_bound));
  if (raw_first_lp_relaxation_bound != 0) {
    total_size += 1 + 8;
  }

  // double root_node_bound = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_root_node_bound = this->_internal_root_node_bound();
  uint64_t raw_root_node_bound;
  memcpy(&raw_root_node_bound, &tmp_root_node_bound, sizeof(tmp_root_node_bound));
  if (raw_root_node_bound != 0) {
    total_size += 1 + 8;
  }

  // double deterministic_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deterministic_time = this->_internal_deterministic_time();
  uint64_t raw_deterministic_time;
  memcpy(&raw_deterministic_time, &tmp_deterministic_time, sizeof(tmp_deterministic_time));
  if (raw_deterministic_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GScipSolvingStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GScipSolvingStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GScipSolvingStats::GetClassData() const { return &_class_data_; }


void GScipSolvingStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GScipSolvingStats*>(&to_msg);
  auto& from = static_cast<const GScipSolvingStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.GScipSolvingStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_objective = from._internal_best_objective();
  uint64_t raw_best_objective;
  memcpy(&raw_best_objective, &tmp_best_objective, sizeof(tmp_best_objective));
  if (raw_best_objective != 0) {
    _this->_internal_set_best_objective(from._internal_best_objective());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_best_bound = from._internal_best_bound();
  uint64_t raw_best_bound;
  memcpy(&raw_best_bound, &tmp_best_bound, sizeof(tmp_best_bound));
  if (raw_best_bound != 0) {
    _this->_internal_set_best_bound(from._internal_best_bound());
  }
  if (from._internal_primal_simplex_iterations() != 0) {
    _this->_internal_set_primal_simplex_iterations(from._internal_primal_simplex_iterations());
  }
  if (from._internal_dual_simplex_iterations() != 0) {
    _this->_internal_set_dual_simplex_iterations(from._internal_dual_simplex_iterations());
  }
  if (from._internal_total_lp_iterations() != 0) {
    _this->_internal_set_total_lp_iterations(from._internal_total_lp_iterations());
  }
  if (from._internal_node_count() != 0) {
    _this->_internal_set_node_count(from._internal_node_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_first_lp_relaxation_bound = from._internal_first_lp_relaxation_bound();
  uint64_t raw_first_lp_relaxation_bound;
  memcpy(&raw_first_lp_relaxation_bound, &tmp_first_lp_relaxation_bound, sizeof(tmp_first_lp_relaxation_bound));
  if (raw_first_lp_relaxation_bound != 0) {
    _this->_internal_set_first_lp_relaxation_bound(from._internal_first_lp_relaxation_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_root_node_bound = from._internal_root_node_bound();
  uint64_t raw_root_node_bound;
  memcpy(&raw_root_node_bound, &tmp_root_node_bound, sizeof(tmp_root_node_bound));
  if (raw_root_node_bound != 0) {
    _this->_internal_set_root_node_bound(from._internal_root_node_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_deterministic_time = from._internal_deterministic_time();
  uint64_t raw_deterministic_time;
  memcpy(&raw_deterministic_time, &tmp_deterministic_time, sizeof(tmp_deterministic_time));
  if (raw_deterministic_time != 0) {
    _this->_internal_set_deterministic_time(from._internal_deterministic_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GScipSolvingStats::CopyFrom(const GScipSolvingStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.GScipSolvingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GScipSolvingStats::IsInitialized() const {
  return true;
}

void GScipSolvingStats::InternalSwap(GScipSolvingStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GScipSolvingStats, _impl_.deterministic_time_)
      + sizeof(GScipSolvingStats::_impl_.deterministic_time_)
      - PROTOBUF_FIELD_OFFSET(GScipSolvingStats, _impl_.best_objective_)>(
          reinterpret_cast<char*>(&_impl_.best_objective_),
          reinterpret_cast<char*>(&other->_impl_.best_objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GScipSolvingStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[7]);
}

// ===================================================================

class GScipOutput::_Internal {
 public:
  static const ::operations_research::GScipSolvingStats& stats(const GScipOutput* msg);
};

const ::operations_research::GScipSolvingStats&
GScipOutput::_Internal::stats(const GScipOutput* msg) {
  return *msg->_impl_.stats_;
}
GScipOutput::GScipOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.GScipOutput)
}
GScipOutput::GScipOutput(const GScipOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GScipOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_detail_){}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::operations_research::GScipSolvingStats(*from._impl_.stats_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:operations_research.GScipOutput)
}

inline void GScipOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_detail_){}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GScipOutput::~GScipOutput() {
  // @@protoc_insertion_point(destructor:operations_research.GScipOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GScipOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_detail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void GScipOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GScipOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.GScipOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_detail_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GScipOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.GScipOutput.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::operations_research::GScipOutput_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string status_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.GScipOutput.status_detail"));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.GScipSolvingStats stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GScipOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.GScipOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.GScipOutput.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string status_detail = 2;
  if (!this->_internal_status_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_detail().data(), static_cast<int>(this->_internal_status_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.GScipOutput.status_detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status_detail(), target);
  }

  // .operations_research.GScipSolvingStats stats = 3;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.GScipOutput)
  return target;
}

size_t GScipOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.GScipOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_detail = 2;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_detail());
  }

  // .operations_research.GScipSolvingStats stats = 3;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  // .operations_research.GScipOutput.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GScipOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GScipOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GScipOutput::GetClassData() const { return &_class_data_; }


void GScipOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GScipOutput*>(&to_msg);
  auto& from = static_cast<const GScipOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.GScipOutput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::operations_research::GScipSolvingStats::MergeFrom(
        from._internal_stats());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GScipOutput::CopyFrom(const GScipOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.GScipOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GScipOutput::IsInitialized() const {
  return true;
}

void GScipOutput::InternalSwap(GScipOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_detail_, lhs_arena,
      &other->_impl_.status_detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GScipOutput, _impl_.status_)
      + sizeof(GScipOutput::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GScipOutput, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GScipOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fgscip_2fgscip_2eproto_getter, &descriptor_table_ortools_2fgscip_2fgscip_2eproto_once,
      file_level_metadata_ortools_2fgscip_2fgscip_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_BoolParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_BoolParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_BoolParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_IntParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_IntParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_IntParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_LongParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_LongParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_LongParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_RealParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_RealParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_RealParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_CharParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_CharParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_CharParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters_StringParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters_StringParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters_StringParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipParameters*
Arena::CreateMaybeMessage< ::operations_research::GScipParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipSolvingStats*
Arena::CreateMaybeMessage< ::operations_research::GScipSolvingStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipSolvingStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::GScipOutput*
Arena::CreateMaybeMessage< ::operations_research::GScipOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::GScipOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
