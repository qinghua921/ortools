// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/linear_solver/linear_solver.proto

#include "ortools/linear_solver/linear_solver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
PROTOBUF_CONSTEXPR MPVariableProto::MPVariableProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objective_coefficient_)*/0
  , /*decltype(_impl_.is_integer_)*/false
  , /*decltype(_impl_.branching_priority_)*/0
  , /*decltype(_impl_.lower_bound_)*/-std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.upper_bound_)*/std::numeric_limits<double>::infinity()} {}
struct MPVariableProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPVariableProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPVariableProtoDefaultTypeInternal() {}
  union {
    MPVariableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPVariableProtoDefaultTypeInternal _MPVariableProto_default_instance_;
PROTOBUF_CONSTEXPR MPConstraintProto::MPConstraintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.coefficient_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_lazy_)*/false
  , /*decltype(_impl_.lower_bound_)*/-std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.upper_bound_)*/std::numeric_limits<double>::infinity()} {}
struct MPConstraintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPConstraintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPConstraintProtoDefaultTypeInternal() {}
  union {
    MPConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPConstraintProtoDefaultTypeInternal _MPConstraintProto_default_instance_;
PROTOBUF_CONSTEXPR MPGeneralConstraintProto::MPGeneralConstraintProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.general_constraint_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MPGeneralConstraintProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPGeneralConstraintProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPGeneralConstraintProtoDefaultTypeInternal() {}
  union {
    MPGeneralConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPGeneralConstraintProtoDefaultTypeInternal _MPGeneralConstraintProto_default_instance_;
PROTOBUF_CONSTEXPR MPIndicatorConstraint::MPIndicatorConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.constraint_)*/nullptr
  , /*decltype(_impl_.var_index_)*/0
  , /*decltype(_impl_.var_value_)*/0} {}
struct MPIndicatorConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPIndicatorConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPIndicatorConstraintDefaultTypeInternal() {}
  union {
    MPIndicatorConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPIndicatorConstraintDefaultTypeInternal _MPIndicatorConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPSosConstraint::MPSosConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_.weight_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct MPSosConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPSosConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPSosConstraintDefaultTypeInternal() {}
  union {
    MPSosConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPSosConstraintDefaultTypeInternal _MPSosConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPQuadraticConstraint::MPQuadraticConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_.coefficient_)*/{}
  , /*decltype(_impl_.qvar1_index_)*/{}
  , /*decltype(_impl_.qvar2_index_)*/{}
  , /*decltype(_impl_.qcoefficient_)*/{}
  , /*decltype(_impl_.lower_bound_)*/-std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.upper_bound_)*/std::numeric_limits<double>::infinity()} {}
struct MPQuadraticConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPQuadraticConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPQuadraticConstraintDefaultTypeInternal() {}
  union {
    MPQuadraticConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPQuadraticConstraintDefaultTypeInternal _MPQuadraticConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPAbsConstraint::MPAbsConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/0
  , /*decltype(_impl_.resultant_var_index_)*/0} {}
struct MPAbsConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPAbsConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPAbsConstraintDefaultTypeInternal() {}
  union {
    MPAbsConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPAbsConstraintDefaultTypeInternal _MPAbsConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPArrayConstraint::MPArrayConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_.resultant_var_index_)*/0} {}
struct MPArrayConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPArrayConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPArrayConstraintDefaultTypeInternal() {}
  union {
    MPArrayConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPArrayConstraintDefaultTypeInternal _MPArrayConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPArrayWithConstantConstraint::MPArrayWithConstantConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_.constant_)*/0
  , /*decltype(_impl_.resultant_var_index_)*/0} {}
struct MPArrayWithConstantConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPArrayWithConstantConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPArrayWithConstantConstraintDefaultTypeInternal() {}
  union {
    MPArrayWithConstantConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPArrayWithConstantConstraintDefaultTypeInternal _MPArrayWithConstantConstraint_default_instance_;
PROTOBUF_CONSTEXPR MPQuadraticObjective::MPQuadraticObjective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qvar1_index_)*/{}
  , /*decltype(_impl_.qvar2_index_)*/{}
  , /*decltype(_impl_.coefficient_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MPQuadraticObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPQuadraticObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPQuadraticObjectiveDefaultTypeInternal() {}
  union {
    MPQuadraticObjective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPQuadraticObjectiveDefaultTypeInternal _MPQuadraticObjective_default_instance_;
PROTOBUF_CONSTEXPR PartialVariableAssignment::PartialVariableAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_index_)*/{}
  , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
  , /*decltype(_impl_.var_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartialVariableAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialVariableAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialVariableAssignmentDefaultTypeInternal() {}
  union {
    PartialVariableAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialVariableAssignmentDefaultTypeInternal _PartialVariableAssignment_default_instance_;
PROTOBUF_CONSTEXPR MPModelProto_Annotation::MPModelProto_Annotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_type_)*/0
  , /*decltype(_impl_.target_index_)*/0} {}
struct MPModelProto_AnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelProto_AnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelProto_AnnotationDefaultTypeInternal() {}
  union {
    MPModelProto_Annotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelProto_AnnotationDefaultTypeInternal _MPModelProto_Annotation_default_instance_;
PROTOBUF_CONSTEXPR MPModelProto::MPModelProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.variable_)*/{}
  , /*decltype(_impl_.constraint_)*/{}
  , /*decltype(_impl_.general_constraint_)*/{}
  , /*decltype(_impl_.annotation_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solution_hint_)*/nullptr
  , /*decltype(_impl_.quadratic_objective_)*/nullptr
  , /*decltype(_impl_.objective_offset_)*/0
  , /*decltype(_impl_.maximize_)*/false} {}
struct MPModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelProtoDefaultTypeInternal() {}
  union {
    MPModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelProtoDefaultTypeInternal _MPModelProto_default_instance_;
PROTOBUF_CONSTEXPR OptionalDouble::OptionalDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/0} {}
struct OptionalDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalDoubleDefaultTypeInternal() {}
  union {
    OptionalDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalDoubleDefaultTypeInternal _OptionalDouble_default_instance_;
PROTOBUF_CONSTEXPR MPSolverCommonParameters::MPSolverCommonParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relative_mip_gap_)*/nullptr
  , /*decltype(_impl_.primal_tolerance_)*/nullptr
  , /*decltype(_impl_.dual_tolerance_)*/nullptr
  , /*decltype(_impl_.lp_algorithm_)*/0
  , /*decltype(_impl_.presolve_)*/0
  , /*decltype(_impl_.scaling_)*/0} {}
struct MPSolverCommonParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPSolverCommonParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPSolverCommonParametersDefaultTypeInternal() {}
  union {
    MPSolverCommonParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPSolverCommonParametersDefaultTypeInternal _MPSolverCommonParameters_default_instance_;
PROTOBUF_CONSTEXPR MPModelDeltaProto_VariableOverridesEntry_DoNotUse::MPModelDeltaProto_VariableOverridesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MPModelDeltaProto_VariableOverridesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelDeltaProto_VariableOverridesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelDeltaProto_VariableOverridesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MPModelDeltaProto_VariableOverridesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelDeltaProto_VariableOverridesEntry_DoNotUseDefaultTypeInternal _MPModelDeltaProto_VariableOverridesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MPModelDeltaProto_ConstraintOverridesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelDeltaProto_ConstraintOverridesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelDeltaProto_ConstraintOverridesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelDeltaProto_ConstraintOverridesEntry_DoNotUseDefaultTypeInternal _MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MPModelDeltaProto::MPModelDeltaProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.variable_overrides_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.constraint_overrides_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.baseline_model_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MPModelDeltaProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelDeltaProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelDeltaProtoDefaultTypeInternal() {}
  union {
    MPModelDeltaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelDeltaProtoDefaultTypeInternal _MPModelDeltaProto_default_instance_;
PROTOBUF_CONSTEXPR MPModelRequest::MPModelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.solver_specific_parameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_.model_delta_)*/nullptr
  , /*decltype(_impl_.solver_time_limit_seconds_)*/0
  , /*decltype(_impl_.enable_internal_solver_output_)*/false
  , /*decltype(_impl_.ignore_solver_specific_parameters_failure_)*/false
  , /*decltype(_impl_.populate_additional_solutions_up_to_)*/0
  , /*decltype(_impl_.solver_type_)*/2} {}
struct MPModelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPModelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPModelRequestDefaultTypeInternal() {}
  union {
    MPModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPModelRequestDefaultTypeInternal _MPModelRequest_default_instance_;
PROTOBUF_CONSTEXPR MPSolution::MPSolution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.variable_value_)*/{}
  , /*decltype(_impl_.objective_value_)*/0} {}
struct MPSolutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPSolutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPSolutionDefaultTypeInternal() {}
  union {
    MPSolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPSolutionDefaultTypeInternal _MPSolution_default_instance_;
PROTOBUF_CONSTEXPR MPSolveInfo::MPSolveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.solve_wall_time_seconds_)*/0
  , /*decltype(_impl_.solve_user_time_seconds_)*/0} {}
struct MPSolveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPSolveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPSolveInfoDefaultTypeInternal() {}
  union {
    MPSolveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPSolveInfoDefaultTypeInternal _MPSolveInfo_default_instance_;
PROTOBUF_CONSTEXPR MPSolutionResponse::MPSolutionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.variable_value_)*/{}
  , /*decltype(_impl_.dual_value_)*/{}
  , /*decltype(_impl_.reduced_cost_)*/{}
  , /*decltype(_impl_.additional_solutions_)*/{}
  , /*decltype(_impl_.status_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solver_specific_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solve_info_)*/nullptr
  , /*decltype(_impl_.objective_value_)*/0
  , /*decltype(_impl_.best_objective_bound_)*/0
  , /*decltype(_impl_.status_)*/99} {}
struct MPSolutionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MPSolutionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MPSolutionResponseDefaultTypeInternal() {}
  union {
    MPSolutionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MPSolutionResponseDefaultTypeInternal _MPSolutionResponse_default_instance_;
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto = nullptr;

const uint32_t TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.objective_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.is_integer_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPVariableProto, _impl_.branching_priority_),
  4,
  5,
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPConstraintProto, _impl_.is_lazy_),
  ~0u,
  ~0u,
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPGeneralConstraintProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPGeneralConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPGeneralConstraintProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPGeneralConstraintProto, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPGeneralConstraintProto, _impl_.general_constraint_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPIndicatorConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPIndicatorConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPIndicatorConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPIndicatorConstraint, _impl_.var_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPIndicatorConstraint, _impl_.constraint_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSosConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSosConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSosConstraint, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSosConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSosConstraint, _impl_.weight_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.qvar1_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.qvar2_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.qcoefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticConstraint, _impl_.upper_bound_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPAbsConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPAbsConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPAbsConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPAbsConstraint, _impl_.resultant_var_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayConstraint, _impl_.resultant_var_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayWithConstantConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayWithConstantConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayWithConstantConstraint, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayWithConstantConstraint, _impl_.constant_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPArrayWithConstantConstraint, _impl_.resultant_var_index_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticObjective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticObjective, _impl_.qvar1_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticObjective, _impl_.qvar2_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPQuadraticObjective, _impl_.coefficient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::PartialVariableAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::PartialVariableAssignment, _impl_.var_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::PartialVariableAssignment, _impl_.var_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_.target_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_.target_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_.target_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_.payload_key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto_Annotation, _impl_.payload_value_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.variable_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.general_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.maximize_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.objective_offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.quadratic_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.solution_hint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelProto, _impl_.annotation_),
  ~0u,
  ~0u,
  ~0u,
  4,
  3,
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::OptionalDouble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::OptionalDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::OptionalDouble, _impl_.value_),
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.relative_mip_gap_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.primal_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.dual_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.lp_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolverCommonParameters, _impl_.scaling_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto, _impl_.baseline_model_file_path_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto, _impl_.variable_overrides_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelDeltaProto, _impl_.constraint_overrides_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.solver_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.solver_time_limit_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.enable_internal_solver_output_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.solver_specific_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.ignore_solver_specific_parameters_failure_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.model_delta_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPModelRequest, _impl_.populate_additional_solutions_up_to_),
  1,
  7,
  3,
  4,
  0,
  5,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolution, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolution, _impl_.objective_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolution, _impl_.variable_value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolveInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolveInfo, _impl_.solve_wall_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolveInfo, _impl_.solve_user_time_seconds_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.status_str_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.objective_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.best_objective_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.variable_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.solve_info_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.solver_specific_info_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.dual_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.reduced_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::MPSolutionResponse, _impl_.additional_solutions_),
  5,
  0,
  3,
  4,
  ~0u,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::operations_research::MPVariableProto)},
  { 18, 30, -1, sizeof(::operations_research::MPConstraintProto)},
  { 36, 52, -1, sizeof(::operations_research::MPGeneralConstraintProto)},
  { 61, 70, -1, sizeof(::operations_research::MPIndicatorConstraint)},
  { 73, 82, -1, sizeof(::operations_research::MPSosConstraint)},
  { 85, 98, -1, sizeof(::operations_research::MPQuadraticConstraint)},
  { 105, 113, -1, sizeof(::operations_research::MPAbsConstraint)},
  { 115, 123, -1, sizeof(::operations_research::MPArrayConstraint)},
  { 125, 134, -1, sizeof(::operations_research::MPArrayWithConstantConstraint)},
  { 137, -1, -1, sizeof(::operations_research::MPQuadraticObjective)},
  { 146, -1, -1, sizeof(::operations_research::PartialVariableAssignment)},
  { 154, 165, -1, sizeof(::operations_research::MPModelProto_Annotation)},
  { 170, 185, -1, sizeof(::operations_research::MPModelProto)},
  { 194, 201, -1, sizeof(::operations_research::OptionalDouble)},
  { 202, 214, -1, sizeof(::operations_research::MPSolverCommonParameters)},
  { 220, 228, -1, sizeof(::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse)},
  { 230, 238, -1, sizeof(::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse)},
  { 240, 249, -1, sizeof(::operations_research::MPModelDeltaProto)},
  { 252, 266, -1, sizeof(::operations_research::MPModelRequest)},
  { 274, 282, -1, sizeof(::operations_research::MPSolution)},
  { 284, 292, -1, sizeof(::operations_research::MPSolveInfo)},
  { 294, 310, -1, sizeof(::operations_research::MPSolutionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::_MPVariableProto_default_instance_._instance,
  &::operations_research::_MPConstraintProto_default_instance_._instance,
  &::operations_research::_MPGeneralConstraintProto_default_instance_._instance,
  &::operations_research::_MPIndicatorConstraint_default_instance_._instance,
  &::operations_research::_MPSosConstraint_default_instance_._instance,
  &::operations_research::_MPQuadraticConstraint_default_instance_._instance,
  &::operations_research::_MPAbsConstraint_default_instance_._instance,
  &::operations_research::_MPArrayConstraint_default_instance_._instance,
  &::operations_research::_MPArrayWithConstantConstraint_default_instance_._instance,
  &::operations_research::_MPQuadraticObjective_default_instance_._instance,
  &::operations_research::_PartialVariableAssignment_default_instance_._instance,
  &::operations_research::_MPModelProto_Annotation_default_instance_._instance,
  &::operations_research::_MPModelProto_default_instance_._instance,
  &::operations_research::_OptionalDouble_default_instance_._instance,
  &::operations_research::_MPSolverCommonParameters_default_instance_._instance,
  &::operations_research::_MPModelDeltaProto_VariableOverridesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse_default_instance_._instance,
  &::operations_research::_MPModelDeltaProto_default_instance_._instance,
  &::operations_research::_MPModelRequest_default_instance_._instance,
  &::operations_research::_MPSolution_default_instance_._instance,
  &::operations_research::_MPSolveInfo_default_instance_._instance,
  &::operations_research::_MPSolutionResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)ortools/linear_solver/linear_solver.pr"
  "oto\022\023operations_research\032#ortools/util/o"
  "ptional_boolean.proto\"\262\001\n\017MPVariableProt"
  "o\022\031\n\013lower_bound\030\001 \001(\001:\004-inf\022\030\n\013upper_bo"
  "und\030\002 \001(\001:\003inf\022 \n\025objective_coefficient\030"
  "\003 \001(\001:\0010\022\031\n\nis_integer\030\004 \001(\010:\005false\022\016\n\004n"
  "ame\030\005 \001(\t:\000\022\035\n\022branching_priority\030\006 \001(\005:"
  "\0010\"\240\001\n\021MPConstraintProto\022\025\n\tvar_index\030\006 "
  "\003(\005B\002\020\001\022\027\n\013coefficient\030\007 \003(\001B\002\020\001\022\031\n\013lowe"
  "r_bound\030\002 \001(\001:\004-inf\022\030\n\013upper_bound\030\003 \001(\001"
  ":\003inf\022\016\n\004name\030\004 \001(\t:\000\022\026\n\007is_lazy\030\005 \001(\010:\005"
  "false\"\367\004\n\030MPGeneralConstraintProto\022\016\n\004na"
  "me\030\001 \001(\t:\000\022J\n\024indicator_constraint\030\002 \001(\013"
  "2*.operations_research.MPIndicatorConstr"
  "aintH\000\022>\n\016sos_constraint\030\003 \001(\0132$.operati"
  "ons_research.MPSosConstraintH\000\022J\n\024quadra"
  "tic_constraint\030\004 \001(\0132*.operations_resear"
  "ch.MPQuadraticConstraintH\000\022>\n\016abs_constr"
  "aint\030\005 \001(\0132$.operations_research.MPAbsCo"
  "nstraintH\000\022@\n\016and_constraint\030\006 \001(\0132&.ope"
  "rations_research.MPArrayConstraintH\000\022\?\n\r"
  "or_constraint\030\007 \001(\0132&.operations_researc"
  "h.MPArrayConstraintH\000\022L\n\016min_constraint\030"
  "\010 \001(\01322.operations_research.MPArrayWithC"
  "onstantConstraintH\000\022L\n\016max_constraint\030\t "
  "\001(\01322.operations_research.MPArrayWithCon"
  "stantConstraintH\000B\024\n\022general_constraint\""
  "y\n\025MPIndicatorConstraint\022\021\n\tvar_index\030\001 "
  "\001(\005\022\021\n\tvar_value\030\002 \001(\005\022:\n\nconstraint\030\003 \001"
  "(\0132&.operations_research.MPConstraintPro"
  "to\"\237\001\n\017MPSosConstraint\022E\n\004type\030\001 \001(\0162).o"
  "perations_research.MPSosConstraint.Type:"
  "\014SOS1_DEFAULT\022\021\n\tvar_index\030\002 \003(\005\022\016\n\006weig"
  "ht\030\003 \003(\001\"\"\n\004Type\022\020\n\014SOS1_DEFAULT\020\000\022\010\n\004SO"
  "S2\020\001\"\264\001\n\025MPQuadraticConstraint\022\021\n\tvar_in"
  "dex\030\001 \003(\005\022\023\n\013coefficient\030\002 \003(\001\022\023\n\013qvar1_"
  "index\030\003 \003(\005\022\023\n\013qvar2_index\030\004 \003(\005\022\024\n\014qcoe"
  "fficient\030\005 \003(\001\022\031\n\013lower_bound\030\006 \001(\001:\004-in"
  "f\022\030\n\013upper_bound\030\007 \001(\001:\003inf\"A\n\017MPAbsCons"
  "traint\022\021\n\tvar_index\030\001 \001(\005\022\033\n\023resultant_v"
  "ar_index\030\002 \001(\005\"C\n\021MPArrayConstraint\022\021\n\tv"
  "ar_index\030\001 \003(\005\022\033\n\023resultant_var_index\030\002 "
  "\001(\005\"a\n\035MPArrayWithConstantConstraint\022\021\n\t"
  "var_index\030\001 \003(\005\022\020\n\010constant\030\002 \001(\001\022\033\n\023res"
  "ultant_var_index\030\003 \001(\005\"U\n\024MPQuadraticObj"
  "ective\022\023\n\013qvar1_index\030\001 \003(\005\022\023\n\013qvar2_ind"
  "ex\030\002 \003(\005\022\023\n\013coefficient\030\003 \003(\001\"I\n\031Partial"
  "VariableAssignment\022\025\n\tvar_index\030\001 \003(\005B\002\020"
  "\001\022\025\n\tvar_value\030\002 \003(\001B\002\020\001\"\344\005\n\014MPModelProt"
  "o\0226\n\010variable\030\003 \003(\0132$.operations_researc"
  "h.MPVariableProto\022:\n\nconstraint\030\004 \003(\0132&."
  "operations_research.MPConstraintProto\022I\n"
  "\022general_constraint\030\007 \003(\0132-.operations_r"
  "esearch.MPGeneralConstraintProto\022\027\n\010maxi"
  "mize\030\001 \001(\010:\005false\022\033\n\020objective_offset\030\002 "
  "\001(\001:\0010\022F\n\023quadratic_objective\030\010 \001(\0132).op"
  "erations_research.MPQuadraticObjective\022\016"
  "\n\004name\030\005 \001(\t:\000\022E\n\rsolution_hint\030\006 \001(\0132.."
  "operations_research.PartialVariableAssig"
  "nment\022@\n\nannotation\030\t \003(\0132,.operations_r"
  "esearch.MPModelProto.Annotation\032\375\001\n\nAnno"
  "tation\022L\n\013target_type\030\001 \001(\01627.operations"
  "_research.MPModelProto.Annotation.Target"
  "Type\022\024\n\014target_index\030\002 \001(\005\022\023\n\013target_nam"
  "e\030\003 \001(\t\022\023\n\013payload_key\030\004 \001(\t\022\025\n\rpayload_"
  "value\030\005 \001(\t\"J\n\nTargetType\022\024\n\020VARIABLE_DE"
  "FAULT\020\000\022\016\n\nCONSTRAINT\020\001\022\026\n\022GENERAL_CONST"
  "RAINT\020\002\"\037\n\016OptionalDouble\022\r\n\005value\030\001 \001(\001"
  "\"\275\004\n\030MPSolverCommonParameters\022=\n\020relativ"
  "e_mip_gap\030\001 \001(\0132#.operations_research.Op"
  "tionalDouble\022=\n\020primal_tolerance\030\002 \001(\0132#"
  ".operations_research.OptionalDouble\022;\n\016d"
  "ual_tolerance\030\003 \001(\0132#.operations_researc"
  "h.OptionalDouble\022j\n\014lp_algorithm\030\004 \001(\0162\?"
  ".operations_research.MPSolverCommonParam"
  "eters.LPAlgorithmValues:\023LP_ALGO_UNSPECI"
  "FIED\022H\n\010presolve\030\005 \001(\0162$.operations_rese"
  "arch.OptionalBoolean:\020BOOL_UNSPECIFIED\022G"
  "\n\007scaling\030\007 \001(\0162$.operations_research.Op"
  "tionalBoolean:\020BOOL_UNSPECIFIED\"g\n\021LPAlg"
  "orithmValues\022\027\n\023LP_ALGO_UNSPECIFIED\020\000\022\020\n"
  "\014LP_ALGO_DUAL\020\001\022\022\n\016LP_ALGO_PRIMAL\020\002\022\023\n\017L"
  "P_ALGO_BARRIER\020\003\"\263\003\n\021MPModelDeltaProto\022 "
  "\n\030baseline_model_file_path\030\001 \001(\t\022Y\n\022vari"
  "able_overrides\030\002 \003(\0132=.operations_resear"
  "ch.MPModelDeltaProto.VariableOverridesEn"
  "try\022]\n\024constraint_overrides\030\003 \003(\0132\?.oper"
  "ations_research.MPModelDeltaProto.Constr"
  "aintOverridesEntry\032^\n\026VariableOverridesE"
  "ntry\022\013\n\003key\030\001 \001(\005\0223\n\005value\030\002 \001(\0132$.opera"
  "tions_research.MPVariableProto:\0028\001\032b\n\030Co"
  "nstraintOverridesEntry\022\013\n\003key\030\001 \001(\005\0225\n\005v"
  "alue\030\002 \001(\0132&.operations_research.MPConst"
  "raintProto:\0028\001\"\233\010\n\016MPModelRequest\0220\n\005mod"
  "el\030\001 \001(\0132!.operations_research.MPModelPr"
  "oto\022\\\n\013solver_type\030\002 \001(\0162..operations_re"
  "search.MPModelRequest.SolverType:\027GLOP_L"
  "INEAR_PROGRAMMING\022!\n\031solver_time_limit_s"
  "econds\030\003 \001(\001\022,\n\035enable_internal_solver_o"
  "utput\030\004 \001(\010:\005false\022\"\n\032solver_specific_pa"
  "rameters\030\005 \001(\t\0228\n)ignore_solver_specific"
  "_parameters_failure\030\t \001(\010:\005false\022;\n\013mode"
  "l_delta\030\010 \001(\0132&.operations_research.MPMo"
  "delDeltaProto\022.\n#populate_additional_sol"
  "utions_up_to\030\013 \001(\005:\0010\"\334\004\n\nSolverType\022\032\n\026"
  "CLP_LINEAR_PROGRAMMING\020\000\022\033\n\027GLOP_LINEAR_"
  "PROGRAMMING\020\002\022\033\n\027GLPK_LINEAR_PROGRAMMING"
  "\020\001\022\035\n\031GUROBI_LINEAR_PROGRAMMING\020\006\022\035\n\031XPR"
  "ESS_LINEAR_PROGRAMMING\020e\022\034\n\030CPLEX_LINEAR"
  "_PROGRAMMING\020\n\022\034\n\030HIGHS_LINEAR_PROGRAMMI"
  "NG\020\017\022\"\n\036SCIP_MIXED_INTEGER_PROGRAMMING\020\003"
  "\022\"\n\036GLPK_MIXED_INTEGER_PROGRAMMING\020\004\022!\n\035"
  "CBC_MIXED_INTEGER_PROGRAMMING\020\005\022$\n GUROB"
  "I_MIXED_INTEGER_PROGRAMMING\020\007\022$\n XPRESS_"
  "MIXED_INTEGER_PROGRAMMING\020f\022#\n\037CPLEX_MIX"
  "ED_INTEGER_PROGRAMMING\020\013\022#\n\037HIGHS_MIXED_"
  "INTEGER_PROGRAMMING\020\020\022\033\n\027BOP_INTEGER_PRO"
  "GRAMMING\020\014\022\033\n\027SAT_INTEGER_PROGRAMMING\020\016\022"
  "\033\n\027PDLP_LINEAR_PROGRAMMING\020\010\022&\n\"KNAPSACK"
  "_MIXED_INTEGER_PROGRAMMING\020\r\"A\n\nMPSoluti"
  "on\022\027\n\017objective_value\030\001 \001(\001\022\032\n\016variable_"
  "value\030\002 \003(\001B\002\020\001\"O\n\013MPSolveInfo\022\037\n\027solve_"
  "wall_time_seconds\030\001 \001(\001\022\037\n\027solve_user_ti"
  "me_seconds\030\002 \001(\001\"\226\003\n\022MPSolutionResponse\022"
  "T\n\006status\030\001 \001(\0162+.operations_research.MP"
  "SolverResponseStatus:\027MPSOLVER_UNKNOWN_S"
  "TATUS\022\022\n\nstatus_str\030\007 \001(\t\022\027\n\017objective_v"
  "alue\030\002 \001(\001\022\034\n\024best_objective_bound\030\005 \001(\001"
  "\022\032\n\016variable_value\030\003 \003(\001B\002\020\001\0224\n\nsolve_in"
  "fo\030\n \001(\0132 .operations_research.MPSolveIn"
  "fo\022\034\n\024solver_specific_info\030\013 \001(\014\022\026\n\ndual"
  "_value\030\004 \003(\001B\002\020\001\022\030\n\014reduced_cost\030\006 \003(\001B\002"
  "\020\001\022=\n\024additional_solutions\030\010 \003(\0132\037.opera"
  "tions_research.MPSolution*\275\003\n\026MPSolverRe"
  "sponseStatus\022\024\n\020MPSOLVER_OPTIMAL\020\000\022\025\n\021MP"
  "SOLVER_FEASIBLE\020\001\022\027\n\023MPSOLVER_INFEASIBLE"
  "\020\002\022\026\n\022MPSOLVER_UNBOUNDED\020\003\022\025\n\021MPSOLVER_A"
  "BNORMAL\020\004\022\027\n\023MPSOLVER_NOT_SOLVED\020\006\022\033\n\027MP"
  "SOLVER_MODEL_IS_VALID\020a\022\036\n\032MPSOLVER_CANC"
  "ELLED_BY_USER\020b\022\033\n\027MPSOLVER_UNKNOWN_STAT"
  "US\020c\022\032\n\026MPSOLVER_MODEL_INVALID\020\005\022(\n$MPSO"
  "LVER_MODEL_INVALID_SOLUTION_HINT\020T\022,\n(MP"
  "SOLVER_MODEL_INVALID_SOLVER_PARAMETERS\020U"
  "\022$\n MPSOLVER_SOLVER_TYPE_UNAVAILABLE\020\007\022!"
  "\n\035MPSOLVER_INCOMPATIBLE_OPTIONS\020qB#\n\037com"
  ".google.ortools.linearsolverP\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_deps[1] = {
  &::descriptor_table_ortools_2futil_2foptional_5fboolean_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto = {
    false, false, 5830, descriptor_table_protodef_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto,
    "ortools/linear_solver/linear_solver.proto",
    &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once, descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_deps, 1, 22,
    schemas, file_default_instances, TableStruct_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto::offsets,
    file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto, file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto,
    file_level_service_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter() {
  return &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPSosConstraint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
  return file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[0];
}
bool MPSosConstraint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MPSosConstraint_Type MPSosConstraint::SOS1_DEFAULT;
constexpr MPSosConstraint_Type MPSosConstraint::SOS2;
constexpr MPSosConstraint_Type MPSosConstraint::Type_MIN;
constexpr MPSosConstraint_Type MPSosConstraint::Type_MAX;
constexpr int MPSosConstraint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPModelProto_Annotation_TargetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
  return file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[1];
}
bool MPModelProto_Annotation_TargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MPModelProto_Annotation_TargetType MPModelProto_Annotation::VARIABLE_DEFAULT;
constexpr MPModelProto_Annotation_TargetType MPModelProto_Annotation::CONSTRAINT;
constexpr MPModelProto_Annotation_TargetType MPModelProto_Annotation::GENERAL_CONSTRAINT;
constexpr MPModelProto_Annotation_TargetType MPModelProto_Annotation::TargetType_MIN;
constexpr MPModelProto_Annotation_TargetType MPModelProto_Annotation::TargetType_MAX;
constexpr int MPModelProto_Annotation::TargetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPSolverCommonParameters_LPAlgorithmValues_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
  return file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[2];
}
bool MPSolverCommonParameters_LPAlgorithmValues_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LP_ALGO_UNSPECIFIED;
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LP_ALGO_DUAL;
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LP_ALGO_PRIMAL;
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LP_ALGO_BARRIER;
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LPAlgorithmValues_MIN;
constexpr MPSolverCommonParameters_LPAlgorithmValues MPSolverCommonParameters::LPAlgorithmValues_MAX;
constexpr int MPSolverCommonParameters::LPAlgorithmValues_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPModelRequest_SolverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
  return file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[3];
}
bool MPModelRequest_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MPModelRequest_SolverType MPModelRequest::CLP_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::GLOP_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::GLPK_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::GUROBI_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::XPRESS_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::CPLEX_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::HIGHS_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::SCIP_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::GLPK_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::CBC_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::GUROBI_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::XPRESS_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::CPLEX_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::HIGHS_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::BOP_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::SAT_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::PDLP_LINEAR_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::KNAPSACK_MIXED_INTEGER_PROGRAMMING;
constexpr MPModelRequest_SolverType MPModelRequest::SolverType_MIN;
constexpr MPModelRequest_SolverType MPModelRequest::SolverType_MAX;
constexpr int MPModelRequest::SolverType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MPSolverResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto);
  return file_level_enum_descriptors_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[4];
}
bool MPSolverResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 84:
    case 85:
    case 97:
    case 98:
    case 99:
    case 113:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MPVariableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MPVariableProto>()._impl_._has_bits_);
  static void set_has_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_objective_coefficient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_integer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_branching_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MPVariableProto::MPVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPVariableProto)
}
MPVariableProto::MPVariableProto(const MPVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPVariableProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objective_coefficient_){}
    , decltype(_impl_.is_integer_){}
    , decltype(_impl_.branching_priority_){}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.upper_bound_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objective_coefficient_, &from._impl_.objective_coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upper_bound_) -
    reinterpret_cast<char*>(&_impl_.objective_coefficient_)) + sizeof(_impl_.upper_bound_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPVariableProto)
}

inline void MPVariableProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objective_coefficient_){0}
    , decltype(_impl_.is_integer_){false}
    , decltype(_impl_.branching_priority_){0}
    , decltype(_impl_.lower_bound_){-std::numeric_limits<double>::infinity()}
    , decltype(_impl_.upper_bound_){std::numeric_limits<double>::infinity()}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPVariableProto::~MPVariableProto() {
  // @@protoc_insertion_point(destructor:operations_research.MPVariableProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MPVariableProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPVariableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPVariableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.objective_coefficient_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.branching_priority_) -
        reinterpret_cast<char*>(&_impl_.objective_coefficient_)) + sizeof(_impl_.branching_priority_));
    _impl_.lower_bound_ = -std::numeric_limits<double>::infinity();
    _impl_.upper_bound_ = std::numeric_limits<double>::infinity();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPVariableProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lower_bound = 1 [default = -inf];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lower_bound(&has_bits);
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double upper_bound = 2 [default = inf];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_coefficient = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_objective_coefficient(&has_bits);
          _impl_.objective_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_integer = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_integer(&has_bits);
          _impl_.is_integer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPVariableProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 branching_priority = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_branching_priority(&has_bits);
          _impl_.branching_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPVariableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPVariableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lower_bound = 1 [default = -inf];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lower_bound(), target);
  }

  // optional double upper_bound = 2 [default = inf];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_upper_bound(), target);
  }

  // optional double objective_coefficient = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_objective_coefficient(), target);
  }

  // optional bool is_integer = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_integer(), target);
  }

  // optional string name = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPVariableProto.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional int32 branching_priority = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_branching_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPVariableProto)
  return target;
}

size_t MPVariableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPVariableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 5 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double objective_coefficient = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool is_integer = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 branching_priority = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_branching_priority());
    }

    // optional double lower_bound = 1 [default = -inf];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double upper_bound = 2 [default = inf];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPVariableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPVariableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPVariableProto::GetClassData() const { return &_class_data_; }


void MPVariableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPVariableProto*>(&to_msg);
  auto& from = static_cast<const MPVariableProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPVariableProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.objective_coefficient_ = from._impl_.objective_coefficient_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_integer_ = from._impl_.is_integer_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.branching_priority_ = from._impl_.branching_priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lower_bound_ = from._impl_.lower_bound_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPVariableProto::CopyFrom(const MPVariableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPVariableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPVariableProto::IsInitialized() const {
  return true;
}

void MPVariableProto::InternalSwap(MPVariableProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPVariableProto, _impl_.branching_priority_)
      + sizeof(MPVariableProto::_impl_.branching_priority_)
      - PROTOBUF_FIELD_OFFSET(MPVariableProto, _impl_.objective_coefficient_)>(
          reinterpret_cast<char*>(&_impl_.objective_coefficient_),
          reinterpret_cast<char*>(&other->_impl_.objective_coefficient_));
  swap(_impl_.lower_bound_, other->_impl_.lower_bound_);
  swap(_impl_.upper_bound_, other->_impl_.upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPVariableProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[0]);
}

// ===================================================================

class MPConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MPConstraintProto>()._impl_._has_bits_);
  static void set_has_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_lazy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPConstraintProto::MPConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPConstraintProto)
}
MPConstraintProto::MPConstraintProto(const MPConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPConstraintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){from._impl_.var_index_}
    , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficient_){from._impl_.coefficient_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_lazy_){}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.upper_bound_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_lazy_, &from._impl_.is_lazy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upper_bound_) -
    reinterpret_cast<char*>(&_impl_.is_lazy_)) + sizeof(_impl_.upper_bound_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPConstraintProto)
}

inline void MPConstraintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){arena}
    , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
    , decltype(_impl_.coefficient_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_lazy_){false}
    , decltype(_impl_.lower_bound_){-std::numeric_limits<double>::infinity()}
    , decltype(_impl_.upper_bound_){std::numeric_limits<double>::infinity()}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPConstraintProto::~MPConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.MPConstraintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
  _impl_.coefficient_.~RepeatedField();
  _impl_.name_.Destroy();
}

void MPConstraintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPConstraintProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  _impl_.coefficient_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    _impl_.is_lazy_ = false;
    _impl_.lower_bound_ = -std::numeric_limits<double>::infinity();
    _impl_.upper_bound_ = std::numeric_limits<double>::infinity();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPConstraintProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lower_bound = 2 [default = -inf];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lower_bound(&has_bits);
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double upper_bound = 3 [default = inf];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPConstraintProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_lazy = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_lazy(&has_bits);
          _impl_.is_lazy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 var_index = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double coefficient = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficient(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_coefficient(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPConstraintProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPConstraintProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lower_bound = 2 [default = -inf];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_bound(), target);
  }

  // optional double upper_bound = 3 [default = inf];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_upper_bound(), target);
  }

  // optional string name = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPConstraintProto.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional bool is_lazy = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_lazy(), target);
  }

  // repeated int32 var_index = 6 [packed = true];
  {
    int byte_size = _impl_._var_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_var_index(), byte_size, target);
    }
  }

  // repeated double coefficient = 7 [packed = true];
  if (this->_internal_coefficient_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_coefficient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPConstraintProto)
  return target;
}

size_t MPConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPConstraintProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._var_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double coefficient = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficient_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 4 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool is_lazy = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double lower_bound = 2 [default = -inf];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double upper_bound = 3 [default = inf];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPConstraintProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPConstraintProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPConstraintProto::GetClassData() const { return &_class_data_; }


void MPConstraintProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPConstraintProto*>(&to_msg);
  auto& from = static_cast<const MPConstraintProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPConstraintProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  _this->_impl_.coefficient_.MergeFrom(from._impl_.coefficient_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_lazy_ = from._impl_.is_lazy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lower_bound_ = from._impl_.lower_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPConstraintProto::CopyFrom(const MPConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPConstraintProto::IsInitialized() const {
  return true;
}

void MPConstraintProto::InternalSwap(MPConstraintProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  _impl_.coefficient_.InternalSwap(&other->_impl_.coefficient_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.is_lazy_, other->_impl_.is_lazy_);
  swap(_impl_.lower_bound_, other->_impl_.lower_bound_);
  swap(_impl_.upper_bound_, other->_impl_.upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPConstraintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[1]);
}

// ===================================================================

class MPGeneralConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MPGeneralConstraintProto>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::MPIndicatorConstraint& indicator_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPSosConstraint& sos_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPQuadraticConstraint& quadratic_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPAbsConstraint& abs_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPArrayConstraint& and_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPArrayConstraint& or_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPArrayWithConstantConstraint& min_constraint(const MPGeneralConstraintProto* msg);
  static const ::operations_research::MPArrayWithConstantConstraint& max_constraint(const MPGeneralConstraintProto* msg);
};

const ::operations_research::MPIndicatorConstraint&
MPGeneralConstraintProto::_Internal::indicator_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.indicator_constraint_;
}
const ::operations_research::MPSosConstraint&
MPGeneralConstraintProto::_Internal::sos_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.sos_constraint_;
}
const ::operations_research::MPQuadraticConstraint&
MPGeneralConstraintProto::_Internal::quadratic_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.quadratic_constraint_;
}
const ::operations_research::MPAbsConstraint&
MPGeneralConstraintProto::_Internal::abs_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.abs_constraint_;
}
const ::operations_research::MPArrayConstraint&
MPGeneralConstraintProto::_Internal::and_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.and_constraint_;
}
const ::operations_research::MPArrayConstraint&
MPGeneralConstraintProto::_Internal::or_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.or_constraint_;
}
const ::operations_research::MPArrayWithConstantConstraint&
MPGeneralConstraintProto::_Internal::min_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.min_constraint_;
}
const ::operations_research::MPArrayWithConstantConstraint&
MPGeneralConstraintProto::_Internal::max_constraint(const MPGeneralConstraintProto* msg) {
  return *msg->_impl_.general_constraint_.max_constraint_;
}
void MPGeneralConstraintProto::set_allocated_indicator_constraint(::operations_research::MPIndicatorConstraint* indicator_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (indicator_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(indicator_constraint);
    if (message_arena != submessage_arena) {
      indicator_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicator_constraint, submessage_arena);
    }
    set_has_indicator_constraint();
    _impl_.general_constraint_.indicator_constraint_ = indicator_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.indicator_constraint)
}
void MPGeneralConstraintProto::set_allocated_sos_constraint(::operations_research::MPSosConstraint* sos_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (sos_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sos_constraint);
    if (message_arena != submessage_arena) {
      sos_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sos_constraint, submessage_arena);
    }
    set_has_sos_constraint();
    _impl_.general_constraint_.sos_constraint_ = sos_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.sos_constraint)
}
void MPGeneralConstraintProto::set_allocated_quadratic_constraint(::operations_research::MPQuadraticConstraint* quadratic_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (quadratic_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quadratic_constraint);
    if (message_arena != submessage_arena) {
      quadratic_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quadratic_constraint, submessage_arena);
    }
    set_has_quadratic_constraint();
    _impl_.general_constraint_.quadratic_constraint_ = quadratic_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.quadratic_constraint)
}
void MPGeneralConstraintProto::set_allocated_abs_constraint(::operations_research::MPAbsConstraint* abs_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (abs_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(abs_constraint);
    if (message_arena != submessage_arena) {
      abs_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abs_constraint, submessage_arena);
    }
    set_has_abs_constraint();
    _impl_.general_constraint_.abs_constraint_ = abs_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.abs_constraint)
}
void MPGeneralConstraintProto::set_allocated_and_constraint(::operations_research::MPArrayConstraint* and_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (and_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(and_constraint);
    if (message_arena != submessage_arena) {
      and_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, and_constraint, submessage_arena);
    }
    set_has_and_constraint();
    _impl_.general_constraint_.and_constraint_ = and_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.and_constraint)
}
void MPGeneralConstraintProto::set_allocated_or_constraint(::operations_research::MPArrayConstraint* or_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (or_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(or_constraint);
    if (message_arena != submessage_arena) {
      or_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, or_constraint, submessage_arena);
    }
    set_has_or_constraint();
    _impl_.general_constraint_.or_constraint_ = or_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.or_constraint)
}
void MPGeneralConstraintProto::set_allocated_min_constraint(::operations_research::MPArrayWithConstantConstraint* min_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (min_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min_constraint);
    if (message_arena != submessage_arena) {
      min_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_constraint, submessage_arena);
    }
    set_has_min_constraint();
    _impl_.general_constraint_.min_constraint_ = min_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.min_constraint)
}
void MPGeneralConstraintProto::set_allocated_max_constraint(::operations_research::MPArrayWithConstantConstraint* max_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_general_constraint();
  if (max_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max_constraint);
    if (message_arena != submessage_arena) {
      max_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_constraint, submessage_arena);
    }
    set_has_max_constraint();
    _impl_.general_constraint_.max_constraint_ = max_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.MPGeneralConstraintProto.max_constraint)
}
MPGeneralConstraintProto::MPGeneralConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPGeneralConstraintProto)
}
MPGeneralConstraintProto::MPGeneralConstraintProto(const MPGeneralConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPGeneralConstraintProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.general_constraint_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_general_constraint();
  switch (from.general_constraint_case()) {
    case kIndicatorConstraint: {
      _this->_internal_mutable_indicator_constraint()->::operations_research::MPIndicatorConstraint::MergeFrom(
          from._internal_indicator_constraint());
      break;
    }
    case kSosConstraint: {
      _this->_internal_mutable_sos_constraint()->::operations_research::MPSosConstraint::MergeFrom(
          from._internal_sos_constraint());
      break;
    }
    case kQuadraticConstraint: {
      _this->_internal_mutable_quadratic_constraint()->::operations_research::MPQuadraticConstraint::MergeFrom(
          from._internal_quadratic_constraint());
      break;
    }
    case kAbsConstraint: {
      _this->_internal_mutable_abs_constraint()->::operations_research::MPAbsConstraint::MergeFrom(
          from._internal_abs_constraint());
      break;
    }
    case kAndConstraint: {
      _this->_internal_mutable_and_constraint()->::operations_research::MPArrayConstraint::MergeFrom(
          from._internal_and_constraint());
      break;
    }
    case kOrConstraint: {
      _this->_internal_mutable_or_constraint()->::operations_research::MPArrayConstraint::MergeFrom(
          from._internal_or_constraint());
      break;
    }
    case kMinConstraint: {
      _this->_internal_mutable_min_constraint()->::operations_research::MPArrayWithConstantConstraint::MergeFrom(
          from._internal_min_constraint());
      break;
    }
    case kMaxConstraint: {
      _this->_internal_mutable_max_constraint()->::operations_research::MPArrayWithConstantConstraint::MergeFrom(
          from._internal_max_constraint());
      break;
    }
    case GENERAL_CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.MPGeneralConstraintProto)
}

inline void MPGeneralConstraintProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.general_constraint_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_general_constraint();
}

MPGeneralConstraintProto::~MPGeneralConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.MPGeneralConstraintProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPGeneralConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_general_constraint()) {
    clear_general_constraint();
  }
}

void MPGeneralConstraintProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPGeneralConstraintProto::clear_general_constraint() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.MPGeneralConstraintProto)
  switch (general_constraint_case()) {
    case kIndicatorConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.indicator_constraint_;
      }
      break;
    }
    case kSosConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.sos_constraint_;
      }
      break;
    }
    case kQuadraticConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.quadratic_constraint_;
      }
      break;
    }
    case kAbsConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.abs_constraint_;
      }
      break;
    }
    case kAndConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.and_constraint_;
      }
      break;
    }
    case kOrConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.or_constraint_;
      }
      break;
    }
    case kMinConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.min_constraint_;
      }
      break;
    }
    case kMaxConstraint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.general_constraint_.max_constraint_;
      }
      break;
    }
    case GENERAL_CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GENERAL_CONSTRAINT_NOT_SET;
}


void MPGeneralConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPGeneralConstraintProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  clear_general_constraint();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPGeneralConstraintProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPGeneralConstraintProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPIndicatorConstraint indicator_constraint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicator_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPSosConstraint sos_constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sos_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPQuadraticConstraint quadratic_constraint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadratic_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPAbsConstraint abs_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_abs_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPArrayConstraint and_constraint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_and_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPArrayConstraint or_constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_or_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPArrayWithConstantConstraint min_constraint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.MPArrayWithConstantConstraint max_constraint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPGeneralConstraintProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPGeneralConstraintProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPGeneralConstraintProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  switch (general_constraint_case()) {
    case kIndicatorConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::indicator_constraint(this),
          _Internal::indicator_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kSosConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sos_constraint(this),
          _Internal::sos_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuadraticConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::quadratic_constraint(this),
          _Internal::quadratic_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kAbsConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::abs_constraint(this),
          _Internal::abs_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::and_constraint(this),
          _Internal::and_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kOrConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::or_constraint(this),
          _Internal::or_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kMinConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::min_constraint(this),
          _Internal::min_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaxConstraint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::max_constraint(this),
          _Internal::max_constraint(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPGeneralConstraintProto)
  return target;
}

size_t MPGeneralConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPGeneralConstraintProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1 [default = ""];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (general_constraint_case()) {
    // .operations_research.MPIndicatorConstraint indicator_constraint = 2;
    case kIndicatorConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.indicator_constraint_);
      break;
    }
    // .operations_research.MPSosConstraint sos_constraint = 3;
    case kSosConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.sos_constraint_);
      break;
    }
    // .operations_research.MPQuadraticConstraint quadratic_constraint = 4;
    case kQuadraticConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.quadratic_constraint_);
      break;
    }
    // .operations_research.MPAbsConstraint abs_constraint = 5;
    case kAbsConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.abs_constraint_);
      break;
    }
    // .operations_research.MPArrayConstraint and_constraint = 6;
    case kAndConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.and_constraint_);
      break;
    }
    // .operations_research.MPArrayConstraint or_constraint = 7;
    case kOrConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.or_constraint_);
      break;
    }
    // .operations_research.MPArrayWithConstantConstraint min_constraint = 8;
    case kMinConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.min_constraint_);
      break;
    }
    // .operations_research.MPArrayWithConstantConstraint max_constraint = 9;
    case kMaxConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.general_constraint_.max_constraint_);
      break;
    }
    case GENERAL_CONSTRAINT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPGeneralConstraintProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPGeneralConstraintProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPGeneralConstraintProto::GetClassData() const { return &_class_data_; }


void MPGeneralConstraintProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPGeneralConstraintProto*>(&to_msg);
  auto& from = static_cast<const MPGeneralConstraintProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPGeneralConstraintProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.general_constraint_case()) {
    case kIndicatorConstraint: {
      _this->_internal_mutable_indicator_constraint()->::operations_research::MPIndicatorConstraint::MergeFrom(
          from._internal_indicator_constraint());
      break;
    }
    case kSosConstraint: {
      _this->_internal_mutable_sos_constraint()->::operations_research::MPSosConstraint::MergeFrom(
          from._internal_sos_constraint());
      break;
    }
    case kQuadraticConstraint: {
      _this->_internal_mutable_quadratic_constraint()->::operations_research::MPQuadraticConstraint::MergeFrom(
          from._internal_quadratic_constraint());
      break;
    }
    case kAbsConstraint: {
      _this->_internal_mutable_abs_constraint()->::operations_research::MPAbsConstraint::MergeFrom(
          from._internal_abs_constraint());
      break;
    }
    case kAndConstraint: {
      _this->_internal_mutable_and_constraint()->::operations_research::MPArrayConstraint::MergeFrom(
          from._internal_and_constraint());
      break;
    }
    case kOrConstraint: {
      _this->_internal_mutable_or_constraint()->::operations_research::MPArrayConstraint::MergeFrom(
          from._internal_or_constraint());
      break;
    }
    case kMinConstraint: {
      _this->_internal_mutable_min_constraint()->::operations_research::MPArrayWithConstantConstraint::MergeFrom(
          from._internal_min_constraint());
      break;
    }
    case kMaxConstraint: {
      _this->_internal_mutable_max_constraint()->::operations_research::MPArrayWithConstantConstraint::MergeFrom(
          from._internal_max_constraint());
      break;
    }
    case GENERAL_CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPGeneralConstraintProto::CopyFrom(const MPGeneralConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPGeneralConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPGeneralConstraintProto::IsInitialized() const {
  return true;
}

void MPGeneralConstraintProto::InternalSwap(MPGeneralConstraintProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.general_constraint_, other->_impl_.general_constraint_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPGeneralConstraintProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[2]);
}

// ===================================================================

class MPIndicatorConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPIndicatorConstraint>()._impl_._has_bits_);
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::operations_research::MPConstraintProto& constraint(const MPIndicatorConstraint* msg);
  static void set_has_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::operations_research::MPConstraintProto&
MPIndicatorConstraint::_Internal::constraint(const MPIndicatorConstraint* msg) {
  return *msg->_impl_.constraint_;
}
MPIndicatorConstraint::MPIndicatorConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPIndicatorConstraint)
}
MPIndicatorConstraint::MPIndicatorConstraint(const MPIndicatorConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPIndicatorConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.var_index_){}
    , decltype(_impl_.var_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraint()) {
    _this->_impl_.constraint_ = new ::operations_research::MPConstraintProto(*from._impl_.constraint_);
  }
  ::memcpy(&_impl_.var_index_, &from._impl_.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_value_) -
    reinterpret_cast<char*>(&_impl_.var_index_)) + sizeof(_impl_.var_value_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPIndicatorConstraint)
}

inline void MPIndicatorConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.var_index_){0}
    , decltype(_impl_.var_value_){0}
  };
}

MPIndicatorConstraint::~MPIndicatorConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPIndicatorConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPIndicatorConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.constraint_;
}

void MPIndicatorConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPIndicatorConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPIndicatorConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.constraint_ != nullptr);
    _impl_.constraint_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.var_value_) -
        reinterpret_cast<char*>(&_impl_.var_index_)) + sizeof(_impl_.var_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPIndicatorConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 var_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_var_index(&has_bits);
          _impl_.var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 var_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_var_value(&has_bits);
          _impl_.var_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPConstraintProto constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPIndicatorConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPIndicatorConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 var_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_index(), target);
  }

  // optional int32 var_value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_value(), target);
  }

  // optional .operations_research.MPConstraintProto constraint = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::constraint(this),
        _Internal::constraint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPIndicatorConstraint)
  return target;
}

size_t MPIndicatorConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPIndicatorConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .operations_research.MPConstraintProto constraint = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.constraint_);
    }

    // optional int32 var_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_index());
    }

    // optional int32 var_value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPIndicatorConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPIndicatorConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPIndicatorConstraint::GetClassData() const { return &_class_data_; }


void MPIndicatorConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPIndicatorConstraint*>(&to_msg);
  auto& from = static_cast<const MPIndicatorConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPIndicatorConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_constraint()->::operations_research::MPConstraintProto::MergeFrom(
          from._internal_constraint());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.var_index_ = from._impl_.var_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.var_value_ = from._impl_.var_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPIndicatorConstraint::CopyFrom(const MPIndicatorConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPIndicatorConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPIndicatorConstraint::IsInitialized() const {
  return true;
}

void MPIndicatorConstraint::InternalSwap(MPIndicatorConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPIndicatorConstraint, _impl_.var_value_)
      + sizeof(MPIndicatorConstraint::_impl_.var_value_)
      - PROTOBUF_FIELD_OFFSET(MPIndicatorConstraint, _impl_.constraint_)>(
          reinterpret_cast<char*>(&_impl_.constraint_),
          reinterpret_cast<char*>(&other->_impl_.constraint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPIndicatorConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[3]);
}

// ===================================================================

class MPSosConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPSosConstraint>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MPSosConstraint::MPSosConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPSosConstraint)
}
MPSosConstraint::MPSosConstraint(const MPSosConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPSosConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){from._impl_.var_index_}
    , decltype(_impl_.weight_){from._impl_.weight_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:operations_research.MPSosConstraint)
}

inline void MPSosConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){arena}
    , decltype(_impl_.weight_){arena}
    , decltype(_impl_.type_){0}
  };
}

MPSosConstraint::~MPSosConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPSosConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPSosConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
  _impl_.weight_.~RepeatedField();
}

void MPSosConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPSosConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPSosConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  _impl_.weight_.Clear();
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPSosConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.MPSosConstraint.Type type = 1 [default = SOS1_DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::MPSosConstraint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::operations_research::MPSosConstraint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 var_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_weight(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPSosConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPSosConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.MPSosConstraint.Type type = 1 [default = SOS1_DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated int32 var_index = 2;
  for (int i = 0, n = this->_internal_var_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_index(i), target);
  }

  // repeated double weight = 3;
  for (int i = 0, n = this->_internal_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPSosConstraint)
  return target;
}

size_t MPSosConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPSosConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_var_index_size());
    total_size += data_size;
  }

  // repeated double weight = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_weight_size());
    total_size += data_size;
  }

  // optional .operations_research.MPSosConstraint.Type type = 1 [default = SOS1_DEFAULT];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPSosConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPSosConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPSosConstraint::GetClassData() const { return &_class_data_; }


void MPSosConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPSosConstraint*>(&to_msg);
  auto& from = static_cast<const MPSosConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPSosConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  _this->_impl_.weight_.MergeFrom(from._impl_.weight_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPSosConstraint::CopyFrom(const MPSosConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPSosConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSosConstraint::IsInitialized() const {
  return true;
}

void MPSosConstraint::InternalSwap(MPSosConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  _impl_.weight_.InternalSwap(&other->_impl_.weight_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPSosConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[4]);
}

// ===================================================================

class MPQuadraticConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPQuadraticConstraint>()._impl_._has_bits_);
  static void set_has_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPQuadraticConstraint::MPQuadraticConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPQuadraticConstraint)
}
MPQuadraticConstraint::MPQuadraticConstraint(const MPQuadraticConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPQuadraticConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){from._impl_.var_index_}
    , decltype(_impl_.coefficient_){from._impl_.coefficient_}
    , decltype(_impl_.qvar1_index_){from._impl_.qvar1_index_}
    , decltype(_impl_.qvar2_index_){from._impl_.qvar2_index_}
    , decltype(_impl_.qcoefficient_){from._impl_.qcoefficient_}
    , decltype(_impl_.lower_bound_){}
    , decltype(_impl_.upper_bound_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lower_bound_, &from._impl_.lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upper_bound_) -
    reinterpret_cast<char*>(&_impl_.lower_bound_)) + sizeof(_impl_.upper_bound_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPQuadraticConstraint)
}

inline void MPQuadraticConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){arena}
    , decltype(_impl_.coefficient_){arena}
    , decltype(_impl_.qvar1_index_){arena}
    , decltype(_impl_.qvar2_index_){arena}
    , decltype(_impl_.qcoefficient_){arena}
    , decltype(_impl_.lower_bound_){-std::numeric_limits<double>::infinity()}
    , decltype(_impl_.upper_bound_){std::numeric_limits<double>::infinity()}
  };
}

MPQuadraticConstraint::~MPQuadraticConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPQuadraticConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPQuadraticConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
  _impl_.coefficient_.~RepeatedField();
  _impl_.qvar1_index_.~RepeatedField();
  _impl_.qvar2_index_.~RepeatedField();
  _impl_.qcoefficient_.~RepeatedField();
}

void MPQuadraticConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPQuadraticConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPQuadraticConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  _impl_.coefficient_.Clear();
  _impl_.qvar1_index_.Clear();
  _impl_.qvar2_index_.Clear();
  _impl_.qcoefficient_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.lower_bound_ = -std::numeric_limits<double>::infinity();
    _impl_.upper_bound_ = std::numeric_limits<double>::infinity();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPQuadraticConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 var_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double coefficient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficient(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficient(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 qvar1_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qvar1_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_qvar1_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 qvar2_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qvar2_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_qvar2_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double qcoefficient = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qcoefficient(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_qcoefficient(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lower_bound = 6 [default = -inf];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_lower_bound(&has_bits);
          _impl_.lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double upper_bound = 7 [default = inf];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_upper_bound(&has_bits);
          _impl_.upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPQuadraticConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPQuadraticConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  for (int i = 0, n = this->_internal_var_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_index(i), target);
  }

  // repeated double coefficient = 2;
  for (int i = 0, n = this->_internal_coefficient_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_coefficient(i), target);
  }

  // repeated int32 qvar1_index = 3;
  for (int i = 0, n = this->_internal_qvar1_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_qvar1_index(i), target);
  }

  // repeated int32 qvar2_index = 4;
  for (int i = 0, n = this->_internal_qvar2_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_qvar2_index(i), target);
  }

  // repeated double qcoefficient = 5;
  for (int i = 0, n = this->_internal_qcoefficient_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_qcoefficient(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lower_bound = 6 [default = -inf];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_lower_bound(), target);
  }

  // optional double upper_bound = 7 [default = inf];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_upper_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPQuadraticConstraint)
  return target;
}

size_t MPQuadraticConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPQuadraticConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_var_index_size());
    total_size += data_size;
  }

  // repeated double coefficient = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficient_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_coefficient_size());
    total_size += data_size;
  }

  // repeated int32 qvar1_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.qvar1_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_qvar1_index_size());
    total_size += data_size;
  }

  // repeated int32 qvar2_index = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.qvar2_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_qvar2_index_size());
    total_size += data_size;
  }

  // repeated double qcoefficient = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_qcoefficient_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_qcoefficient_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double lower_bound = 6 [default = -inf];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double upper_bound = 7 [default = inf];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPQuadraticConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPQuadraticConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPQuadraticConstraint::GetClassData() const { return &_class_data_; }


void MPQuadraticConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPQuadraticConstraint*>(&to_msg);
  auto& from = static_cast<const MPQuadraticConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPQuadraticConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  _this->_impl_.coefficient_.MergeFrom(from._impl_.coefficient_);
  _this->_impl_.qvar1_index_.MergeFrom(from._impl_.qvar1_index_);
  _this->_impl_.qvar2_index_.MergeFrom(from._impl_.qvar2_index_);
  _this->_impl_.qcoefficient_.MergeFrom(from._impl_.qcoefficient_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lower_bound_ = from._impl_.lower_bound_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.upper_bound_ = from._impl_.upper_bound_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPQuadraticConstraint::CopyFrom(const MPQuadraticConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPQuadraticConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPQuadraticConstraint::IsInitialized() const {
  return true;
}

void MPQuadraticConstraint::InternalSwap(MPQuadraticConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  _impl_.coefficient_.InternalSwap(&other->_impl_.coefficient_);
  _impl_.qvar1_index_.InternalSwap(&other->_impl_.qvar1_index_);
  _impl_.qvar2_index_.InternalSwap(&other->_impl_.qvar2_index_);
  _impl_.qcoefficient_.InternalSwap(&other->_impl_.qcoefficient_);
  swap(_impl_.lower_bound_, other->_impl_.lower_bound_);
  swap(_impl_.upper_bound_, other->_impl_.upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPQuadraticConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[5]);
}

// ===================================================================

class MPAbsConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPAbsConstraint>()._impl_._has_bits_);
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resultant_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPAbsConstraint::MPAbsConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPAbsConstraint)
}
MPAbsConstraint::MPAbsConstraint(const MPAbsConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPAbsConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){}
    , decltype(_impl_.resultant_var_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.var_index_, &from._impl_.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resultant_var_index_) -
    reinterpret_cast<char*>(&_impl_.var_index_)) + sizeof(_impl_.resultant_var_index_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPAbsConstraint)
}

inline void MPAbsConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){0}
    , decltype(_impl_.resultant_var_index_){0}
  };
}

MPAbsConstraint::~MPAbsConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPAbsConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPAbsConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MPAbsConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPAbsConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPAbsConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resultant_var_index_) -
        reinterpret_cast<char*>(&_impl_.var_index_)) + sizeof(_impl_.resultant_var_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPAbsConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 var_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_var_index(&has_bits);
          _impl_.var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resultant_var_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_resultant_var_index(&has_bits);
          _impl_.resultant_var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPAbsConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPAbsConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 var_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_index(), target);
  }

  // optional int32 resultant_var_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_resultant_var_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPAbsConstraint)
  return target;
}

size_t MPAbsConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPAbsConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 var_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_index());
    }

    // optional int32 resultant_var_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resultant_var_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPAbsConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPAbsConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPAbsConstraint::GetClassData() const { return &_class_data_; }


void MPAbsConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPAbsConstraint*>(&to_msg);
  auto& from = static_cast<const MPAbsConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPAbsConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.var_index_ = from._impl_.var_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resultant_var_index_ = from._impl_.resultant_var_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPAbsConstraint::CopyFrom(const MPAbsConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPAbsConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPAbsConstraint::IsInitialized() const {
  return true;
}

void MPAbsConstraint::InternalSwap(MPAbsConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPAbsConstraint, _impl_.resultant_var_index_)
      + sizeof(MPAbsConstraint::_impl_.resultant_var_index_)
      - PROTOBUF_FIELD_OFFSET(MPAbsConstraint, _impl_.var_index_)>(
          reinterpret_cast<char*>(&_impl_.var_index_),
          reinterpret_cast<char*>(&other->_impl_.var_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPAbsConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[6]);
}

// ===================================================================

class MPArrayConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPArrayConstraint>()._impl_._has_bits_);
  static void set_has_resultant_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MPArrayConstraint::MPArrayConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPArrayConstraint)
}
MPArrayConstraint::MPArrayConstraint(const MPArrayConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPArrayConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){from._impl_.var_index_}
    , decltype(_impl_.resultant_var_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.resultant_var_index_ = from._impl_.resultant_var_index_;
  // @@protoc_insertion_point(copy_constructor:operations_research.MPArrayConstraint)
}

inline void MPArrayConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){arena}
    , decltype(_impl_.resultant_var_index_){0}
  };
}

MPArrayConstraint::~MPArrayConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPArrayConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPArrayConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
}

void MPArrayConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPArrayConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPArrayConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  _impl_.resultant_var_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPArrayConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 var_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resultant_var_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_resultant_var_index(&has_bits);
          _impl_.resultant_var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPArrayConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPArrayConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  for (int i = 0, n = this->_internal_var_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_index(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 resultant_var_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_resultant_var_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPArrayConstraint)
  return target;
}

size_t MPArrayConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPArrayConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_var_index_size());
    total_size += data_size;
  }

  // optional int32 resultant_var_index = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resultant_var_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPArrayConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPArrayConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPArrayConstraint::GetClassData() const { return &_class_data_; }


void MPArrayConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPArrayConstraint*>(&to_msg);
  auto& from = static_cast<const MPArrayConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPArrayConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  if (from._internal_has_resultant_var_index()) {
    _this->_internal_set_resultant_var_index(from._internal_resultant_var_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPArrayConstraint::CopyFrom(const MPArrayConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPArrayConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPArrayConstraint::IsInitialized() const {
  return true;
}

void MPArrayConstraint::InternalSwap(MPArrayConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  swap(_impl_.resultant_var_index_, other->_impl_.resultant_var_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPArrayConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[7]);
}

// ===================================================================

class MPArrayWithConstantConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<MPArrayWithConstantConstraint>()._impl_._has_bits_);
  static void set_has_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resultant_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPArrayWithConstantConstraint::MPArrayWithConstantConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPArrayWithConstantConstraint)
}
MPArrayWithConstantConstraint::MPArrayWithConstantConstraint(const MPArrayWithConstantConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPArrayWithConstantConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){from._impl_.var_index_}
    , decltype(_impl_.constant_){}
    , decltype(_impl_.resultant_var_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.constant_, &from._impl_.constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resultant_var_index_) -
    reinterpret_cast<char*>(&_impl_.constant_)) + sizeof(_impl_.resultant_var_index_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPArrayWithConstantConstraint)
}

inline void MPArrayWithConstantConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.var_index_){arena}
    , decltype(_impl_.constant_){0}
    , decltype(_impl_.resultant_var_index_){0}
  };
}

MPArrayWithConstantConstraint::~MPArrayWithConstantConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.MPArrayWithConstantConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPArrayWithConstantConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
}

void MPArrayWithConstantConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPArrayWithConstantConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPArrayWithConstantConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.constant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resultant_var_index_) -
        reinterpret_cast<char*>(&_impl_.constant_)) + sizeof(_impl_.resultant_var_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPArrayWithConstantConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 var_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_constant(&has_bits);
          _impl_.constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resultant_var_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_resultant_var_index(&has_bits);
          _impl_.resultant_var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPArrayWithConstantConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPArrayWithConstantConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  for (int i = 0, n = this->_internal_var_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_index(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double constant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_constant(), target);
  }

  // optional int32 resultant_var_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_resultant_var_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPArrayWithConstantConstraint)
  return target;
}

size_t MPArrayWithConstantConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPArrayWithConstantConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_var_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double constant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 resultant_var_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resultant_var_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPArrayWithConstantConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPArrayWithConstantConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPArrayWithConstantConstraint::GetClassData() const { return &_class_data_; }


void MPArrayWithConstantConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPArrayWithConstantConstraint*>(&to_msg);
  auto& from = static_cast<const MPArrayWithConstantConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPArrayWithConstantConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.constant_ = from._impl_.constant_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resultant_var_index_ = from._impl_.resultant_var_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPArrayWithConstantConstraint::CopyFrom(const MPArrayWithConstantConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPArrayWithConstantConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPArrayWithConstantConstraint::IsInitialized() const {
  return true;
}

void MPArrayWithConstantConstraint::InternalSwap(MPArrayWithConstantConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPArrayWithConstantConstraint, _impl_.resultant_var_index_)
      + sizeof(MPArrayWithConstantConstraint::_impl_.resultant_var_index_)
      - PROTOBUF_FIELD_OFFSET(MPArrayWithConstantConstraint, _impl_.constant_)>(
          reinterpret_cast<char*>(&_impl_.constant_),
          reinterpret_cast<char*>(&other->_impl_.constant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPArrayWithConstantConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[8]);
}

// ===================================================================

class MPQuadraticObjective::_Internal {
 public:
};

MPQuadraticObjective::MPQuadraticObjective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPQuadraticObjective)
}
MPQuadraticObjective::MPQuadraticObjective(const MPQuadraticObjective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPQuadraticObjective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qvar1_index_){from._impl_.qvar1_index_}
    , decltype(_impl_.qvar2_index_){from._impl_.qvar2_index_}
    , decltype(_impl_.coefficient_){from._impl_.coefficient_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.MPQuadraticObjective)
}

inline void MPQuadraticObjective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qvar1_index_){arena}
    , decltype(_impl_.qvar2_index_){arena}
    , decltype(_impl_.coefficient_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MPQuadraticObjective::~MPQuadraticObjective() {
  // @@protoc_insertion_point(destructor:operations_research.MPQuadraticObjective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPQuadraticObjective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qvar1_index_.~RepeatedField();
  _impl_.qvar2_index_.~RepeatedField();
  _impl_.coefficient_.~RepeatedField();
}

void MPQuadraticObjective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPQuadraticObjective::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPQuadraticObjective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qvar1_index_.Clear();
  _impl_.qvar2_index_.Clear();
  _impl_.coefficient_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPQuadraticObjective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 qvar1_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qvar1_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_qvar1_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 qvar2_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qvar2_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_qvar2_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double coefficient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficient(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficient(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPQuadraticObjective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPQuadraticObjective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 qvar1_index = 1;
  for (int i = 0, n = this->_internal_qvar1_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_qvar1_index(i), target);
  }

  // repeated int32 qvar2_index = 2;
  for (int i = 0, n = this->_internal_qvar2_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_qvar2_index(i), target);
  }

  // repeated double coefficient = 3;
  for (int i = 0, n = this->_internal_coefficient_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_coefficient(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPQuadraticObjective)
  return target;
}

size_t MPQuadraticObjective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPQuadraticObjective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 qvar1_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.qvar1_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_qvar1_index_size());
    total_size += data_size;
  }

  // repeated int32 qvar2_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.qvar2_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_qvar2_index_size());
    total_size += data_size;
  }

  // repeated double coefficient = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficient_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_coefficient_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPQuadraticObjective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPQuadraticObjective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPQuadraticObjective::GetClassData() const { return &_class_data_; }


void MPQuadraticObjective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPQuadraticObjective*>(&to_msg);
  auto& from = static_cast<const MPQuadraticObjective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPQuadraticObjective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qvar1_index_.MergeFrom(from._impl_.qvar1_index_);
  _this->_impl_.qvar2_index_.MergeFrom(from._impl_.qvar2_index_);
  _this->_impl_.coefficient_.MergeFrom(from._impl_.coefficient_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPQuadraticObjective::CopyFrom(const MPQuadraticObjective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPQuadraticObjective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPQuadraticObjective::IsInitialized() const {
  return true;
}

void MPQuadraticObjective::InternalSwap(MPQuadraticObjective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qvar1_index_.InternalSwap(&other->_impl_.qvar1_index_);
  _impl_.qvar2_index_.InternalSwap(&other->_impl_.qvar2_index_);
  _impl_.coefficient_.InternalSwap(&other->_impl_.coefficient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPQuadraticObjective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[9]);
}

// ===================================================================

class PartialVariableAssignment::_Internal {
 public:
};

PartialVariableAssignment::PartialVariableAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.PartialVariableAssignment)
}
PartialVariableAssignment::PartialVariableAssignment(const PartialVariableAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartialVariableAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_index_){from._impl_.var_index_}
    , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
    , decltype(_impl_.var_value_){from._impl_.var_value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.PartialVariableAssignment)
}

inline void PartialVariableAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_index_){arena}
    , /*decltype(_impl_._var_index_cached_byte_size_)*/{0}
    , decltype(_impl_.var_value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartialVariableAssignment::~PartialVariableAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.PartialVariableAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialVariableAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_index_.~RepeatedField();
  _impl_.var_value_.~RepeatedField();
}

void PartialVariableAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartialVariableAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.PartialVariableAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_index_.Clear();
  _impl_.var_value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialVariableAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 var_index = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_var_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_var_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double var_value = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_var_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_var_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialVariableAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.PartialVariableAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 var_index = 1 [packed = true];
  {
    int byte_size = _impl_._var_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_var_index(), byte_size, target);
    }
  }

  // repeated double var_value = 2 [packed = true];
  if (this->_internal_var_value_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_var_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.PartialVariableAssignment)
  return target;
}

size_t PartialVariableAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.PartialVariableAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 var_index = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.var_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._var_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double var_value = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialVariableAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartialVariableAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialVariableAssignment::GetClassData() const { return &_class_data_; }


void PartialVariableAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartialVariableAssignment*>(&to_msg);
  auto& from = static_cast<const PartialVariableAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.PartialVariableAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_index_.MergeFrom(from._impl_.var_index_);
  _this->_impl_.var_value_.MergeFrom(from._impl_.var_value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialVariableAssignment::CopyFrom(const PartialVariableAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.PartialVariableAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialVariableAssignment::IsInitialized() const {
  return true;
}

void PartialVariableAssignment::InternalSwap(PartialVariableAssignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.var_index_.InternalSwap(&other->_impl_.var_index_);
  _impl_.var_value_.InternalSwap(&other->_impl_.var_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialVariableAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[10]);
}

// ===================================================================

class MPModelProto_Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<MPModelProto_Annotation>()._impl_._has_bits_);
  static void set_has_target_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MPModelProto_Annotation::MPModelProto_Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPModelProto.Annotation)
}
MPModelProto_Annotation::MPModelProto_Annotation(const MPModelProto_Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPModelProto_Annotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.payload_key_){}
    , decltype(_impl_.payload_value_){}
    , decltype(_impl_.target_type_){}
    , decltype(_impl_.target_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_name()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload_key()) {
    _this->_impl_.payload_key_.Set(from._internal_payload_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload_value()) {
    _this->_impl_.payload_value_.Set(from._internal_payload_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_type_, &from._impl_.target_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_index_) -
    reinterpret_cast<char*>(&_impl_.target_type_)) + sizeof(_impl_.target_index_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPModelProto.Annotation)
}

inline void MPModelProto_Annotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.payload_key_){}
    , decltype(_impl_.payload_value_){}
    , decltype(_impl_.target_type_){0}
    , decltype(_impl_.target_index_){0}
  };
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPModelProto_Annotation::~MPModelProto_Annotation() {
  // @@protoc_insertion_point(destructor:operations_research.MPModelProto.Annotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPModelProto_Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_name_.Destroy();
  _impl_.payload_key_.Destroy();
  _impl_.payload_value_.Destroy();
}

void MPModelProto_Annotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPModelProto_Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPModelProto.Annotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.payload_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.target_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_index_) -
        reinterpret_cast<char*>(&_impl_.target_type_)) + sizeof(_impl_.target_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPModelProto_Annotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.MPModelProto.Annotation.TargetType target_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::MPModelProto_Annotation_TargetType_IsValid(val))) {
            _internal_set_target_type(static_cast<::operations_research::MPModelProto_Annotation_TargetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_index(&has_bits);
          _impl_.target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string target_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelProto.Annotation.target_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string payload_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelProto.Annotation.payload_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string payload_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_payload_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelProto.Annotation.payload_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPModelProto_Annotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPModelProto.Annotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.MPModelProto.Annotation.TargetType target_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_target_type(), target);
  }

  // optional int32 target_index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_index(), target);
  }

  // optional string target_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_name().data(), static_cast<int>(this->_internal_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelProto.Annotation.target_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_name(), target);
  }

  // optional string payload_key = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload_key().data(), static_cast<int>(this->_internal_payload_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelProto.Annotation.payload_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_key(), target);
  }

  // optional string payload_value = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload_value().data(), static_cast<int>(this->_internal_payload_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelProto.Annotation.payload_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payload_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPModelProto.Annotation)
  return target;
}

size_t MPModelProto_Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPModelProto.Annotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string target_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_name());
    }

    // optional string payload_key = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload_key());
    }

    // optional string payload_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload_value());
    }

    // optional .operations_research.MPModelProto.Annotation.TargetType target_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_target_type());
    }

    // optional int32 target_index = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPModelProto_Annotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPModelProto_Annotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPModelProto_Annotation::GetClassData() const { return &_class_data_; }


void MPModelProto_Annotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPModelProto_Annotation*>(&to_msg);
  auto& from = static_cast<const MPModelProto_Annotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPModelProto.Annotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target_name(from._internal_target_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_payload_key(from._internal_payload_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload_value(from._internal_payload_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_type_ = from._impl_.target_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.target_index_ = from._impl_.target_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPModelProto_Annotation::CopyFrom(const MPModelProto_Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPModelProto.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelProto_Annotation::IsInitialized() const {
  return true;
}

void MPModelProto_Annotation::InternalSwap(MPModelProto_Annotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_key_, lhs_arena,
      &other->_impl_.payload_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_value_, lhs_arena,
      &other->_impl_.payload_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPModelProto_Annotation, _impl_.target_index_)
      + sizeof(MPModelProto_Annotation::_impl_.target_index_)
      - PROTOBUF_FIELD_OFFSET(MPModelProto_Annotation, _impl_.target_type_)>(
          reinterpret_cast<char*>(&_impl_.target_type_),
          reinterpret_cast<char*>(&other->_impl_.target_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPModelProto_Annotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[11]);
}

// ===================================================================

class MPModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MPModelProto>()._impl_._has_bits_);
  static void set_has_maximize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objective_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::operations_research::MPQuadraticObjective& quadratic_objective(const MPModelProto* msg);
  static void set_has_quadratic_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::PartialVariableAssignment& solution_hint(const MPModelProto* msg);
  static void set_has_solution_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::operations_research::MPQuadraticObjective&
MPModelProto::_Internal::quadratic_objective(const MPModelProto* msg) {
  return *msg->_impl_.quadratic_objective_;
}
const ::operations_research::PartialVariableAssignment&
MPModelProto::_Internal::solution_hint(const MPModelProto* msg) {
  return *msg->_impl_.solution_hint_;
}
MPModelProto::MPModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPModelProto)
}
MPModelProto::MPModelProto(const MPModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPModelProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_){from._impl_.variable_}
    , decltype(_impl_.constraint_){from._impl_.constraint_}
    , decltype(_impl_.general_constraint_){from._impl_.general_constraint_}
    , decltype(_impl_.annotation_){from._impl_.annotation_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.solution_hint_){nullptr}
    , decltype(_impl_.quadratic_objective_){nullptr}
    , decltype(_impl_.objective_offset_){}
    , decltype(_impl_.maximize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_solution_hint()) {
    _this->_impl_.solution_hint_ = new ::operations_research::PartialVariableAssignment(*from._impl_.solution_hint_);
  }
  if (from._internal_has_quadratic_objective()) {
    _this->_impl_.quadratic_objective_ = new ::operations_research::MPQuadraticObjective(*from._impl_.quadratic_objective_);
  }
  ::memcpy(&_impl_.objective_offset_, &from._impl_.objective_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maximize_) -
    reinterpret_cast<char*>(&_impl_.objective_offset_)) + sizeof(_impl_.maximize_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPModelProto)
}

inline void MPModelProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_){arena}
    , decltype(_impl_.constraint_){arena}
    , decltype(_impl_.general_constraint_){arena}
    , decltype(_impl_.annotation_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.solution_hint_){nullptr}
    , decltype(_impl_.quadratic_objective_){nullptr}
    , decltype(_impl_.objective_offset_){0}
    , decltype(_impl_.maximize_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPModelProto::~MPModelProto() {
  // @@protoc_insertion_point(destructor:operations_research.MPModelProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_.~RepeatedPtrField();
  _impl_.constraint_.~RepeatedPtrField();
  _impl_.general_constraint_.~RepeatedPtrField();
  _impl_.annotation_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.solution_hint_;
  if (this != internal_default_instance()) delete _impl_.quadratic_objective_;
}

void MPModelProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_.Clear();
  _impl_.constraint_.Clear();
  _impl_.general_constraint_.Clear();
  _impl_.annotation_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.solution_hint_ != nullptr);
      _impl_.solution_hint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.quadratic_objective_ != nullptr);
      _impl_.quadratic_objective_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.objective_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.maximize_) -
        reinterpret_cast<char*>(&_impl_.objective_offset_)) + sizeof(_impl_.maximize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPModelProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool maximize = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_maximize(&has_bits);
          _impl_.maximize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_offset = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_objective_offset(&has_bits);
          _impl_.objective_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.MPVariableProto variable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.MPConstraintProto constraint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.PartialVariableAssignment solution_hint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_solution_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.MPGeneralConstraintProto general_constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_general_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPQuadraticObjective quadratic_objective = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadratic_objective(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.MPModelProto.Annotation annotation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool maximize = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_maximize(), target);
  }

  // optional double objective_offset = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_objective_offset(), target);
  }

  // repeated .operations_research.MPVariableProto variable = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variable_size()); i < n; i++) {
    const auto& repfield = this->_internal_variable(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.MPConstraintProto constraint = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string name = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelProto.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional .operations_research.PartialVariableAssignment solution_hint = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::solution_hint(this),
        _Internal::solution_hint(this).GetCachedSize(), target, stream);
  }

  // repeated .operations_research.MPGeneralConstraintProto general_constraint = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_general_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_general_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .operations_research.MPQuadraticObjective quadratic_objective = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::quadratic_objective(this),
        _Internal::quadratic_objective(this).GetCachedSize(), target, stream);
  }

  // repeated .operations_research.MPModelProto.Annotation annotation = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPModelProto)
  return target;
}

size_t MPModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.MPVariableProto variable = 3;
  total_size += 1UL * this->_internal_variable_size();
  for (const auto& msg : this->_impl_.variable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.MPConstraintProto constraint = 4;
  total_size += 1UL * this->_internal_constraint_size();
  for (const auto& msg : this->_impl_.constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.MPGeneralConstraintProto general_constraint = 7;
  total_size += 1UL * this->_internal_general_constraint_size();
  for (const auto& msg : this->_impl_.general_constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.MPModelProto.Annotation annotation = 9;
  total_size += 1UL * this->_internal_annotation_size();
  for (const auto& msg : this->_impl_.annotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 5 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .operations_research.PartialVariableAssignment solution_hint = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.solution_hint_);
    }

    // optional .operations_research.MPQuadraticObjective quadratic_objective = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quadratic_objective_);
    }

    // optional double objective_offset = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool maximize = 1 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPModelProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPModelProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPModelProto::GetClassData() const { return &_class_data_; }


void MPModelProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPModelProto*>(&to_msg);
  auto& from = static_cast<const MPModelProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPModelProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variable_.MergeFrom(from._impl_.variable_);
  _this->_impl_.constraint_.MergeFrom(from._impl_.constraint_);
  _this->_impl_.general_constraint_.MergeFrom(from._impl_.general_constraint_);
  _this->_impl_.annotation_.MergeFrom(from._impl_.annotation_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_solution_hint()->::operations_research::PartialVariableAssignment::MergeFrom(
          from._internal_solution_hint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_quadratic_objective()->::operations_research::MPQuadraticObjective::MergeFrom(
          from._internal_quadratic_objective());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.objective_offset_ = from._impl_.objective_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.maximize_ = from._impl_.maximize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPModelProto::CopyFrom(const MPModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelProto::IsInitialized() const {
  return true;
}

void MPModelProto::InternalSwap(MPModelProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.variable_.InternalSwap(&other->_impl_.variable_);
  _impl_.constraint_.InternalSwap(&other->_impl_.constraint_);
  _impl_.general_constraint_.InternalSwap(&other->_impl_.general_constraint_);
  _impl_.annotation_.InternalSwap(&other->_impl_.annotation_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPModelProto, _impl_.maximize_)
      + sizeof(MPModelProto::_impl_.maximize_)
      - PROTOBUF_FIELD_OFFSET(MPModelProto, _impl_.solution_hint_)>(
          reinterpret_cast<char*>(&_impl_.solution_hint_),
          reinterpret_cast<char*>(&other->_impl_.solution_hint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPModelProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[12]);
}

// ===================================================================

class OptionalDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalDouble>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalDouble::OptionalDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.OptionalDouble)
}
OptionalDouble::OptionalDouble(const OptionalDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionalDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:operations_research.OptionalDouble)
}

inline void OptionalDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){0}
  };
}

OptionalDouble::~OptionalDouble() {
  // @@protoc_insertion_point(destructor:operations_research.OptionalDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionalDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionalDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.OptionalDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.OptionalDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.OptionalDouble)
  return target;
}

size_t OptionalDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.OptionalDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionalDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalDouble::GetClassData() const { return &_class_data_; }


void OptionalDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionalDouble*>(&to_msg);
  auto& from = static_cast<const OptionalDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.OptionalDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalDouble::CopyFrom(const OptionalDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.OptionalDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalDouble::IsInitialized() const {
  return true;
}

void OptionalDouble::InternalSwap(OptionalDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[13]);
}

// ===================================================================

class MPSolverCommonParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<MPSolverCommonParameters>()._impl_._has_bits_);
  static const ::operations_research::OptionalDouble& relative_mip_gap(const MPSolverCommonParameters* msg);
  static void set_has_relative_mip_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::OptionalDouble& primal_tolerance(const MPSolverCommonParameters* msg);
  static void set_has_primal_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::OptionalDouble& dual_tolerance(const MPSolverCommonParameters* msg);
  static void set_has_dual_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lp_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_presolve(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::operations_research::OptionalDouble&
MPSolverCommonParameters::_Internal::relative_mip_gap(const MPSolverCommonParameters* msg) {
  return *msg->_impl_.relative_mip_gap_;
}
const ::operations_research::OptionalDouble&
MPSolverCommonParameters::_Internal::primal_tolerance(const MPSolverCommonParameters* msg) {
  return *msg->_impl_.primal_tolerance_;
}
const ::operations_research::OptionalDouble&
MPSolverCommonParameters::_Internal::dual_tolerance(const MPSolverCommonParameters* msg) {
  return *msg->_impl_.dual_tolerance_;
}
MPSolverCommonParameters::MPSolverCommonParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPSolverCommonParameters)
}
MPSolverCommonParameters::MPSolverCommonParameters(const MPSolverCommonParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPSolverCommonParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_mip_gap_){nullptr}
    , decltype(_impl_.primal_tolerance_){nullptr}
    , decltype(_impl_.dual_tolerance_){nullptr}
    , decltype(_impl_.lp_algorithm_){}
    , decltype(_impl_.presolve_){}
    , decltype(_impl_.scaling_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relative_mip_gap()) {
    _this->_impl_.relative_mip_gap_ = new ::operations_research::OptionalDouble(*from._impl_.relative_mip_gap_);
  }
  if (from._internal_has_primal_tolerance()) {
    _this->_impl_.primal_tolerance_ = new ::operations_research::OptionalDouble(*from._impl_.primal_tolerance_);
  }
  if (from._internal_has_dual_tolerance()) {
    _this->_impl_.dual_tolerance_ = new ::operations_research::OptionalDouble(*from._impl_.dual_tolerance_);
  }
  ::memcpy(&_impl_.lp_algorithm_, &from._impl_.lp_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scaling_) -
    reinterpret_cast<char*>(&_impl_.lp_algorithm_)) + sizeof(_impl_.scaling_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPSolverCommonParameters)
}

inline void MPSolverCommonParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_mip_gap_){nullptr}
    , decltype(_impl_.primal_tolerance_){nullptr}
    , decltype(_impl_.dual_tolerance_){nullptr}
    , decltype(_impl_.lp_algorithm_){0}
    , decltype(_impl_.presolve_){0}
    , decltype(_impl_.scaling_){0}
  };
}

MPSolverCommonParameters::~MPSolverCommonParameters() {
  // @@protoc_insertion_point(destructor:operations_research.MPSolverCommonParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPSolverCommonParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.relative_mip_gap_;
  if (this != internal_default_instance()) delete _impl_.primal_tolerance_;
  if (this != internal_default_instance()) delete _impl_.dual_tolerance_;
}

void MPSolverCommonParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPSolverCommonParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPSolverCommonParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.relative_mip_gap_ != nullptr);
      _impl_.relative_mip_gap_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.primal_tolerance_ != nullptr);
      _impl_.primal_tolerance_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dual_tolerance_ != nullptr);
      _impl_.dual_tolerance_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.lp_algorithm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scaling_) -
        reinterpret_cast<char*>(&_impl_.lp_algorithm_)) + sizeof(_impl_.scaling_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPSolverCommonParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.OptionalDouble relative_mip_gap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_mip_gap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.OptionalDouble primal_tolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_primal_tolerance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.OptionalDouble dual_tolerance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dual_tolerance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPSolverCommonParameters.LPAlgorithmValues lp_algorithm = 4 [default = LP_ALGO_UNSPECIFIED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::MPSolverCommonParameters_LPAlgorithmValues_IsValid(val))) {
            _internal_set_lp_algorithm(static_cast<::operations_research::MPSolverCommonParameters_LPAlgorithmValues>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.OptionalBoolean presolve = 5 [default = BOOL_UNSPECIFIED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::OptionalBoolean_IsValid(val))) {
            _internal_set_presolve(static_cast<::operations_research::OptionalBoolean>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.OptionalBoolean scaling = 7 [default = BOOL_UNSPECIFIED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::OptionalBoolean_IsValid(val))) {
            _internal_set_scaling(static_cast<::operations_research::OptionalBoolean>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPSolverCommonParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPSolverCommonParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.OptionalDouble relative_mip_gap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::relative_mip_gap(this),
        _Internal::relative_mip_gap(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.OptionalDouble primal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::primal_tolerance(this),
        _Internal::primal_tolerance(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.OptionalDouble dual_tolerance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dual_tolerance(this),
        _Internal::dual_tolerance(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.MPSolverCommonParameters.LPAlgorithmValues lp_algorithm = 4 [default = LP_ALGO_UNSPECIFIED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_lp_algorithm(), target);
  }

  // optional .operations_research.OptionalBoolean presolve = 5 [default = BOOL_UNSPECIFIED];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_presolve(), target);
  }

  // optional .operations_research.OptionalBoolean scaling = 7 [default = BOOL_UNSPECIFIED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_scaling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPSolverCommonParameters)
  return target;
}

size_t MPSolverCommonParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPSolverCommonParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .operations_research.OptionalDouble relative_mip_gap = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_mip_gap_);
    }

    // optional .operations_research.OptionalDouble primal_tolerance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primal_tolerance_);
    }

    // optional .operations_research.OptionalDouble dual_tolerance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dual_tolerance_);
    }

    // optional .operations_research.MPSolverCommonParameters.LPAlgorithmValues lp_algorithm = 4 [default = LP_ALGO_UNSPECIFIED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lp_algorithm());
    }

    // optional .operations_research.OptionalBoolean presolve = 5 [default = BOOL_UNSPECIFIED];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_presolve());
    }

    // optional .operations_research.OptionalBoolean scaling = 7 [default = BOOL_UNSPECIFIED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scaling());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPSolverCommonParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPSolverCommonParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPSolverCommonParameters::GetClassData() const { return &_class_data_; }


void MPSolverCommonParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPSolverCommonParameters*>(&to_msg);
  auto& from = static_cast<const MPSolverCommonParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPSolverCommonParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_relative_mip_gap()->::operations_research::OptionalDouble::MergeFrom(
          from._internal_relative_mip_gap());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_primal_tolerance()->::operations_research::OptionalDouble::MergeFrom(
          from._internal_primal_tolerance());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dual_tolerance()->::operations_research::OptionalDouble::MergeFrom(
          from._internal_dual_tolerance());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lp_algorithm_ = from._impl_.lp_algorithm_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.presolve_ = from._impl_.presolve_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.scaling_ = from._impl_.scaling_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPSolverCommonParameters::CopyFrom(const MPSolverCommonParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPSolverCommonParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSolverCommonParameters::IsInitialized() const {
  return true;
}

void MPSolverCommonParameters::InternalSwap(MPSolverCommonParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPSolverCommonParameters, _impl_.scaling_)
      + sizeof(MPSolverCommonParameters::_impl_.scaling_)
      - PROTOBUF_FIELD_OFFSET(MPSolverCommonParameters, _impl_.relative_mip_gap_)>(
          reinterpret_cast<char*>(&_impl_.relative_mip_gap_),
          reinterpret_cast<char*>(&other->_impl_.relative_mip_gap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPSolverCommonParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[14]);
}

// ===================================================================

MPModelDeltaProto_VariableOverridesEntry_DoNotUse::MPModelDeltaProto_VariableOverridesEntry_DoNotUse() {}
MPModelDeltaProto_VariableOverridesEntry_DoNotUse::MPModelDeltaProto_VariableOverridesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MPModelDeltaProto_VariableOverridesEntry_DoNotUse::MergeFrom(const MPModelDeltaProto_VariableOverridesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MPModelDeltaProto_VariableOverridesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[15]);
}

// ===================================================================

MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse() {}
MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::MergeFrom(const MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[16]);
}

// ===================================================================

class MPModelDeltaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MPModelDeltaProto>()._impl_._has_bits_);
  static void set_has_baseline_model_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MPModelDeltaProto::MPModelDeltaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MPModelDeltaProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.MPModelDeltaProto)
}
MPModelDeltaProto::MPModelDeltaProto(const MPModelDeltaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPModelDeltaProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.variable_overrides_)*/{}
    , /*decltype(_impl_.constraint_overrides_)*/{}
    , decltype(_impl_.baseline_model_file_path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.variable_overrides_.MergeFrom(from._impl_.variable_overrides_);
  _this->_impl_.constraint_overrides_.MergeFrom(from._impl_.constraint_overrides_);
  _impl_.baseline_model_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseline_model_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_baseline_model_file_path()) {
    _this->_impl_.baseline_model_file_path_.Set(from._internal_baseline_model_file_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.MPModelDeltaProto)
}

inline void MPModelDeltaProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.variable_overrides_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.constraint_overrides_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.baseline_model_file_path_){}
  };
  _impl_.baseline_model_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseline_model_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPModelDeltaProto::~MPModelDeltaProto() {
  // @@protoc_insertion_point(destructor:operations_research.MPModelDeltaProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MPModelDeltaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_overrides_.Destruct();
  _impl_.variable_overrides_.~MapField();
  _impl_.constraint_overrides_.Destruct();
  _impl_.constraint_overrides_.~MapField();
  _impl_.baseline_model_file_path_.Destroy();
}

void MPModelDeltaProto::ArenaDtor(void* object) {
  MPModelDeltaProto* _this = reinterpret_cast< MPModelDeltaProto* >(object);
  _this->_impl_.variable_overrides_.Destruct();
  _this->_impl_.constraint_overrides_.Destruct();
}
void MPModelDeltaProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPModelDeltaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPModelDeltaProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_overrides_.Clear();
  _impl_.constraint_overrides_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.baseline_model_file_path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPModelDeltaProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string baseline_model_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_baseline_model_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelDeltaProto.baseline_model_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<int32, .operations_research.MPVariableProto> variable_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.variable_overrides_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .operations_research.MPConstraintProto> constraint_overrides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.constraint_overrides_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPModelDeltaProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPModelDeltaProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string baseline_model_file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_baseline_model_file_path().data(), static_cast<int>(this->_internal_baseline_model_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelDeltaProto.baseline_model_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_baseline_model_file_path(), target);
  }

  // map<int32, .operations_research.MPVariableProto> variable_overrides = 2;
  if (!this->_internal_variable_overrides().empty()) {
    using MapType = ::_pb::Map<int32_t, ::operations_research::MPVariableProto>;
    using WireHelper = MPModelDeltaProto_VariableOverridesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_variable_overrides();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .operations_research.MPConstraintProto> constraint_overrides = 3;
  if (!this->_internal_constraint_overrides().empty()) {
    using MapType = ::_pb::Map<int32_t, ::operations_research::MPConstraintProto>;
    using WireHelper = MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_constraint_overrides();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPModelDeltaProto)
  return target;
}

size_t MPModelDeltaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPModelDeltaProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .operations_research.MPVariableProto> variable_overrides = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variable_overrides_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::operations_research::MPVariableProto >::const_iterator
      it = this->_internal_variable_overrides().begin();
      it != this->_internal_variable_overrides().end(); ++it) {
    total_size += MPModelDeltaProto_VariableOverridesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .operations_research.MPConstraintProto> constraint_overrides = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_constraint_overrides_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::operations_research::MPConstraintProto >::const_iterator
      it = this->_internal_constraint_overrides().begin();
      it != this->_internal_constraint_overrides().end(); ++it) {
    total_size += MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string baseline_model_file_path = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baseline_model_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPModelDeltaProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPModelDeltaProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPModelDeltaProto::GetClassData() const { return &_class_data_; }


void MPModelDeltaProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPModelDeltaProto*>(&to_msg);
  auto& from = static_cast<const MPModelDeltaProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPModelDeltaProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variable_overrides_.MergeFrom(from._impl_.variable_overrides_);
  _this->_impl_.constraint_overrides_.MergeFrom(from._impl_.constraint_overrides_);
  if (from._internal_has_baseline_model_file_path()) {
    _this->_internal_set_baseline_model_file_path(from._internal_baseline_model_file_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPModelDeltaProto::CopyFrom(const MPModelDeltaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPModelDeltaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelDeltaProto::IsInitialized() const {
  return true;
}

void MPModelDeltaProto::InternalSwap(MPModelDeltaProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.variable_overrides_.InternalSwap(&other->_impl_.variable_overrides_);
  _impl_.constraint_overrides_.InternalSwap(&other->_impl_.constraint_overrides_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.baseline_model_file_path_, lhs_arena,
      &other->_impl_.baseline_model_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MPModelDeltaProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[17]);
}

// ===================================================================

class MPModelRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MPModelRequest>()._impl_._has_bits_);
  static const ::operations_research::MPModelProto& model(const MPModelRequest* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_solver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_solver_time_limit_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_internal_solver_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_solver_specific_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_solver_specific_parameters_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::operations_research::MPModelDeltaProto& model_delta(const MPModelRequest* msg);
  static void set_has_model_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_populate_additional_solutions_up_to(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::operations_research::MPModelProto&
MPModelRequest::_Internal::model(const MPModelRequest* msg) {
  return *msg->_impl_.model_;
}
const ::operations_research::MPModelDeltaProto&
MPModelRequest::_Internal::model_delta(const MPModelRequest* msg) {
  return *msg->_impl_.model_delta_;
}
MPModelRequest::MPModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPModelRequest)
}
MPModelRequest::MPModelRequest(const MPModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPModelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.solver_specific_parameters_){}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.model_delta_){nullptr}
    , decltype(_impl_.solver_time_limit_seconds_){}
    , decltype(_impl_.enable_internal_solver_output_){}
    , decltype(_impl_.ignore_solver_specific_parameters_failure_){}
    , decltype(_impl_.populate_additional_solutions_up_to_){}
    , decltype(_impl_.solver_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.solver_specific_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solver_specific_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_solver_specific_parameters()) {
    _this->_impl_.solver_specific_parameters_.Set(from._internal_solver_specific_parameters(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::operations_research::MPModelProto(*from._impl_.model_);
  }
  if (from._internal_has_model_delta()) {
    _this->_impl_.model_delta_ = new ::operations_research::MPModelDeltaProto(*from._impl_.model_delta_);
  }
  ::memcpy(&_impl_.solver_time_limit_seconds_, &from._impl_.solver_time_limit_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.solver_type_) -
    reinterpret_cast<char*>(&_impl_.solver_time_limit_seconds_)) + sizeof(_impl_.solver_type_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPModelRequest)
}

inline void MPModelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.solver_specific_parameters_){}
    , decltype(_impl_.model_){nullptr}
    , decltype(_impl_.model_delta_){nullptr}
    , decltype(_impl_.solver_time_limit_seconds_){0}
    , decltype(_impl_.enable_internal_solver_output_){false}
    , decltype(_impl_.ignore_solver_specific_parameters_failure_){false}
    , decltype(_impl_.populate_additional_solutions_up_to_){0}
    , decltype(_impl_.solver_type_){2}
  };
  _impl_.solver_specific_parameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solver_specific_parameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPModelRequest::~MPModelRequest() {
  // @@protoc_insertion_point(destructor:operations_research.MPModelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.solver_specific_parameters_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_;
  if (this != internal_default_instance()) delete _impl_.model_delta_;
}

void MPModelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.solver_specific_parameters_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.model_ != nullptr);
      _impl_.model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.model_delta_ != nullptr);
      _impl_.model_delta_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.solver_time_limit_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.populate_additional_solutions_up_to_) -
        reinterpret_cast<char*>(&_impl_.solver_time_limit_seconds_)) + sizeof(_impl_.populate_additional_solutions_up_to_));
    _impl_.solver_type_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPModelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.MPModelProto model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPModelRequest.SolverType solver_type = 2 [default = GLOP_LINEAR_PROGRAMMING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::MPModelRequest_SolverType_IsValid(val))) {
            _internal_set_solver_type(static_cast<::operations_research::MPModelRequest_SolverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double solver_time_limit_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_solver_time_limit_seconds(&has_bits);
          _impl_.solver_time_limit_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_internal_solver_output = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_internal_solver_output(&has_bits);
          _impl_.enable_internal_solver_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string solver_specific_parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_solver_specific_parameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPModelRequest.solver_specific_parameters");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPModelDeltaProto model_delta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_solver_specific_parameters_failure = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ignore_solver_specific_parameters_failure(&has_bits);
          _impl_.ignore_solver_specific_parameters_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 populate_additional_solutions_up_to = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_populate_additional_solutions_up_to(&has_bits);
          _impl_.populate_additional_solutions_up_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.MPModelProto model = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.MPModelRequest.SolverType solver_type = 2 [default = GLOP_LINEAR_PROGRAMMING];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solver_type(), target);
  }

  // optional double solver_time_limit_seconds = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_solver_time_limit_seconds(), target);
  }

  // optional bool enable_internal_solver_output = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_internal_solver_output(), target);
  }

  // optional string solver_specific_parameters = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_solver_specific_parameters().data(), static_cast<int>(this->_internal_solver_specific_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPModelRequest.solver_specific_parameters");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_solver_specific_parameters(), target);
  }

  // optional .operations_research.MPModelDeltaProto model_delta = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::model_delta(this),
        _Internal::model_delta(this).GetCachedSize(), target, stream);
  }

  // optional bool ignore_solver_specific_parameters_failure = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ignore_solver_specific_parameters_failure(), target);
  }

  // optional int32 populate_additional_solutions_up_to = 11 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_populate_additional_solutions_up_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPModelRequest)
  return target;
}

size_t MPModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string solver_specific_parameters = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_solver_specific_parameters());
    }

    // optional .operations_research.MPModelProto model = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_);
    }

    // optional .operations_research.MPModelDeltaProto model_delta = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_delta_);
    }

    // optional double solver_time_limit_seconds = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool enable_internal_solver_output = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_solver_specific_parameters_failure = 9 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 populate_additional_solutions_up_to = 11 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_populate_additional_solutions_up_to());
    }

    // optional .operations_research.MPModelRequest.SolverType solver_type = 2 [default = GLOP_LINEAR_PROGRAMMING];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_solver_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPModelRequest::GetClassData() const { return &_class_data_; }


void MPModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPModelRequest*>(&to_msg);
  auto& from = static_cast<const MPModelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPModelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_solver_specific_parameters(from._internal_solver_specific_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_model()->::operations_research::MPModelProto::MergeFrom(
          from._internal_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_model_delta()->::operations_research::MPModelDeltaProto::MergeFrom(
          from._internal_model_delta());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.solver_time_limit_seconds_ = from._impl_.solver_time_limit_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.enable_internal_solver_output_ = from._impl_.enable_internal_solver_output_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ignore_solver_specific_parameters_failure_ = from._impl_.ignore_solver_specific_parameters_failure_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.populate_additional_solutions_up_to_ = from._impl_.populate_additional_solutions_up_to_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.solver_type_ = from._impl_.solver_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPModelRequest::CopyFrom(const MPModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPModelRequest::IsInitialized() const {
  return true;
}

void MPModelRequest::InternalSwap(MPModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.solver_specific_parameters_, lhs_arena,
      &other->_impl_.solver_specific_parameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPModelRequest, _impl_.populate_additional_solutions_up_to_)
      + sizeof(MPModelRequest::_impl_.populate_additional_solutions_up_to_)
      - PROTOBUF_FIELD_OFFSET(MPModelRequest, _impl_.model_)>(
          reinterpret_cast<char*>(&_impl_.model_),
          reinterpret_cast<char*>(&other->_impl_.model_));
  swap(_impl_.solver_type_, other->_impl_.solver_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPModelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[18]);
}

// ===================================================================

class MPSolution::_Internal {
 public:
  using HasBits = decltype(std::declval<MPSolution>()._impl_._has_bits_);
  static void set_has_objective_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MPSolution::MPSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPSolution)
}
MPSolution::MPSolution(const MPSolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPSolution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_value_){from._impl_.variable_value_}
    , decltype(_impl_.objective_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objective_value_ = from._impl_.objective_value_;
  // @@protoc_insertion_point(copy_constructor:operations_research.MPSolution)
}

inline void MPSolution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_value_){arena}
    , decltype(_impl_.objective_value_){0}
  };
}

MPSolution::~MPSolution() {
  // @@protoc_insertion_point(destructor:operations_research.MPSolution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPSolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_value_.~RepeatedField();
}

void MPSolution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPSolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_value_.Clear();
  _impl_.objective_value_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPSolution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double objective_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_objective_value(&has_bits);
          _impl_.objective_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double variable_value = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_variable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_variable_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPSolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPSolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double objective_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_objective_value(), target);
  }

  // repeated double variable_value = 2 [packed = true];
  if (this->_internal_variable_value_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_variable_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPSolution)
  return target;
}

size_t MPSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPSolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double variable_value = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variable_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional double objective_value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPSolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPSolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPSolution::GetClassData() const { return &_class_data_; }


void MPSolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPSolution*>(&to_msg);
  auto& from = static_cast<const MPSolution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPSolution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variable_value_.MergeFrom(from._impl_.variable_value_);
  if (from._internal_has_objective_value()) {
    _this->_internal_set_objective_value(from._internal_objective_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPSolution::CopyFrom(const MPSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSolution::IsInitialized() const {
  return true;
}

void MPSolution::InternalSwap(MPSolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.variable_value_.InternalSwap(&other->_impl_.variable_value_);
  swap(_impl_.objective_value_, other->_impl_.objective_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPSolution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[19]);
}

// ===================================================================

class MPSolveInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MPSolveInfo>()._impl_._has_bits_);
  static void set_has_solve_wall_time_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solve_user_time_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPSolveInfo::MPSolveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPSolveInfo)
}
MPSolveInfo::MPSolveInfo(const MPSolveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPSolveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.solve_wall_time_seconds_){}
    , decltype(_impl_.solve_user_time_seconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.solve_wall_time_seconds_, &from._impl_.solve_wall_time_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.solve_user_time_seconds_) -
    reinterpret_cast<char*>(&_impl_.solve_wall_time_seconds_)) + sizeof(_impl_.solve_user_time_seconds_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPSolveInfo)
}

inline void MPSolveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.solve_wall_time_seconds_){0}
    , decltype(_impl_.solve_user_time_seconds_){0}
  };
}

MPSolveInfo::~MPSolveInfo() {
  // @@protoc_insertion_point(destructor:operations_research.MPSolveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPSolveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MPSolveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPSolveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPSolveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.solve_wall_time_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.solve_user_time_seconds_) -
        reinterpret_cast<char*>(&_impl_.solve_wall_time_seconds_)) + sizeof(_impl_.solve_user_time_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPSolveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double solve_wall_time_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_solve_wall_time_seconds(&has_bits);
          _impl_.solve_wall_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double solve_user_time_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_solve_user_time_seconds(&has_bits);
          _impl_.solve_user_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPSolveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPSolveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double solve_wall_time_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_solve_wall_time_seconds(), target);
  }

  // optional double solve_user_time_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_solve_user_time_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPSolveInfo)
  return target;
}

size_t MPSolveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPSolveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double solve_wall_time_seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double solve_user_time_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPSolveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPSolveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPSolveInfo::GetClassData() const { return &_class_data_; }


void MPSolveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPSolveInfo*>(&to_msg);
  auto& from = static_cast<const MPSolveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPSolveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.solve_wall_time_seconds_ = from._impl_.solve_wall_time_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.solve_user_time_seconds_ = from._impl_.solve_user_time_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPSolveInfo::CopyFrom(const MPSolveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPSolveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSolveInfo::IsInitialized() const {
  return true;
}

void MPSolveInfo::InternalSwap(MPSolveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPSolveInfo, _impl_.solve_user_time_seconds_)
      + sizeof(MPSolveInfo::_impl_.solve_user_time_seconds_)
      - PROTOBUF_FIELD_OFFSET(MPSolveInfo, _impl_.solve_wall_time_seconds_)>(
          reinterpret_cast<char*>(&_impl_.solve_wall_time_seconds_),
          reinterpret_cast<char*>(&other->_impl_.solve_wall_time_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPSolveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[20]);
}

// ===================================================================

class MPSolutionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MPSolutionResponse>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objective_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_best_objective_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::operations_research::MPSolveInfo& solve_info(const MPSolutionResponse* msg);
  static void set_has_solve_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_solver_specific_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::operations_research::MPSolveInfo&
MPSolutionResponse::_Internal::solve_info(const MPSolutionResponse* msg) {
  return *msg->_impl_.solve_info_;
}
MPSolutionResponse::MPSolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.MPSolutionResponse)
}
MPSolutionResponse::MPSolutionResponse(const MPSolutionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MPSolutionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_value_){from._impl_.variable_value_}
    , decltype(_impl_.dual_value_){from._impl_.dual_value_}
    , decltype(_impl_.reduced_cost_){from._impl_.reduced_cost_}
    , decltype(_impl_.additional_solutions_){from._impl_.additional_solutions_}
    , decltype(_impl_.status_str_){}
    , decltype(_impl_.solver_specific_info_){}
    , decltype(_impl_.solve_info_){nullptr}
    , decltype(_impl_.objective_value_){}
    , decltype(_impl_.best_objective_bound_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_str()) {
    _this->_impl_.status_str_.Set(from._internal_status_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.solver_specific_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solver_specific_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_solver_specific_info()) {
    _this->_impl_.solver_specific_info_.Set(from._internal_solver_specific_info(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_solve_info()) {
    _this->_impl_.solve_info_ = new ::operations_research::MPSolveInfo(*from._impl_.solve_info_);
  }
  ::memcpy(&_impl_.objective_value_, &from._impl_.objective_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.objective_value_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:operations_research.MPSolutionResponse)
}

inline void MPSolutionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variable_value_){arena}
    , decltype(_impl_.dual_value_){arena}
    , decltype(_impl_.reduced_cost_){arena}
    , decltype(_impl_.additional_solutions_){arena}
    , decltype(_impl_.status_str_){}
    , decltype(_impl_.solver_specific_info_){}
    , decltype(_impl_.solve_info_){nullptr}
    , decltype(_impl_.objective_value_){0}
    , decltype(_impl_.best_objective_bound_){0}
    , decltype(_impl_.status_){99}
  };
  _impl_.status_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.solver_specific_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solver_specific_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MPSolutionResponse::~MPSolutionResponse() {
  // @@protoc_insertion_point(destructor:operations_research.MPSolutionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MPSolutionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_value_.~RepeatedField();
  _impl_.dual_value_.~RepeatedField();
  _impl_.reduced_cost_.~RepeatedField();
  _impl_.additional_solutions_.~RepeatedPtrField();
  _impl_.status_str_.Destroy();
  _impl_.solver_specific_info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.solve_info_;
}

void MPSolutionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MPSolutionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.MPSolutionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_value_.Clear();
  _impl_.dual_value_.Clear();
  _impl_.reduced_cost_.Clear();
  _impl_.additional_solutions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.status_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.solver_specific_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.solve_info_ != nullptr);
      _impl_.solve_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.objective_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.best_objective_bound_) -
        reinterpret_cast<char*>(&_impl_.objective_value_)) + sizeof(_impl_.best_objective_bound_));
    _impl_.status_ = 99;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPSolutionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.MPSolverResponseStatus status = 1 [default = MPSOLVER_UNKNOWN_STATUS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::MPSolverResponseStatus_IsValid(val))) {
            _internal_set_status(static_cast<::operations_research::MPSolverResponseStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double objective_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_objective_value(&has_bits);
          _impl_.objective_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double variable_value = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_variable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_variable_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double dual_value = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dual_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_dual_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double best_objective_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_best_objective_bound(&has_bits);
          _impl_.best_objective_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double reduced_cost = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_reduced_cost(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_reduced_cost(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string status_str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_status_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.MPSolutionResponse.status_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.MPSolution additional_solutions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_solutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.MPSolveInfo solve_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_solve_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes solver_specific_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_solver_specific_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPSolutionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.MPSolutionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.MPSolverResponseStatus status = 1 [default = MPSOLVER_UNKNOWN_STATUS];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional double objective_value = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_objective_value(), target);
  }

  // repeated double variable_value = 3 [packed = true];
  if (this->_internal_variable_value_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_variable_value(), target);
  }

  // repeated double dual_value = 4 [packed = true];
  if (this->_internal_dual_value_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_dual_value(), target);
  }

  // optional double best_objective_bound = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_best_objective_bound(), target);
  }

  // repeated double reduced_cost = 6 [packed = true];
  if (this->_internal_reduced_cost_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_reduced_cost(), target);
  }

  // optional string status_str = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_str().data(), static_cast<int>(this->_internal_status_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.MPSolutionResponse.status_str");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_status_str(), target);
  }

  // repeated .operations_research.MPSolution additional_solutions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_solutions_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_solutions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .operations_research.MPSolveInfo solve_info = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::solve_info(this),
        _Internal::solve_info(this).GetCachedSize(), target, stream);
  }

  // optional bytes solver_specific_info = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_solver_specific_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.MPSolutionResponse)
  return target;
}

size_t MPSolutionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.MPSolutionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double variable_value = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variable_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double dual_value = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dual_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double reduced_cost = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reduced_cost_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .operations_research.MPSolution additional_solutions = 8;
  total_size += 1UL * this->_internal_additional_solutions_size();
  for (const auto& msg : this->_impl_.additional_solutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string status_str = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_str());
    }

    // optional bytes solver_specific_info = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_solver_specific_info());
    }

    // optional .operations_research.MPSolveInfo solve_info = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.solve_info_);
    }

    // optional double objective_value = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double best_objective_bound = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.MPSolverResponseStatus status = 1 [default = MPSOLVER_UNKNOWN_STATUS];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPSolutionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MPSolutionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPSolutionResponse::GetClassData() const { return &_class_data_; }


void MPSolutionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MPSolutionResponse*>(&to_msg);
  auto& from = static_cast<const MPSolutionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.MPSolutionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variable_value_.MergeFrom(from._impl_.variable_value_);
  _this->_impl_.dual_value_.MergeFrom(from._impl_.dual_value_);
  _this->_impl_.reduced_cost_.MergeFrom(from._impl_.reduced_cost_);
  _this->_impl_.additional_solutions_.MergeFrom(from._impl_.additional_solutions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_status_str(from._internal_status_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_solver_specific_info(from._internal_solver_specific_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_solve_info()->::operations_research::MPSolveInfo::MergeFrom(
          from._internal_solve_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.objective_value_ = from._impl_.objective_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.best_objective_bound_ = from._impl_.best_objective_bound_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPSolutionResponse::CopyFrom(const MPSolutionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.MPSolutionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSolutionResponse::IsInitialized() const {
  return true;
}

void MPSolutionResponse::InternalSwap(MPSolutionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.variable_value_.InternalSwap(&other->_impl_.variable_value_);
  _impl_.dual_value_.InternalSwap(&other->_impl_.dual_value_);
  _impl_.reduced_cost_.InternalSwap(&other->_impl_.reduced_cost_);
  _impl_.additional_solutions_.InternalSwap(&other->_impl_.additional_solutions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_str_, lhs_arena,
      &other->_impl_.status_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.solver_specific_info_, lhs_arena,
      &other->_impl_.solver_specific_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPSolutionResponse, _impl_.best_objective_bound_)
      + sizeof(MPSolutionResponse::_impl_.best_objective_bound_)
      - PROTOBUF_FIELD_OFFSET(MPSolutionResponse, _impl_.solve_info_)>(
          reinterpret_cast<char*>(&_impl_.solve_info_),
          reinterpret_cast<char*>(&other->_impl_.solve_info_));
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPSolutionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_getter, &descriptor_table_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto_once,
      file_level_metadata_ortools_2flinear_5fsolver_2flinear_5fsolver_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::MPVariableProto*
Arena::CreateMaybeMessage< ::operations_research::MPVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPConstraintProto*
Arena::CreateMaybeMessage< ::operations_research::MPConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPGeneralConstraintProto*
Arena::CreateMaybeMessage< ::operations_research::MPGeneralConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPGeneralConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPIndicatorConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPIndicatorConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPIndicatorConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPSosConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPSosConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPSosConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPQuadraticConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPQuadraticConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPQuadraticConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPAbsConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPAbsConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPAbsConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPArrayConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPArrayConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPArrayConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPArrayWithConstantConstraint*
Arena::CreateMaybeMessage< ::operations_research::MPArrayWithConstantConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPArrayWithConstantConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPQuadraticObjective*
Arena::CreateMaybeMessage< ::operations_research::MPQuadraticObjective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPQuadraticObjective >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::PartialVariableAssignment*
Arena::CreateMaybeMessage< ::operations_research::PartialVariableAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::PartialVariableAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelProto_Annotation*
Arena::CreateMaybeMessage< ::operations_research::MPModelProto_Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelProto_Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelProto*
Arena::CreateMaybeMessage< ::operations_research::MPModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::OptionalDouble*
Arena::CreateMaybeMessage< ::operations_research::OptionalDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::OptionalDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPSolverCommonParameters*
Arena::CreateMaybeMessage< ::operations_research::MPSolverCommonParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPSolverCommonParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelDeltaProto_VariableOverridesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelDeltaProto_ConstraintOverridesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelDeltaProto*
Arena::CreateMaybeMessage< ::operations_research::MPModelDeltaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelDeltaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPModelRequest*
Arena::CreateMaybeMessage< ::operations_research::MPModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPSolution*
Arena::CreateMaybeMessage< ::operations_research::MPSolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPSolution >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPSolveInfo*
Arena::CreateMaybeMessage< ::operations_research::MPSolveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPSolveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::MPSolutionResponse*
Arena::CreateMaybeMessage< ::operations_research::MPSolutionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::MPSolutionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
