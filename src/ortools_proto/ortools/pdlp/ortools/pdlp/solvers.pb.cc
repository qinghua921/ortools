// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/pdlp/solvers.proto

#include "ortools/pdlp/solvers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace pdlp {
PROTOBUF_CONSTEXPR TerminationCriteria_SimpleOptimalityCriteria::TerminationCriteria_SimpleOptimalityCriteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eps_optimal_absolute_)*/1e-006
  , /*decltype(_impl_.eps_optimal_relative_)*/1e-006} {}
struct TerminationCriteria_SimpleOptimalityCriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminationCriteria_SimpleOptimalityCriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminationCriteria_SimpleOptimalityCriteriaDefaultTypeInternal() {}
  union {
    TerminationCriteria_SimpleOptimalityCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminationCriteria_SimpleOptimalityCriteriaDefaultTypeInternal _TerminationCriteria_SimpleOptimalityCriteria_default_instance_;
PROTOBUF_CONSTEXPR TerminationCriteria_DetailedOptimalityCriteria::TerminationCriteria_DetailedOptimalityCriteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eps_optimal_primal_residual_absolute_)*/1e-006
  , /*decltype(_impl_.eps_optimal_primal_residual_relative_)*/1e-006
  , /*decltype(_impl_.eps_optimal_dual_residual_absolute_)*/1e-006
  , /*decltype(_impl_.eps_optimal_dual_residual_relative_)*/1e-006
  , /*decltype(_impl_.eps_optimal_objective_gap_absolute_)*/1e-006
  , /*decltype(_impl_.eps_optimal_objective_gap_relative_)*/1e-006} {}
struct TerminationCriteria_DetailedOptimalityCriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminationCriteria_DetailedOptimalityCriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminationCriteria_DetailedOptimalityCriteriaDefaultTypeInternal() {}
  union {
    TerminationCriteria_DetailedOptimalityCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminationCriteria_DetailedOptimalityCriteriaDefaultTypeInternal _TerminationCriteria_DetailedOptimalityCriteria_default_instance_;
PROTOBUF_CONSTEXPR TerminationCriteria::TerminationCriteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eps_optimal_absolute_)*/1e-006
  , /*decltype(_impl_.eps_optimal_relative_)*/1e-006
  , /*decltype(_impl_.eps_primal_infeasible_)*/1e-008
  , /*decltype(_impl_.optimality_norm_)*/2
  , /*decltype(_impl_.iteration_limit_)*/2147483647
  , /*decltype(_impl_.eps_dual_infeasible_)*/1e-008
  , /*decltype(_impl_.time_sec_limit_)*/std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.kkt_matrix_pass_limit_)*/std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.optimality_criteria_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TerminationCriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminationCriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminationCriteriaDefaultTypeInternal() {}
  union {
    TerminationCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminationCriteriaDefaultTypeInternal _TerminationCriteria_default_instance_;
PROTOBUF_CONSTEXPR AdaptiveLinesearchParams::AdaptiveLinesearchParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.step_size_reduction_exponent_)*/0.3
  , /*decltype(_impl_.step_size_growth_exponent_)*/0.6} {}
struct AdaptiveLinesearchParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdaptiveLinesearchParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdaptiveLinesearchParamsDefaultTypeInternal() {}
  union {
    AdaptiveLinesearchParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdaptiveLinesearchParamsDefaultTypeInternal _AdaptiveLinesearchParams_default_instance_;
PROTOBUF_CONSTEXPR MalitskyPockParams::MalitskyPockParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.step_size_downscaling_factor_)*/0.7
  , /*decltype(_impl_.linesearch_contraction_factor_)*/0.99
  , /*decltype(_impl_.step_size_interpolation_)*/1} {}
struct MalitskyPockParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MalitskyPockParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MalitskyPockParamsDefaultTypeInternal() {}
  union {
    MalitskyPockParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MalitskyPockParamsDefaultTypeInternal _MalitskyPockParams_default_instance_;
PROTOBUF_CONSTEXPR PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.glop_parameters_)*/nullptr
  , /*decltype(_impl_.use_glop_)*/false} {}
struct PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal() {}
  union {
    PrimalDualHybridGradientParams_PresolveOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal _PrimalDualHybridGradientParams_PresolveOptions_default_instance_;
PROTOBUF_CONSTEXPR PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.random_projection_seeds_)*/{}
  , /*decltype(_impl_._random_projection_seeds_cached_byte_size_)*/{0}
  , /*decltype(_impl_.termination_criteria_)*/nullptr
  , /*decltype(_impl_.presolve_options_)*/nullptr
  , /*decltype(_impl_.adaptive_linesearch_parameters_)*/nullptr
  , /*decltype(_impl_.malitsky_pock_parameters_)*/nullptr
  , /*decltype(_impl_.initial_primal_weight_)*/0
  , /*decltype(_impl_.record_iteration_stats_)*/false
  , /*decltype(_impl_.use_diagonal_qp_trust_region_solver_)*/false
  , /*decltype(_impl_.verbosity_level_)*/0
  , /*decltype(_impl_.num_shards_)*/0
  , /*decltype(_impl_.l2_norm_rescaling_)*/true
  , /*decltype(_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_)*/true
  , /*decltype(_impl_.num_threads_)*/1
  , /*decltype(_impl_.major_iteration_frequency_)*/64
  , /*decltype(_impl_.termination_check_frequency_)*/64
  , /*decltype(_impl_.restart_strategy_)*/3
  , /*decltype(_impl_.primal_weight_update_smoothing_)*/0.5
  , /*decltype(_impl_.l_inf_ruiz_iterations_)*/5
  , /*decltype(_impl_.linesearch_rule_)*/1
  , /*decltype(_impl_.sufficient_reduction_for_restart_)*/0.1
  , /*decltype(_impl_.necessary_reduction_for_restart_)*/0.9
  , /*decltype(_impl_.infinite_constraint_bound_threshold_)*/std::numeric_limits<double>::infinity()
  , /*decltype(_impl_.diagonal_qp_trust_region_solver_tolerance_)*/1e-008
  , /*decltype(_impl_.initial_step_size_scaling_)*/1} {}
struct PrimalDualHybridGradientParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimalDualHybridGradientParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimalDualHybridGradientParamsDefaultTypeInternal() {}
  union {
    PrimalDualHybridGradientParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimalDualHybridGradientParamsDefaultTypeInternal _PrimalDualHybridGradientParams_default_instance_;
}  // namespace pdlp
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fpdlp_2fsolvers_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fpdlp_2fsolvers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria, _impl_.eps_optimal_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria, _impl_.eps_optimal_relative_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_primal_residual_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_primal_residual_relative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_dual_residual_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_dual_residual_relative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_objective_gap_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria, _impl_.eps_optimal_objective_gap_relative_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.optimality_norm_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.eps_optimal_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.eps_optimal_relative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.eps_primal_infeasible_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.eps_dual_infeasible_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.time_sec_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.iteration_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.kkt_matrix_pass_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _impl_.optimality_criteria_),
  3,
  ~0u,
  ~0u,
  0,
  1,
  2,
  5,
  6,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _impl_.step_size_reduction_exponent_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _impl_.step_size_growth_exponent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _impl_.step_size_downscaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _impl_.linesearch_contraction_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _impl_.step_size_interpolation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _impl_.use_glop_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _impl_.glop_parameters_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.termination_criteria_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.num_threads_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.num_shards_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.record_iteration_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.verbosity_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.major_iteration_frequency_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.termination_check_frequency_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.restart_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.primal_weight_update_smoothing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.initial_primal_weight_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.presolve_options_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.l_inf_ruiz_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.l2_norm_rescaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.sufficient_reduction_for_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.necessary_reduction_for_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.linesearch_rule_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.adaptive_linesearch_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.malitsky_pock_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.initial_step_size_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.random_projection_seeds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.infinite_constraint_bound_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.use_diagonal_qp_trust_region_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _impl_.diagonal_qp_trust_region_solver_tolerance_),
  0,
  11,
  8,
  5,
  7,
  12,
  13,
  14,
  15,
  4,
  1,
  16,
  9,
  18,
  19,
  17,
  2,
  3,
  22,
  ~0u,
  20,
  10,
  6,
  21,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria)},
  { 10, 22, -1, sizeof(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria)},
  { 28, 45, -1, sizeof(::operations_research::pdlp::TerminationCriteria)},
  { 55, 63, -1, sizeof(::operations_research::pdlp::AdaptiveLinesearchParams)},
  { 65, 74, -1, sizeof(::operations_research::pdlp::MalitskyPockParams)},
  { 77, 85, -1, sizeof(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions)},
  { 87, 117, -1, sizeof(::operations_research::pdlp::PrimalDualHybridGradientParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::pdlp::_TerminationCriteria_SimpleOptimalityCriteria_default_instance_._instance,
  &::operations_research::pdlp::_TerminationCriteria_DetailedOptimalityCriteria_default_instance_._instance,
  &::operations_research::pdlp::_TerminationCriteria_default_instance_._instance,
  &::operations_research::pdlp::_AdaptiveLinesearchParams_default_instance_._instance,
  &::operations_research::pdlp::_MalitskyPockParams_default_instance_._instance,
  &::operations_research::pdlp::_PrimalDualHybridGradientParams_PresolveOptions_default_instance_._instance,
  &::operations_research::pdlp::_PrimalDualHybridGradientParams_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fpdlp_2fsolvers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ortools/pdlp/solvers.proto\022\030operations"
  "_research.pdlp\032\035ortools/glop/parameters."
  "proto\"\254\010\n\023TerminationCriteria\022U\n\017optimal"
  "ity_norm\030\001 \001(\0162(.operations_research.pdl"
  "p.OptimalityNorm:\022OPTIMALITY_NORM_L2\022l\n\032"
  "simple_optimality_criteria\030\t \001(\0132F.opera"
  "tions_research.pdlp.TerminationCriteria."
  "SimpleOptimalityCriteriaH\000\022p\n\034detailed_o"
  "ptimality_criteria\030\n \001(\0132H.operations_re"
  "search.pdlp.TerminationCriteria.Detailed"
  "OptimalityCriteriaH\000\022(\n\024eps_optimal_abso"
  "lute\030\002 \001(\001:\0061e-006B\002\030\001\022(\n\024eps_optimal_re"
  "lative\030\003 \001(\001:\0061e-006B\002\030\001\022%\n\025eps_primal_i"
  "nfeasible\030\004 \001(\001:\0061e-008\022#\n\023eps_dual_infe"
  "asible\030\005 \001(\001:\0061e-008\022\033\n\016time_sec_limit\030\006"
  " \001(\001:\003inf\022#\n\017iteration_limit\030\007 \001(\005:\n2147"
  "483647\022\"\n\025kkt_matrix_pass_limit\030\010 \001(\001:\003i"
  "nf\032f\n\030SimpleOptimalityCriteria\022$\n\024eps_op"
  "timal_absolute\030\001 \001(\001:\0061e-006\022$\n\024eps_opti"
  "mal_relative\030\002 \001(\001:\0061e-006\032\330\002\n\032DetailedO"
  "ptimalityCriteria\0224\n$eps_optimal_primal_"
  "residual_absolute\030\001 \001(\001:\0061e-006\0224\n$eps_o"
  "ptimal_primal_residual_relative\030\002 \001(\001:\0061"
  "e-006\0222\n\"eps_optimal_dual_residual_absol"
  "ute\030\003 \001(\001:\0061e-006\0222\n\"eps_optimal_dual_re"
  "sidual_relative\030\004 \001(\001:\0061e-006\0222\n\"eps_opt"
  "imal_objective_gap_absolute\030\005 \001(\001:\0061e-00"
  "6\0222\n\"eps_optimal_objective_gap_relative\030"
  "\006 \001(\001:\0061e-006B\025\n\023optimality_criteria\"m\n\030"
  "AdaptiveLinesearchParams\022)\n\034step_size_re"
  "duction_exponent\030\001 \001(\001:\0030.3\022&\n\031step_size"
  "_growth_exponent\030\002 \001(\001:\0030.6\"\220\001\n\022Malitsky"
  "PockParams\022)\n\034step_size_downscaling_fact"
  "or\030\001 \001(\001:\0030.7\022+\n\035linesearch_contraction_"
  "factor\030\002 \001(\001:\0040.99\022\"\n\027step_size_interpol"
  "ation\030\003 \001(\001:\0011\"\375\r\n\036PrimalDualHybridGradi"
  "entParams\022K\n\024termination_criteria\030\001 \001(\0132"
  "-.operations_research.pdlp.TerminationCr"
  "iteria\022\026\n\013num_threads\030\002 \001(\005:\0011\022\025\n\nnum_sh"
  "ards\030\033 \001(\005:\0010\022\036\n\026record_iteration_stats\030"
  "\003 \001(\010\022\032\n\017verbosity_level\030\032 \001(\005:\0010\022%\n\031maj"
  "or_iteration_frequency\030\004 \001(\005:\00264\022\'\n\033term"
  "ination_check_frequency\030\005 \001(\005:\00264\022v\n\020res"
  "tart_strategy\030\006 \001(\0162H.operations_researc"
  "h.pdlp.PrimalDualHybridGradientParams.Re"
  "startStrategy:\022ADAPTIVE_HEURISTIC\022+\n\036pri"
  "mal_weight_update_smoothing\030\007 \001(\001:\0030.5\022\035"
  "\n\025initial_primal_weight\030\010 \001(\001\022b\n\020presolv"
  "e_options\030\020 \001(\0132H.operations_research.pd"
  "lp.PrimalDualHybridGradientParams.Presol"
  "veOptions\022 \n\025l_inf_ruiz_iterations\030\t \001(\005"
  ":\0015\022\037\n\021l2_norm_rescaling\030\n \001(\010:\004true\022-\n "
  "sufficient_reduction_for_restart\030\013 \001(\001:\003"
  "0.1\022,\n\037necessary_reduction_for_restart\030\021"
  " \001(\001:\0030.9\022z\n\017linesearch_rule\030\014 \001(\0162G.ope"
  "rations_research.pdlp.PrimalDualHybridGr"
  "adientParams.LinesearchRule:\030ADAPTIVE_LI"
  "NESEARCH_RULE\022Z\n\036adaptive_linesearch_par"
  "ameters\030\022 \001(\01322.operations_research.pdlp"
  ".AdaptiveLinesearchParams\022N\n\030malitsky_po"
  "ck_parameters\030\023 \001(\0132,.operations_researc"
  "h.pdlp.MalitskyPockParams\022$\n\031initial_ste"
  "p_size_scaling\030\031 \001(\001:\0011\022#\n\027random_projec"
  "tion_seeds\030\034 \003(\005B\002\020\001\0220\n#infinite_constra"
  "int_bound_threshold\030\026 \001(\001:\003inf\022H\n:handle"
  "_some_primal_gradients_on_finite_bounds_"
  "as_residuals\030\035 \001(\010:\004true\0222\n#use_diagonal"
  "_qp_trust_region_solver\030\027 \001(\010:\005false\0229\n)"
  "diagonal_qp_trust_region_solver_toleranc"
  "e\030\030 \001(\001:\0061e-008\032f\n\017PresolveOptions\022\020\n\010us"
  "e_glop\030\001 \001(\010\022A\n\017glop_parameters\030\002 \001(\0132(."
  "operations_research.glop.GlopParameters\""
  "\224\001\n\017RestartStrategy\022 \n\034RESTART_STRATEGY_"
  "UNSPECIFIED\020\000\022\017\n\013NO_RESTARTS\020\001\022\031\n\025EVERY_"
  "MAJOR_ITERATION\020\002\022\026\n\022ADAPTIVE_HEURISTIC\020"
  "\003\022\033\n\027ADAPTIVE_DISTANCE_BASED\020\004\"\217\001\n\016Lines"
  "earchRule\022\037\n\033LINESEARCH_RULE_UNSPECIFIED"
  "\020\000\022\034\n\030ADAPTIVE_LINESEARCH_RULE\020\001\022!\n\035MALI"
  "TSKY_POCK_LINESEARCH_RULE\020\002\022\033\n\027CONSTANT_"
  "STEP_SIZE_RULE\020\003J\004\010\r\020\016J\004\010\016\020\017J\004\010\017\020\020J\004\010\024\020\025"
  "J\004\010\025\020\026*\215\001\n\016OptimalityNorm\022\037\n\033OPTIMALITY_"
  "NORM_UNSPECIFIED\020\000\022\031\n\025OPTIMALITY_NORM_L_"
  "INF\020\001\022\026\n\022OPTIMALITY_NORM_L2\020\002\022\'\n#OPTIMAL"
  "ITY_NORM_L_INF_COMPONENTWISE\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_deps[1] = {
  &::descriptor_table_ortools_2fglop_2fparameters_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fpdlp_2fsolvers_2eproto = {
    false, false, 3350, descriptor_table_protodef_ortools_2fpdlp_2fsolvers_2eproto,
    "ortools/pdlp/solvers.proto",
    &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once, descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_ortools_2fpdlp_2fsolvers_2eproto::offsets,
    file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto, file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto,
    file_level_service_descriptors_ortools_2fpdlp_2fsolvers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter() {
  return &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fpdlp_2fsolvers_2eproto(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
namespace operations_research {
namespace pdlp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimalDualHybridGradientParams_RestartStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[0];
}
bool PrimalDualHybridGradientParams_RestartStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RESTART_STRATEGY_UNSPECIFIED;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::NO_RESTARTS;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::EVERY_MAJOR_ITERATION;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::ADAPTIVE_HEURISTIC;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::ADAPTIVE_DISTANCE_BASED;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RestartStrategy_MIN;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RestartStrategy_MAX;
constexpr int PrimalDualHybridGradientParams::RestartStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimalDualHybridGradientParams_LinesearchRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[1];
}
bool PrimalDualHybridGradientParams_LinesearchRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LINESEARCH_RULE_UNSPECIFIED;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::ADAPTIVE_LINESEARCH_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::MALITSKY_POCK_LINESEARCH_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::CONSTANT_STEP_SIZE_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LinesearchRule_MIN;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LinesearchRule_MAX;
constexpr int PrimalDualHybridGradientParams::LinesearchRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptimalityNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[2];
}
bool OptimalityNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TerminationCriteria_SimpleOptimalityCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminationCriteria_SimpleOptimalityCriteria>()._impl_._has_bits_);
  static void set_has_eps_optimal_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps_optimal_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TerminationCriteria_SimpleOptimalityCriteria::TerminationCriteria_SimpleOptimalityCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
}
TerminationCriteria_SimpleOptimalityCriteria::TerminationCriteria_SimpleOptimalityCriteria(const TerminationCriteria_SimpleOptimalityCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminationCriteria_SimpleOptimalityCriteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_absolute_){}
    , decltype(_impl_.eps_optimal_relative_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eps_optimal_absolute_, &from._impl_.eps_optimal_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eps_optimal_relative_) -
    reinterpret_cast<char*>(&_impl_.eps_optimal_absolute_)) + sizeof(_impl_.eps_optimal_relative_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
}

inline void TerminationCriteria_SimpleOptimalityCriteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_absolute_){1e-006}
    , decltype(_impl_.eps_optimal_relative_){1e-006}
  };
}

TerminationCriteria_SimpleOptimalityCriteria::~TerminationCriteria_SimpleOptimalityCriteria() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminationCriteria_SimpleOptimalityCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TerminationCriteria_SimpleOptimalityCriteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminationCriteria_SimpleOptimalityCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.eps_optimal_absolute_ = 1e-006;
    _impl_.eps_optimal_relative_ = 1e-006;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminationCriteria_SimpleOptimalityCriteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double eps_optimal_absolute = 1 [default = 1e-006];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_eps_optimal_absolute(&has_bits);
          _impl_.eps_optimal_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_relative = 2 [default = 1e-006];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_eps_optimal_relative(&has_bits);
          _impl_.eps_optimal_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminationCriteria_SimpleOptimalityCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double eps_optimal_absolute = 1 [default = 1e-006];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_eps_optimal_absolute(), target);
  }

  // optional double eps_optimal_relative = 2 [default = 1e-006];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_optimal_relative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  return target;
}

size_t TerminationCriteria_SimpleOptimalityCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double eps_optimal_absolute = 1 [default = 1e-006];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_relative = 2 [default = 1e-006];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminationCriteria_SimpleOptimalityCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminationCriteria_SimpleOptimalityCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminationCriteria_SimpleOptimalityCriteria::GetClassData() const { return &_class_data_; }


void TerminationCriteria_SimpleOptimalityCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminationCriteria_SimpleOptimalityCriteria*>(&to_msg);
  auto& from = static_cast<const TerminationCriteria_SimpleOptimalityCriteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eps_optimal_absolute_ = from._impl_.eps_optimal_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eps_optimal_relative_ = from._impl_.eps_optimal_relative_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminationCriteria_SimpleOptimalityCriteria::CopyFrom(const TerminationCriteria_SimpleOptimalityCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationCriteria_SimpleOptimalityCriteria::IsInitialized() const {
  return true;
}

void TerminationCriteria_SimpleOptimalityCriteria::InternalSwap(TerminationCriteria_SimpleOptimalityCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eps_optimal_absolute_, other->_impl_.eps_optimal_absolute_);
  swap(_impl_.eps_optimal_relative_, other->_impl_.eps_optimal_relative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminationCriteria_SimpleOptimalityCriteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[0]);
}

// ===================================================================

class TerminationCriteria_DetailedOptimalityCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminationCriteria_DetailedOptimalityCriteria>()._impl_._has_bits_);
  static void set_has_eps_optimal_primal_residual_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps_optimal_primal_residual_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_optimal_dual_residual_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_optimal_dual_residual_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eps_optimal_objective_gap_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eps_optimal_objective_gap_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TerminationCriteria_DetailedOptimalityCriteria::TerminationCriteria_DetailedOptimalityCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
}
TerminationCriteria_DetailedOptimalityCriteria::TerminationCriteria_DetailedOptimalityCriteria(const TerminationCriteria_DetailedOptimalityCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminationCriteria_DetailedOptimalityCriteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_primal_residual_absolute_){}
    , decltype(_impl_.eps_optimal_primal_residual_relative_){}
    , decltype(_impl_.eps_optimal_dual_residual_absolute_){}
    , decltype(_impl_.eps_optimal_dual_residual_relative_){}
    , decltype(_impl_.eps_optimal_objective_gap_absolute_){}
    , decltype(_impl_.eps_optimal_objective_gap_relative_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eps_optimal_primal_residual_absolute_, &from._impl_.eps_optimal_primal_residual_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eps_optimal_objective_gap_relative_) -
    reinterpret_cast<char*>(&_impl_.eps_optimal_primal_residual_absolute_)) + sizeof(_impl_.eps_optimal_objective_gap_relative_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
}

inline void TerminationCriteria_DetailedOptimalityCriteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_primal_residual_absolute_){1e-006}
    , decltype(_impl_.eps_optimal_primal_residual_relative_){1e-006}
    , decltype(_impl_.eps_optimal_dual_residual_absolute_){1e-006}
    , decltype(_impl_.eps_optimal_dual_residual_relative_){1e-006}
    , decltype(_impl_.eps_optimal_objective_gap_absolute_){1e-006}
    , decltype(_impl_.eps_optimal_objective_gap_relative_){1e-006}
  };
}

TerminationCriteria_DetailedOptimalityCriteria::~TerminationCriteria_DetailedOptimalityCriteria() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminationCriteria_DetailedOptimalityCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TerminationCriteria_DetailedOptimalityCriteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminationCriteria_DetailedOptimalityCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    _impl_.eps_optimal_primal_residual_absolute_ = 1e-006;
    _impl_.eps_optimal_primal_residual_relative_ = 1e-006;
    _impl_.eps_optimal_dual_residual_absolute_ = 1e-006;
    _impl_.eps_optimal_dual_residual_relative_ = 1e-006;
    _impl_.eps_optimal_objective_gap_absolute_ = 1e-006;
    _impl_.eps_optimal_objective_gap_relative_ = 1e-006;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminationCriteria_DetailedOptimalityCriteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double eps_optimal_primal_residual_absolute = 1 [default = 1e-006];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_eps_optimal_primal_residual_absolute(&has_bits);
          _impl_.eps_optimal_primal_residual_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_primal_residual_relative = 2 [default = 1e-006];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_eps_optimal_primal_residual_relative(&has_bits);
          _impl_.eps_optimal_primal_residual_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_dual_residual_absolute = 3 [default = 1e-006];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_eps_optimal_dual_residual_absolute(&has_bits);
          _impl_.eps_optimal_dual_residual_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_dual_residual_relative = 4 [default = 1e-006];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_eps_optimal_dual_residual_relative(&has_bits);
          _impl_.eps_optimal_dual_residual_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_objective_gap_absolute = 5 [default = 1e-006];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_eps_optimal_objective_gap_absolute(&has_bits);
          _impl_.eps_optimal_objective_gap_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_objective_gap_relative = 6 [default = 1e-006];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_eps_optimal_objective_gap_relative(&has_bits);
          _impl_.eps_optimal_objective_gap_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminationCriteria_DetailedOptimalityCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double eps_optimal_primal_residual_absolute = 1 [default = 1e-006];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_eps_optimal_primal_residual_absolute(), target);
  }

  // optional double eps_optimal_primal_residual_relative = 2 [default = 1e-006];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_optimal_primal_residual_relative(), target);
  }

  // optional double eps_optimal_dual_residual_absolute = 3 [default = 1e-006];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_optimal_dual_residual_absolute(), target);
  }

  // optional double eps_optimal_dual_residual_relative = 4 [default = 1e-006];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_eps_optimal_dual_residual_relative(), target);
  }

  // optional double eps_optimal_objective_gap_absolute = 5 [default = 1e-006];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_eps_optimal_objective_gap_absolute(), target);
  }

  // optional double eps_optimal_objective_gap_relative = 6 [default = 1e-006];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_eps_optimal_objective_gap_relative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  return target;
}

size_t TerminationCriteria_DetailedOptimalityCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double eps_optimal_primal_residual_absolute = 1 [default = 1e-006];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_primal_residual_relative = 2 [default = 1e-006];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_dual_residual_absolute = 3 [default = 1e-006];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_dual_residual_relative = 4 [default = 1e-006];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_objective_gap_absolute = 5 [default = 1e-006];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_objective_gap_relative = 6 [default = 1e-006];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminationCriteria_DetailedOptimalityCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminationCriteria_DetailedOptimalityCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminationCriteria_DetailedOptimalityCriteria::GetClassData() const { return &_class_data_; }


void TerminationCriteria_DetailedOptimalityCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminationCriteria_DetailedOptimalityCriteria*>(&to_msg);
  auto& from = static_cast<const TerminationCriteria_DetailedOptimalityCriteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eps_optimal_primal_residual_absolute_ = from._impl_.eps_optimal_primal_residual_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eps_optimal_primal_residual_relative_ = from._impl_.eps_optimal_primal_residual_relative_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eps_optimal_dual_residual_absolute_ = from._impl_.eps_optimal_dual_residual_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.eps_optimal_dual_residual_relative_ = from._impl_.eps_optimal_dual_residual_relative_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.eps_optimal_objective_gap_absolute_ = from._impl_.eps_optimal_objective_gap_absolute_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.eps_optimal_objective_gap_relative_ = from._impl_.eps_optimal_objective_gap_relative_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminationCriteria_DetailedOptimalityCriteria::CopyFrom(const TerminationCriteria_DetailedOptimalityCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationCriteria_DetailedOptimalityCriteria::IsInitialized() const {
  return true;
}

void TerminationCriteria_DetailedOptimalityCriteria::InternalSwap(TerminationCriteria_DetailedOptimalityCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eps_optimal_primal_residual_absolute_, other->_impl_.eps_optimal_primal_residual_absolute_);
  swap(_impl_.eps_optimal_primal_residual_relative_, other->_impl_.eps_optimal_primal_residual_relative_);
  swap(_impl_.eps_optimal_dual_residual_absolute_, other->_impl_.eps_optimal_dual_residual_absolute_);
  swap(_impl_.eps_optimal_dual_residual_relative_, other->_impl_.eps_optimal_dual_residual_relative_);
  swap(_impl_.eps_optimal_objective_gap_absolute_, other->_impl_.eps_optimal_objective_gap_absolute_);
  swap(_impl_.eps_optimal_objective_gap_relative_, other->_impl_.eps_optimal_objective_gap_relative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminationCriteria_DetailedOptimalityCriteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[1]);
}

// ===================================================================

class TerminationCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminationCriteria>()._impl_._has_bits_);
  static void set_has_optimality_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria& simple_optimality_criteria(const TerminationCriteria* msg);
  static const ::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria& detailed_optimality_criteria(const TerminationCriteria* msg);
  static void set_has_eps_optimal_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps_optimal_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_primal_infeasible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_dual_infeasible(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_sec_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iteration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kkt_matrix_pass_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria&
TerminationCriteria::_Internal::simple_optimality_criteria(const TerminationCriteria* msg) {
  return *msg->_impl_.optimality_criteria_.simple_optimality_criteria_;
}
const ::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria&
TerminationCriteria::_Internal::detailed_optimality_criteria(const TerminationCriteria* msg) {
  return *msg->_impl_.optimality_criteria_.detailed_optimality_criteria_;
}
void TerminationCriteria::set_allocated_simple_optimality_criteria(::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria* simple_optimality_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_optimality_criteria();
  if (simple_optimality_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(simple_optimality_criteria);
    if (message_arena != submessage_arena) {
      simple_optimality_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_optimality_criteria, submessage_arena);
    }
    set_has_simple_optimality_criteria();
    _impl_.optimality_criteria_.simple_optimality_criteria_ = simple_optimality_criteria;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.TerminationCriteria.simple_optimality_criteria)
}
void TerminationCriteria::set_allocated_detailed_optimality_criteria(::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria* detailed_optimality_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_optimality_criteria();
  if (detailed_optimality_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detailed_optimality_criteria);
    if (message_arena != submessage_arena) {
      detailed_optimality_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detailed_optimality_criteria, submessage_arena);
    }
    set_has_detailed_optimality_criteria();
    _impl_.optimality_criteria_.detailed_optimality_criteria_ = detailed_optimality_criteria;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.TerminationCriteria.detailed_optimality_criteria)
}
TerminationCriteria::TerminationCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.TerminationCriteria)
}
TerminationCriteria::TerminationCriteria(const TerminationCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminationCriteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_absolute_){}
    , decltype(_impl_.eps_optimal_relative_){}
    , decltype(_impl_.eps_primal_infeasible_){}
    , decltype(_impl_.optimality_norm_){}
    , decltype(_impl_.iteration_limit_){}
    , decltype(_impl_.eps_dual_infeasible_){}
    , decltype(_impl_.time_sec_limit_){}
    , decltype(_impl_.kkt_matrix_pass_limit_){}
    , decltype(_impl_.optimality_criteria_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eps_optimal_absolute_, &from._impl_.eps_optimal_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kkt_matrix_pass_limit_) -
    reinterpret_cast<char*>(&_impl_.eps_optimal_absolute_)) + sizeof(_impl_.kkt_matrix_pass_limit_));
  clear_has_optimality_criteria();
  switch (from.optimality_criteria_case()) {
    case kSimpleOptimalityCriteria: {
      _this->_internal_mutable_simple_optimality_criteria()->::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria::MergeFrom(
          from._internal_simple_optimality_criteria());
      break;
    }
    case kDetailedOptimalityCriteria: {
      _this->_internal_mutable_detailed_optimality_criteria()->::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria::MergeFrom(
          from._internal_detailed_optimality_criteria());
      break;
    }
    case OPTIMALITY_CRITERIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.TerminationCriteria)
}

inline void TerminationCriteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eps_optimal_absolute_){1e-006}
    , decltype(_impl_.eps_optimal_relative_){1e-006}
    , decltype(_impl_.eps_primal_infeasible_){1e-008}
    , decltype(_impl_.optimality_norm_){2}
    , decltype(_impl_.iteration_limit_){2147483647}
    , decltype(_impl_.eps_dual_infeasible_){1e-008}
    , decltype(_impl_.time_sec_limit_){std::numeric_limits<double>::infinity()}
    , decltype(_impl_.kkt_matrix_pass_limit_){std::numeric_limits<double>::infinity()}
    , decltype(_impl_.optimality_criteria_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optimality_criteria();
}

TerminationCriteria::~TerminationCriteria() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.TerminationCriteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminationCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optimality_criteria()) {
    clear_optimality_criteria();
  }
}

void TerminationCriteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminationCriteria::clear_optimality_criteria() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.pdlp.TerminationCriteria)
  switch (optimality_criteria_case()) {
    case kSimpleOptimalityCriteria: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.optimality_criteria_.simple_optimality_criteria_;
      }
      break;
    }
    case kDetailedOptimalityCriteria: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.optimality_criteria_.detailed_optimality_criteria_;
      }
      break;
    }
    case OPTIMALITY_CRITERIA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIMALITY_CRITERIA_NOT_SET;
}


void TerminationCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.TerminationCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.eps_optimal_absolute_ = 1e-006;
    _impl_.eps_optimal_relative_ = 1e-006;
    _impl_.eps_primal_infeasible_ = 1e-008;
    _impl_.optimality_norm_ = 2;
    _impl_.iteration_limit_ = 2147483647;
    _impl_.eps_dual_infeasible_ = 1e-008;
    _impl_.time_sec_limit_ = std::numeric_limits<double>::infinity();
    _impl_.kkt_matrix_pass_limit_ = std::numeric_limits<double>::infinity();
  }
  clear_optimality_criteria();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminationCriteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::OptimalityNorm_IsValid(val))) {
            _internal_set_optimality_norm(static_cast<::operations_research::pdlp::OptimalityNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_absolute = 2 [default = 1e-006, deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_eps_optimal_absolute(&has_bits);
          _impl_.eps_optimal_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_relative = 3 [default = 1e-006, deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_eps_optimal_relative(&has_bits);
          _impl_.eps_optimal_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_primal_infeasible = 4 [default = 1e-008];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_eps_primal_infeasible(&has_bits);
          _impl_.eps_primal_infeasible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_dual_infeasible = 5 [default = 1e-008];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_eps_dual_infeasible(&has_bits);
          _impl_.eps_dual_infeasible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_sec_limit = 6 [default = inf];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_time_sec_limit(&has_bits);
          _impl_.time_sec_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iteration_limit = 7 [default = 2147483647];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_iteration_limit(&has_bits);
          _impl_.iteration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double kkt_matrix_pass_limit = 8 [default = inf];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_kkt_matrix_pass_limit(&has_bits);
          _impl_.kkt_matrix_pass_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria simple_optimality_criteria = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_optimality_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria detailed_optimality_criteria = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_detailed_optimality_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminationCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.TerminationCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_optimality_norm(), target);
  }

  // optional double eps_optimal_absolute = 2 [default = 1e-006, deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_optimal_absolute(), target);
  }

  // optional double eps_optimal_relative = 3 [default = 1e-006, deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_optimal_relative(), target);
  }

  // optional double eps_primal_infeasible = 4 [default = 1e-008];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_eps_primal_infeasible(), target);
  }

  // optional double eps_dual_infeasible = 5 [default = 1e-008];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_eps_dual_infeasible(), target);
  }

  // optional double time_sec_limit = 6 [default = inf];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_sec_limit(), target);
  }

  // optional int32 iteration_limit = 7 [default = 2147483647];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_iteration_limit(), target);
  }

  // optional double kkt_matrix_pass_limit = 8 [default = inf];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_kkt_matrix_pass_limit(), target);
  }

  switch (optimality_criteria_case()) {
    case kSimpleOptimalityCriteria: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::simple_optimality_criteria(this),
          _Internal::simple_optimality_criteria(this).GetCachedSize(), target, stream);
      break;
    }
    case kDetailedOptimalityCriteria: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::detailed_optimality_criteria(this),
          _Internal::detailed_optimality_criteria(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.TerminationCriteria)
  return target;
}

size_t TerminationCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.TerminationCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double eps_optimal_absolute = 2 [default = 1e-006, deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_relative = 3 [default = 1e-006, deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double eps_primal_infeasible = 4 [default = 1e-008];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optimality_norm());
    }

    // optional int32 iteration_limit = 7 [default = 2147483647];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iteration_limit());
    }

    // optional double eps_dual_infeasible = 5 [default = 1e-008];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double time_sec_limit = 6 [default = inf];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double kkt_matrix_pass_limit = 8 [default = inf];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  switch (optimality_criteria_case()) {
    // .operations_research.pdlp.TerminationCriteria.SimpleOptimalityCriteria simple_optimality_criteria = 9;
    case kSimpleOptimalityCriteria: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optimality_criteria_.simple_optimality_criteria_);
      break;
    }
    // .operations_research.pdlp.TerminationCriteria.DetailedOptimalityCriteria detailed_optimality_criteria = 10;
    case kDetailedOptimalityCriteria: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optimality_criteria_.detailed_optimality_criteria_);
      break;
    }
    case OPTIMALITY_CRITERIA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminationCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminationCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminationCriteria::GetClassData() const { return &_class_data_; }


void TerminationCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminationCriteria*>(&to_msg);
  auto& from = static_cast<const TerminationCriteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.TerminationCriteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eps_optimal_absolute_ = from._impl_.eps_optimal_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eps_optimal_relative_ = from._impl_.eps_optimal_relative_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eps_primal_infeasible_ = from._impl_.eps_primal_infeasible_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.optimality_norm_ = from._impl_.optimality_norm_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.iteration_limit_ = from._impl_.iteration_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.eps_dual_infeasible_ = from._impl_.eps_dual_infeasible_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_sec_limit_ = from._impl_.time_sec_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.kkt_matrix_pass_limit_ = from._impl_.kkt_matrix_pass_limit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.optimality_criteria_case()) {
    case kSimpleOptimalityCriteria: {
      _this->_internal_mutable_simple_optimality_criteria()->::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria::MergeFrom(
          from._internal_simple_optimality_criteria());
      break;
    }
    case kDetailedOptimalityCriteria: {
      _this->_internal_mutable_detailed_optimality_criteria()->::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria::MergeFrom(
          from._internal_detailed_optimality_criteria());
      break;
    }
    case OPTIMALITY_CRITERIA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminationCriteria::CopyFrom(const TerminationCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.TerminationCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationCriteria::IsInitialized() const {
  return true;
}

void TerminationCriteria::InternalSwap(TerminationCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eps_optimal_absolute_, other->_impl_.eps_optimal_absolute_);
  swap(_impl_.eps_optimal_relative_, other->_impl_.eps_optimal_relative_);
  swap(_impl_.eps_primal_infeasible_, other->_impl_.eps_primal_infeasible_);
  swap(_impl_.optimality_norm_, other->_impl_.optimality_norm_);
  swap(_impl_.iteration_limit_, other->_impl_.iteration_limit_);
  swap(_impl_.eps_dual_infeasible_, other->_impl_.eps_dual_infeasible_);
  swap(_impl_.time_sec_limit_, other->_impl_.time_sec_limit_);
  swap(_impl_.kkt_matrix_pass_limit_, other->_impl_.kkt_matrix_pass_limit_);
  swap(_impl_.optimality_criteria_, other->_impl_.optimality_criteria_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminationCriteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[2]);
}

// ===================================================================

class AdaptiveLinesearchParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptiveLinesearchParams>()._impl_._has_bits_);
  static void set_has_step_size_reduction_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step_size_growth_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdaptiveLinesearchParams::AdaptiveLinesearchParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.AdaptiveLinesearchParams)
}
AdaptiveLinesearchParams::AdaptiveLinesearchParams(const AdaptiveLinesearchParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdaptiveLinesearchParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.step_size_reduction_exponent_){}
    , decltype(_impl_.step_size_growth_exponent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.step_size_reduction_exponent_, &from._impl_.step_size_reduction_exponent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_size_growth_exponent_) -
    reinterpret_cast<char*>(&_impl_.step_size_reduction_exponent_)) + sizeof(_impl_.step_size_growth_exponent_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.AdaptiveLinesearchParams)
}

inline void AdaptiveLinesearchParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.step_size_reduction_exponent_){0.3}
    , decltype(_impl_.step_size_growth_exponent_){0.6}
  };
}

AdaptiveLinesearchParams::~AdaptiveLinesearchParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.AdaptiveLinesearchParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdaptiveLinesearchParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdaptiveLinesearchParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdaptiveLinesearchParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.AdaptiveLinesearchParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.step_size_reduction_exponent_ = 0.3;
    _impl_.step_size_growth_exponent_ = 0.6;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveLinesearchParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double step_size_reduction_exponent = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_step_size_reduction_exponent(&has_bits);
          _impl_.step_size_reduction_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size_growth_exponent = 2 [default = 0.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_step_size_growth_exponent(&has_bits);
          _impl_.step_size_growth_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdaptiveLinesearchParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.AdaptiveLinesearchParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double step_size_reduction_exponent = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_step_size_reduction_exponent(), target);
  }

  // optional double step_size_growth_exponent = 2 [default = 0.6];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_step_size_growth_exponent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.AdaptiveLinesearchParams)
  return target;
}

size_t AdaptiveLinesearchParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.AdaptiveLinesearchParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double step_size_reduction_exponent = 1 [default = 0.3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double step_size_growth_exponent = 2 [default = 0.6];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdaptiveLinesearchParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdaptiveLinesearchParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdaptiveLinesearchParams::GetClassData() const { return &_class_data_; }


void AdaptiveLinesearchParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdaptiveLinesearchParams*>(&to_msg);
  auto& from = static_cast<const AdaptiveLinesearchParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.AdaptiveLinesearchParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.step_size_reduction_exponent_ = from._impl_.step_size_reduction_exponent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.step_size_growth_exponent_ = from._impl_.step_size_growth_exponent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdaptiveLinesearchParams::CopyFrom(const AdaptiveLinesearchParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.AdaptiveLinesearchParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveLinesearchParams::IsInitialized() const {
  return true;
}

void AdaptiveLinesearchParams::InternalSwap(AdaptiveLinesearchParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.step_size_reduction_exponent_, other->_impl_.step_size_reduction_exponent_);
  swap(_impl_.step_size_growth_exponent_, other->_impl_.step_size_growth_exponent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveLinesearchParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[3]);
}

// ===================================================================

class MalitskyPockParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MalitskyPockParams>()._impl_._has_bits_);
  static void set_has_step_size_downscaling_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linesearch_contraction_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_step_size_interpolation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MalitskyPockParams::MalitskyPockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.MalitskyPockParams)
}
MalitskyPockParams::MalitskyPockParams(const MalitskyPockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MalitskyPockParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.step_size_downscaling_factor_){}
    , decltype(_impl_.linesearch_contraction_factor_){}
    , decltype(_impl_.step_size_interpolation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.step_size_downscaling_factor_, &from._impl_.step_size_downscaling_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_size_interpolation_) -
    reinterpret_cast<char*>(&_impl_.step_size_downscaling_factor_)) + sizeof(_impl_.step_size_interpolation_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.MalitskyPockParams)
}

inline void MalitskyPockParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.step_size_downscaling_factor_){0.7}
    , decltype(_impl_.linesearch_contraction_factor_){0.99}
    , decltype(_impl_.step_size_interpolation_){1}
  };
}

MalitskyPockParams::~MalitskyPockParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.MalitskyPockParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MalitskyPockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MalitskyPockParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MalitskyPockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.MalitskyPockParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.step_size_downscaling_factor_ = 0.7;
    _impl_.linesearch_contraction_factor_ = 0.99;
    _impl_.step_size_interpolation_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MalitskyPockParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double step_size_downscaling_factor = 1 [default = 0.7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_step_size_downscaling_factor(&has_bits);
          _impl_.step_size_downscaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double linesearch_contraction_factor = 2 [default = 0.99];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_linesearch_contraction_factor(&has_bits);
          _impl_.linesearch_contraction_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size_interpolation = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_step_size_interpolation(&has_bits);
          _impl_.step_size_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MalitskyPockParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.MalitskyPockParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double step_size_downscaling_factor = 1 [default = 0.7];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_step_size_downscaling_factor(), target);
  }

  // optional double linesearch_contraction_factor = 2 [default = 0.99];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_linesearch_contraction_factor(), target);
  }

  // optional double step_size_interpolation = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_step_size_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.MalitskyPockParams)
  return target;
}

size_t MalitskyPockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.MalitskyPockParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double step_size_downscaling_factor = 1 [default = 0.7];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double linesearch_contraction_factor = 2 [default = 0.99];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double step_size_interpolation = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MalitskyPockParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MalitskyPockParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MalitskyPockParams::GetClassData() const { return &_class_data_; }


void MalitskyPockParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MalitskyPockParams*>(&to_msg);
  auto& from = static_cast<const MalitskyPockParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.MalitskyPockParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.step_size_downscaling_factor_ = from._impl_.step_size_downscaling_factor_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.linesearch_contraction_factor_ = from._impl_.linesearch_contraction_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.step_size_interpolation_ = from._impl_.step_size_interpolation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MalitskyPockParams::CopyFrom(const MalitskyPockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.MalitskyPockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalitskyPockParams::IsInitialized() const {
  return true;
}

void MalitskyPockParams::InternalSwap(MalitskyPockParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.step_size_downscaling_factor_, other->_impl_.step_size_downscaling_factor_);
  swap(_impl_.linesearch_contraction_factor_, other->_impl_.linesearch_contraction_factor_);
  swap(_impl_.step_size_interpolation_, other->_impl_.step_size_interpolation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MalitskyPockParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[4]);
}

// ===================================================================

class PrimalDualHybridGradientParams_PresolveOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimalDualHybridGradientParams_PresolveOptions>()._impl_._has_bits_);
  static void set_has_use_glop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::glop::GlopParameters& glop_parameters(const PrimalDualHybridGradientParams_PresolveOptions* msg);
  static void set_has_glop_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::operations_research::glop::GlopParameters&
PrimalDualHybridGradientParams_PresolveOptions::_Internal::glop_parameters(const PrimalDualHybridGradientParams_PresolveOptions* msg) {
  return *msg->_impl_.glop_parameters_;
}
void PrimalDualHybridGradientParams_PresolveOptions::clear_glop_parameters() {
  if (_impl_.glop_parameters_ != nullptr) _impl_.glop_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
}
PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(const PrimalDualHybridGradientParams_PresolveOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimalDualHybridGradientParams_PresolveOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.glop_parameters_){nullptr}
    , decltype(_impl_.use_glop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_glop_parameters()) {
    _this->_impl_.glop_parameters_ = new ::operations_research::glop::GlopParameters(*from._impl_.glop_parameters_);
  }
  _this->_impl_.use_glop_ = from._impl_.use_glop_;
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
}

inline void PrimalDualHybridGradientParams_PresolveOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.glop_parameters_){nullptr}
    , decltype(_impl_.use_glop_){false}
  };
}

PrimalDualHybridGradientParams_PresolveOptions::~PrimalDualHybridGradientParams_PresolveOptions() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimalDualHybridGradientParams_PresolveOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.glop_parameters_;
}

void PrimalDualHybridGradientParams_PresolveOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimalDualHybridGradientParams_PresolveOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.glop_parameters_ != nullptr);
    _impl_.glop_parameters_->Clear();
  }
  _impl_.use_glop_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimalDualHybridGradientParams_PresolveOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_glop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_glop(&has_bits);
          _impl_.use_glop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.glop.GlopParameters glop_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_glop_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimalDualHybridGradientParams_PresolveOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_glop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_glop(), target);
  }

  // optional .operations_research.glop.GlopParameters glop_parameters = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::glop_parameters(this),
        _Internal::glop_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  return target;
}

size_t PrimalDualHybridGradientParams_PresolveOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .operations_research.glop.GlopParameters glop_parameters = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.glop_parameters_);
    }

    // optional bool use_glop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimalDualHybridGradientParams_PresolveOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimalDualHybridGradientParams_PresolveOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimalDualHybridGradientParams_PresolveOptions::GetClassData() const { return &_class_data_; }


void PrimalDualHybridGradientParams_PresolveOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimalDualHybridGradientParams_PresolveOptions*>(&to_msg);
  auto& from = static_cast<const PrimalDualHybridGradientParams_PresolveOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_glop_parameters()->::operations_research::glop::GlopParameters::MergeFrom(
          from._internal_glop_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.use_glop_ = from._impl_.use_glop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimalDualHybridGradientParams_PresolveOptions::CopyFrom(const PrimalDualHybridGradientParams_PresolveOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualHybridGradientParams_PresolveOptions::IsInitialized() const {
  return true;
}

void PrimalDualHybridGradientParams_PresolveOptions::InternalSwap(PrimalDualHybridGradientParams_PresolveOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams_PresolveOptions, _impl_.use_glop_)
      + sizeof(PrimalDualHybridGradientParams_PresolveOptions::_impl_.use_glop_)
      - PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams_PresolveOptions, _impl_.glop_parameters_)>(
          reinterpret_cast<char*>(&_impl_.glop_parameters_),
          reinterpret_cast<char*>(&other->_impl_.glop_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimalDualHybridGradientParams_PresolveOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[5]);
}

// ===================================================================

class PrimalDualHybridGradientParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimalDualHybridGradientParams>()._impl_._has_bits_);
  static const ::operations_research::pdlp::TerminationCriteria& termination_criteria(const PrimalDualHybridGradientParams* msg);
  static void set_has_termination_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_shards(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_record_iteration_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_verbosity_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_major_iteration_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_termination_check_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_restart_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_primal_weight_update_smoothing(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_initial_primal_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions& presolve_options(const PrimalDualHybridGradientParams* msg);
  static void set_has_presolve_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l_inf_ruiz_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_l2_norm_rescaling(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sufficient_reduction_for_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_necessary_reduction_for_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_linesearch_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::operations_research::pdlp::AdaptiveLinesearchParams& adaptive_linesearch_parameters(const PrimalDualHybridGradientParams* msg);
  static void set_has_adaptive_linesearch_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::operations_research::pdlp::MalitskyPockParams& malitsky_pock_parameters(const PrimalDualHybridGradientParams* msg);
  static void set_has_malitsky_pock_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_step_size_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_infinite_constraint_bound_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_handle_some_primal_gradients_on_finite_bounds_as_residuals(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_diagonal_qp_trust_region_solver(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_diagonal_qp_trust_region_solver_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::operations_research::pdlp::TerminationCriteria&
PrimalDualHybridGradientParams::_Internal::termination_criteria(const PrimalDualHybridGradientParams* msg) {
  return *msg->_impl_.termination_criteria_;
}
const ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions&
PrimalDualHybridGradientParams::_Internal::presolve_options(const PrimalDualHybridGradientParams* msg) {
  return *msg->_impl_.presolve_options_;
}
const ::operations_research::pdlp::AdaptiveLinesearchParams&
PrimalDualHybridGradientParams::_Internal::adaptive_linesearch_parameters(const PrimalDualHybridGradientParams* msg) {
  return *msg->_impl_.adaptive_linesearch_parameters_;
}
const ::operations_research::pdlp::MalitskyPockParams&
PrimalDualHybridGradientParams::_Internal::malitsky_pock_parameters(const PrimalDualHybridGradientParams* msg) {
  return *msg->_impl_.malitsky_pock_parameters_;
}
PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.PrimalDualHybridGradientParams)
}
PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(const PrimalDualHybridGradientParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimalDualHybridGradientParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_projection_seeds_){from._impl_.random_projection_seeds_}
    , /*decltype(_impl_._random_projection_seeds_cached_byte_size_)*/{0}
    , decltype(_impl_.termination_criteria_){nullptr}
    , decltype(_impl_.presolve_options_){nullptr}
    , decltype(_impl_.adaptive_linesearch_parameters_){nullptr}
    , decltype(_impl_.malitsky_pock_parameters_){nullptr}
    , decltype(_impl_.initial_primal_weight_){}
    , decltype(_impl_.record_iteration_stats_){}
    , decltype(_impl_.use_diagonal_qp_trust_region_solver_){}
    , decltype(_impl_.verbosity_level_){}
    , decltype(_impl_.num_shards_){}
    , decltype(_impl_.l2_norm_rescaling_){}
    , decltype(_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_){}
    , decltype(_impl_.num_threads_){}
    , decltype(_impl_.major_iteration_frequency_){}
    , decltype(_impl_.termination_check_frequency_){}
    , decltype(_impl_.restart_strategy_){}
    , decltype(_impl_.primal_weight_update_smoothing_){}
    , decltype(_impl_.l_inf_ruiz_iterations_){}
    , decltype(_impl_.linesearch_rule_){}
    , decltype(_impl_.sufficient_reduction_for_restart_){}
    , decltype(_impl_.necessary_reduction_for_restart_){}
    , decltype(_impl_.infinite_constraint_bound_threshold_){}
    , decltype(_impl_.diagonal_qp_trust_region_solver_tolerance_){}
    , decltype(_impl_.initial_step_size_scaling_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_termination_criteria()) {
    _this->_impl_.termination_criteria_ = new ::operations_research::pdlp::TerminationCriteria(*from._impl_.termination_criteria_);
  }
  if (from._internal_has_presolve_options()) {
    _this->_impl_.presolve_options_ = new ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions(*from._impl_.presolve_options_);
  }
  if (from._internal_has_adaptive_linesearch_parameters()) {
    _this->_impl_.adaptive_linesearch_parameters_ = new ::operations_research::pdlp::AdaptiveLinesearchParams(*from._impl_.adaptive_linesearch_parameters_);
  }
  if (from._internal_has_malitsky_pock_parameters()) {
    _this->_impl_.malitsky_pock_parameters_ = new ::operations_research::pdlp::MalitskyPockParams(*from._impl_.malitsky_pock_parameters_);
  }
  ::memcpy(&_impl_.initial_primal_weight_, &from._impl_.initial_primal_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_step_size_scaling_) -
    reinterpret_cast<char*>(&_impl_.initial_primal_weight_)) + sizeof(_impl_.initial_step_size_scaling_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.PrimalDualHybridGradientParams)
}

inline void PrimalDualHybridGradientParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_projection_seeds_){arena}
    , /*decltype(_impl_._random_projection_seeds_cached_byte_size_)*/{0}
    , decltype(_impl_.termination_criteria_){nullptr}
    , decltype(_impl_.presolve_options_){nullptr}
    , decltype(_impl_.adaptive_linesearch_parameters_){nullptr}
    , decltype(_impl_.malitsky_pock_parameters_){nullptr}
    , decltype(_impl_.initial_primal_weight_){0}
    , decltype(_impl_.record_iteration_stats_){false}
    , decltype(_impl_.use_diagonal_qp_trust_region_solver_){false}
    , decltype(_impl_.verbosity_level_){0}
    , decltype(_impl_.num_shards_){0}
    , decltype(_impl_.l2_norm_rescaling_){true}
    , decltype(_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_){true}
    , decltype(_impl_.num_threads_){1}
    , decltype(_impl_.major_iteration_frequency_){64}
    , decltype(_impl_.termination_check_frequency_){64}
    , decltype(_impl_.restart_strategy_){3}
    , decltype(_impl_.primal_weight_update_smoothing_){0.5}
    , decltype(_impl_.l_inf_ruiz_iterations_){5}
    , decltype(_impl_.linesearch_rule_){1}
    , decltype(_impl_.sufficient_reduction_for_restart_){0.1}
    , decltype(_impl_.necessary_reduction_for_restart_){0.9}
    , decltype(_impl_.infinite_constraint_bound_threshold_){std::numeric_limits<double>::infinity()}
    , decltype(_impl_.diagonal_qp_trust_region_solver_tolerance_){1e-008}
    , decltype(_impl_.initial_step_size_scaling_){1}
  };
}

PrimalDualHybridGradientParams::~PrimalDualHybridGradientParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.PrimalDualHybridGradientParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimalDualHybridGradientParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_projection_seeds_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.termination_criteria_;
  if (this != internal_default_instance()) delete _impl_.presolve_options_;
  if (this != internal_default_instance()) delete _impl_.adaptive_linesearch_parameters_;
  if (this != internal_default_instance()) delete _impl_.malitsky_pock_parameters_;
}

void PrimalDualHybridGradientParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimalDualHybridGradientParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.random_projection_seeds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.termination_criteria_ != nullptr);
      _impl_.termination_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.presolve_options_ != nullptr);
      _impl_.presolve_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.adaptive_linesearch_parameters_ != nullptr);
      _impl_.adaptive_linesearch_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.malitsky_pock_parameters_ != nullptr);
      _impl_.malitsky_pock_parameters_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.initial_primal_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.verbosity_level_) -
        reinterpret_cast<char*>(&_impl_.initial_primal_weight_)) + sizeof(_impl_.verbosity_level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.num_shards_ = 0;
    _impl_.l2_norm_rescaling_ = true;
    _impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_ = true;
    _impl_.num_threads_ = 1;
    _impl_.major_iteration_frequency_ = 64;
    _impl_.termination_check_frequency_ = 64;
    _impl_.restart_strategy_ = 3;
    _impl_.primal_weight_update_smoothing_ = 0.5;
  }
  if (cached_has_bits & 0x007f0000u) {
    _impl_.l_inf_ruiz_iterations_ = 5;
    _impl_.linesearch_rule_ = 1;
    _impl_.sufficient_reduction_for_restart_ = 0.1;
    _impl_.necessary_reduction_for_restart_ = 0.9;
    _impl_.infinite_constraint_bound_threshold_ = std::numeric_limits<double>::infinity();
    _impl_.diagonal_qp_trust_region_solver_tolerance_ = 1e-008;
    _impl_.initial_step_size_scaling_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimalDualHybridGradientParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_termination_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_threads = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_threads(&has_bits);
          _impl_.num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool record_iteration_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_record_iteration_stats(&has_bits);
          _impl_.record_iteration_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_iteration_frequency = 4 [default = 64];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_major_iteration_frequency(&has_bits);
          _impl_.major_iteration_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 termination_check_frequency = 5 [default = 64];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_termination_check_frequency(&has_bits);
          _impl_.termination_check_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PrimalDualHybridGradientParams_RestartStrategy_IsValid(val))) {
            _internal_set_restart_strategy(static_cast<::operations_research::pdlp::PrimalDualHybridGradientParams_RestartStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double primal_weight_update_smoothing = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_primal_weight_update_smoothing(&has_bits);
          _impl_.primal_weight_update_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double initial_primal_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_initial_primal_weight(&has_bits);
          _impl_.initial_primal_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_l_inf_ruiz_iterations(&has_bits);
          _impl_.l_inf_ruiz_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool l2_norm_rescaling = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_l2_norm_rescaling(&has_bits);
          _impl_.l2_norm_rescaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_sufficient_reduction_for_restart(&has_bits);
          _impl_.sufficient_reduction_for_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PrimalDualHybridGradientParams_LinesearchRule_IsValid(val))) {
            _internal_set_linesearch_rule(static_cast<::operations_research::pdlp::PrimalDualHybridGradientParams_LinesearchRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_presolve_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double necessary_reduction_for_restart = 17 [default = 0.9];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_necessary_reduction_for_restart(&has_bits);
          _impl_.necessary_reduction_for_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_linesearch_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_malitsky_pock_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double infinite_constraint_bound_threshold = 22 [default = inf];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_infinite_constraint_bound_threshold(&has_bits);
          _impl_.infinite_constraint_bound_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_diagonal_qp_trust_region_solver(&has_bits);
          _impl_.use_diagonal_qp_trust_region_solver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-008];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_diagonal_qp_trust_region_solver_tolerance(&has_bits);
          _impl_.diagonal_qp_trust_region_solver_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double initial_step_size_scaling = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_initial_step_size_scaling(&has_bits);
          _impl_.initial_step_size_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 verbosity_level = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_verbosity_level(&has_bits);
          _impl_.verbosity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_shards = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_num_shards(&has_bits);
          _impl_.num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 random_projection_seeds = 28 [packed = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_random_projection_seeds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 224) {
          _internal_add_random_projection_seeds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool handle_some_primal_gradients_on_finite_bounds_as_residuals = 29 [default = true];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_handle_some_primal_gradients_on_finite_bounds_as_residuals(&has_bits);
          _impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimalDualHybridGradientParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::termination_criteria(this),
        _Internal::termination_criteria(this).GetCachedSize(), target, stream);
  }

  // optional int32 num_threads = 2 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_threads(), target);
  }

  // optional bool record_iteration_stats = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_record_iteration_stats(), target);
  }

  // optional int32 major_iteration_frequency = 4 [default = 64];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_major_iteration_frequency(), target);
  }

  // optional int32 termination_check_frequency = 5 [default = 64];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_termination_check_frequency(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_restart_strategy(), target);
  }

  // optional double primal_weight_update_smoothing = 7 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_primal_weight_update_smoothing(), target);
  }

  // optional double initial_primal_weight = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_initial_primal_weight(), target);
  }

  // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_l_inf_ruiz_iterations(), target);
  }

  // optional bool l2_norm_rescaling = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_l2_norm_rescaling(), target);
  }

  // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_sufficient_reduction_for_restart(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_linesearch_rule(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::presolve_options(this),
        _Internal::presolve_options(this).GetCachedSize(), target, stream);
  }

  // optional double necessary_reduction_for_restart = 17 [default = 0.9];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_necessary_reduction_for_restart(), target);
  }

  // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::adaptive_linesearch_parameters(this),
        _Internal::adaptive_linesearch_parameters(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::malitsky_pock_parameters(this),
        _Internal::malitsky_pock_parameters(this).GetCachedSize(), target, stream);
  }

  // optional double infinite_constraint_bound_threshold = 22 [default = inf];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_infinite_constraint_bound_threshold(), target);
  }

  // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_use_diagonal_qp_trust_region_solver(), target);
  }

  // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-008];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_diagonal_qp_trust_region_solver_tolerance(), target);
  }

  // optional double initial_step_size_scaling = 25 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_initial_step_size_scaling(), target);
  }

  // optional int32 verbosity_level = 26 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_verbosity_level(), target);
  }

  // optional int32 num_shards = 27 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_shards(), target);
  }

  // repeated int32 random_projection_seeds = 28 [packed = true];
  {
    int byte_size = _impl_._random_projection_seeds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          28, _internal_random_projection_seeds(), byte_size, target);
    }
  }

  // optional bool handle_some_primal_gradients_on_finite_bounds_as_residuals = 29 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_handle_some_primal_gradients_on_finite_bounds_as_residuals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.PrimalDualHybridGradientParams)
  return target;
}

size_t PrimalDualHybridGradientParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 random_projection_seeds = 28 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.random_projection_seeds_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._random_projection_seeds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.termination_criteria_);
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.presolve_options_);
    }

    // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adaptive_linesearch_parameters_);
    }

    // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.malitsky_pock_parameters_);
    }

    // optional double initial_primal_weight = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool record_iteration_stats = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 verbosity_level = 26 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_verbosity_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 num_shards = 27 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_num_shards());
    }

    // optional bool l2_norm_rescaling = 10 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool handle_some_primal_gradients_on_finite_bounds_as_residuals = 29 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 num_threads = 2 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_threads());
    }

    // optional int32 major_iteration_frequency = 4 [default = 64];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_major_iteration_frequency());
    }

    // optional int32 termination_check_frequency = 5 [default = 64];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_termination_check_frequency());
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_restart_strategy());
    }

    // optional double primal_weight_update_smoothing = 7 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_l_inf_ruiz_iterations());
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_linesearch_rule());
    }

    // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double necessary_reduction_for_restart = 17 [default = 0.9];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double infinite_constraint_bound_threshold = 22 [default = inf];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-008];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double initial_step_size_scaling = 25 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimalDualHybridGradientParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimalDualHybridGradientParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimalDualHybridGradientParams::GetClassData() const { return &_class_data_; }


void PrimalDualHybridGradientParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimalDualHybridGradientParams*>(&to_msg);
  auto& from = static_cast<const PrimalDualHybridGradientParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.random_projection_seeds_.MergeFrom(from._impl_.random_projection_seeds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_termination_criteria()->::operations_research::pdlp::TerminationCriteria::MergeFrom(
          from._internal_termination_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_presolve_options()->::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions::MergeFrom(
          from._internal_presolve_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_adaptive_linesearch_parameters()->::operations_research::pdlp::AdaptiveLinesearchParams::MergeFrom(
          from._internal_adaptive_linesearch_parameters());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_malitsky_pock_parameters()->::operations_research::pdlp::MalitskyPockParams::MergeFrom(
          from._internal_malitsky_pock_parameters());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.initial_primal_weight_ = from._impl_.initial_primal_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.record_iteration_stats_ = from._impl_.record_iteration_stats_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.use_diagonal_qp_trust_region_solver_ = from._impl_.use_diagonal_qp_trust_region_solver_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.verbosity_level_ = from._impl_.verbosity_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.num_shards_ = from._impl_.num_shards_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.l2_norm_rescaling_ = from._impl_.l2_norm_rescaling_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_ = from._impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.num_threads_ = from._impl_.num_threads_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.major_iteration_frequency_ = from._impl_.major_iteration_frequency_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.termination_check_frequency_ = from._impl_.termination_check_frequency_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.restart_strategy_ = from._impl_.restart_strategy_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.primal_weight_update_smoothing_ = from._impl_.primal_weight_update_smoothing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.l_inf_ruiz_iterations_ = from._impl_.l_inf_ruiz_iterations_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.linesearch_rule_ = from._impl_.linesearch_rule_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.sufficient_reduction_for_restart_ = from._impl_.sufficient_reduction_for_restart_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.necessary_reduction_for_restart_ = from._impl_.necessary_reduction_for_restart_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.infinite_constraint_bound_threshold_ = from._impl_.infinite_constraint_bound_threshold_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.diagonal_qp_trust_region_solver_tolerance_ = from._impl_.diagonal_qp_trust_region_solver_tolerance_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.initial_step_size_scaling_ = from._impl_.initial_step_size_scaling_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimalDualHybridGradientParams::CopyFrom(const PrimalDualHybridGradientParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualHybridGradientParams::IsInitialized() const {
  return true;
}

void PrimalDualHybridGradientParams::InternalSwap(PrimalDualHybridGradientParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.random_projection_seeds_.InternalSwap(&other->_impl_.random_projection_seeds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams, _impl_.num_shards_)
      + sizeof(PrimalDualHybridGradientParams::_impl_.num_shards_)
      - PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams, _impl_.termination_criteria_)>(
          reinterpret_cast<char*>(&_impl_.termination_criteria_),
          reinterpret_cast<char*>(&other->_impl_.termination_criteria_));
  swap(_impl_.l2_norm_rescaling_, other->_impl_.l2_norm_rescaling_);
  swap(_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_, other->_impl_.handle_some_primal_gradients_on_finite_bounds_as_residuals_);
  swap(_impl_.num_threads_, other->_impl_.num_threads_);
  swap(_impl_.major_iteration_frequency_, other->_impl_.major_iteration_frequency_);
  swap(_impl_.termination_check_frequency_, other->_impl_.termination_check_frequency_);
  swap(_impl_.restart_strategy_, other->_impl_.restart_strategy_);
  swap(_impl_.primal_weight_update_smoothing_, other->_impl_.primal_weight_update_smoothing_);
  swap(_impl_.l_inf_ruiz_iterations_, other->_impl_.l_inf_ruiz_iterations_);
  swap(_impl_.linesearch_rule_, other->_impl_.linesearch_rule_);
  swap(_impl_.sufficient_reduction_for_restart_, other->_impl_.sufficient_reduction_for_restart_);
  swap(_impl_.necessary_reduction_for_restart_, other->_impl_.necessary_reduction_for_restart_);
  swap(_impl_.infinite_constraint_bound_threshold_, other->_impl_.infinite_constraint_bound_threshold_);
  swap(_impl_.diagonal_qp_trust_region_solver_tolerance_, other->_impl_.diagonal_qp_trust_region_solver_tolerance_);
  swap(_impl_.initial_step_size_scaling_, other->_impl_.initial_step_size_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimalDualHybridGradientParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pdlp
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria*
Arena::CreateMaybeMessage< ::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::TerminationCriteria_SimpleOptimalityCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria*
Arena::CreateMaybeMessage< ::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::TerminationCriteria_DetailedOptimalityCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::TerminationCriteria*
Arena::CreateMaybeMessage< ::operations_research::pdlp::TerminationCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::TerminationCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::AdaptiveLinesearchParams*
Arena::CreateMaybeMessage< ::operations_research::pdlp::AdaptiveLinesearchParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::AdaptiveLinesearchParams >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::MalitskyPockParams*
Arena::CreateMaybeMessage< ::operations_research::pdlp::MalitskyPockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::MalitskyPockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions*
Arena::CreateMaybeMessage< ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::PrimalDualHybridGradientParams*
Arena::CreateMaybeMessage< ::operations_research::pdlp::PrimalDualHybridGradientParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::PrimalDualHybridGradientParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
