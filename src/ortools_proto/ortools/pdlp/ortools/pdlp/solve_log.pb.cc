// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/pdlp/solve_log.proto

#include "ortools/pdlp/solve_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
namespace pdlp {
PROTOBUF_CONSTEXPR QuadraticProgramStats::QuadraticProgramStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_variables_)*/int64_t{0}
  , /*decltype(_impl_.num_constraints_)*/int64_t{0}
  , /*decltype(_impl_.constraint_matrix_col_min_l_inf_norm_)*/0
  , /*decltype(_impl_.constraint_matrix_row_min_l_inf_norm_)*/0
  , /*decltype(_impl_.constraint_matrix_num_nonzeros_)*/int64_t{0}
  , /*decltype(_impl_.constraint_matrix_abs_max_)*/0
  , /*decltype(_impl_.constraint_matrix_abs_min_)*/0
  , /*decltype(_impl_.constraint_matrix_abs_avg_)*/0
  , /*decltype(_impl_.combined_bounds_max_)*/0
  , /*decltype(_impl_.combined_bounds_min_)*/0
  , /*decltype(_impl_.combined_bounds_avg_)*/0
  , /*decltype(_impl_.variable_bound_gaps_num_finite_)*/int64_t{0}
  , /*decltype(_impl_.variable_bound_gaps_max_)*/0
  , /*decltype(_impl_.variable_bound_gaps_min_)*/0
  , /*decltype(_impl_.variable_bound_gaps_avg_)*/0
  , /*decltype(_impl_.objective_vector_abs_max_)*/0
  , /*decltype(_impl_.objective_vector_abs_min_)*/0
  , /*decltype(_impl_.objective_vector_abs_avg_)*/0
  , /*decltype(_impl_.objective_matrix_num_nonzeros_)*/int64_t{0}
  , /*decltype(_impl_.objective_matrix_abs_max_)*/0
  , /*decltype(_impl_.objective_matrix_abs_min_)*/0
  , /*decltype(_impl_.objective_matrix_abs_avg_)*/0
  , /*decltype(_impl_.objective_vector_l2_norm_)*/0
  , /*decltype(_impl_.combined_bounds_l2_norm_)*/0
  , /*decltype(_impl_.constraint_matrix_l2_norm_)*/0
  , /*decltype(_impl_.variable_bound_gaps_l2_norm_)*/0
  , /*decltype(_impl_.objective_matrix_l2_norm_)*/0} {}
struct QuadraticProgramStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuadraticProgramStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuadraticProgramStatsDefaultTypeInternal() {}
  union {
    QuadraticProgramStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuadraticProgramStatsDefaultTypeInternal _QuadraticProgramStats_default_instance_;
PROTOBUF_CONSTEXPR ConvergenceInformation::ConvergenceInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primal_objective_)*/0
  , /*decltype(_impl_.dual_objective_)*/0
  , /*decltype(_impl_.corrected_dual_objective_)*/0
  , /*decltype(_impl_.l_inf_primal_residual_)*/0
  , /*decltype(_impl_.l2_primal_residual_)*/0
  , /*decltype(_impl_.l_inf_dual_residual_)*/0
  , /*decltype(_impl_.l2_dual_residual_)*/0
  , /*decltype(_impl_.l_inf_primal_variable_)*/0
  , /*decltype(_impl_.l2_primal_variable_)*/0
  , /*decltype(_impl_.l_inf_dual_variable_)*/0
  , /*decltype(_impl_.l2_dual_variable_)*/0
  , /*decltype(_impl_.l_inf_componentwise_primal_residual_)*/0
  , /*decltype(_impl_.l_inf_componentwise_dual_residual_)*/0
  , /*decltype(_impl_.candidate_type_)*/0} {}
struct ConvergenceInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvergenceInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvergenceInformationDefaultTypeInternal() {}
  union {
    ConvergenceInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvergenceInformationDefaultTypeInternal _ConvergenceInformation_default_instance_;
PROTOBUF_CONSTEXPR InfeasibilityInformation::InfeasibilityInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_primal_ray_infeasibility_)*/0
  , /*decltype(_impl_.primal_ray_linear_objective_)*/0
  , /*decltype(_impl_.primal_ray_quadratic_norm_)*/0
  , /*decltype(_impl_.max_dual_ray_infeasibility_)*/0
  , /*decltype(_impl_.dual_ray_objective_)*/0
  , /*decltype(_impl_.candidate_type_)*/0} {}
struct InfeasibilityInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfeasibilityInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfeasibilityInformationDefaultTypeInternal() {}
  union {
    InfeasibilityInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfeasibilityInformationDefaultTypeInternal _InfeasibilityInformation_default_instance_;
PROTOBUF_CONSTEXPR PointMetadata::PointMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.random_primal_projections_)*/{}
  , /*decltype(_impl_.random_dual_projections_)*/{}
  , /*decltype(_impl_.active_primal_variable_count_)*/int64_t{0}
  , /*decltype(_impl_.active_dual_variable_count_)*/int64_t{0}
  , /*decltype(_impl_.active_primal_variable_change_)*/int64_t{0}
  , /*decltype(_impl_.active_dual_variable_change_)*/int64_t{0}
  , /*decltype(_impl_.point_type_)*/0} {}
struct PointMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointMetadataDefaultTypeInternal() {}
  union {
    PointMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointMetadataDefaultTypeInternal _PointMetadata_default_instance_;
PROTOBUF_CONSTEXPR IterationStats::IterationStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.convergence_information_)*/{}
  , /*decltype(_impl_.infeasibility_information_)*/{}
  , /*decltype(_impl_.point_metadata_)*/{}
  , /*decltype(_impl_.iteration_number_)*/0
  , /*decltype(_impl_.cumulative_rejected_steps_)*/0
  , /*decltype(_impl_.cumulative_kkt_matrix_passes_)*/0
  , /*decltype(_impl_.cumulative_time_sec_)*/0
  , /*decltype(_impl_.step_size_)*/0
  , /*decltype(_impl_.primal_weight_)*/0
  , /*decltype(_impl_.restart_used_)*/0} {}
struct IterationStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IterationStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IterationStatsDefaultTypeInternal() {}
  union {
    IterationStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IterationStatsDefaultTypeInternal _IterationStats_default_instance_;
PROTOBUF_CONSTEXPR SolveLog::SolveLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteration_stats_)*/{}
  , /*decltype(_impl_.instance_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.termination_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solution_stats_)*/nullptr
  , /*decltype(_impl_.original_problem_stats_)*/nullptr
  , /*decltype(_impl_.preprocessed_problem_stats_)*/nullptr
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.termination_reason_)*/0
  , /*decltype(_impl_.iteration_count_)*/0
  , /*decltype(_impl_.solve_time_sec_)*/0
  , /*decltype(_impl_.preprocessing_time_sec_)*/0
  , /*decltype(_impl_.solution_type_)*/0} {}
struct SolveLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SolveLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SolveLogDefaultTypeInternal() {}
  union {
    SolveLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SolveLogDefaultTypeInternal _SolveLog_default_instance_;
}  // namespace pdlp
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.num_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.num_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_col_min_l_inf_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_row_min_l_inf_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_num_nonzeros_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_abs_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_abs_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_abs_avg_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.constraint_matrix_l2_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.combined_bounds_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.combined_bounds_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.combined_bounds_avg_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.combined_bounds_l2_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.variable_bound_gaps_num_finite_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.variable_bound_gaps_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.variable_bound_gaps_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.variable_bound_gaps_avg_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.variable_bound_gaps_l2_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_vector_abs_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_vector_abs_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_vector_abs_avg_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_vector_l2_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_matrix_num_nonzeros_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_matrix_abs_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_matrix_abs_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_matrix_abs_avg_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::QuadraticProgramStats, _impl_.objective_matrix_l2_norm_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  24,
  8,
  9,
  10,
  23,
  11,
  12,
  13,
  14,
  25,
  15,
  16,
  17,
  22,
  18,
  19,
  20,
  21,
  26,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.candidate_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.primal_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.dual_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.corrected_dual_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_primal_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l2_primal_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_componentwise_primal_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_dual_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l2_dual_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_componentwise_dual_residual_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_primal_variable_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l2_primal_variable_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l_inf_dual_variable_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::ConvergenceInformation, _impl_.l2_dual_variable_),
  13,
  0,
  1,
  2,
  3,
  4,
  11,
  5,
  6,
  12,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.max_primal_ray_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.primal_ray_linear_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.primal_ray_quadratic_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.max_dual_ray_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.dual_ray_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::InfeasibilityInformation, _impl_.candidate_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.point_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.random_primal_projections_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.random_dual_projections_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.active_primal_variable_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.active_dual_variable_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.active_primal_variable_change_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PointMetadata, _impl_.active_dual_variable_change_),
  4,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.iteration_number_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.convergence_information_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.infeasibility_information_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.point_metadata_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.cumulative_kkt_matrix_passes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.cumulative_rejected_steps_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.cumulative_time_sec_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.restart_used_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.step_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::IterationStats, _impl_.primal_weight_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.instance_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.termination_reason_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.termination_string_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.iteration_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.preprocessing_time_sec_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.solve_time_sec_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.solution_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.solution_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.iteration_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.original_problem_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::SolveLog, _impl_.preprocessed_problem_stats_),
  0,
  5,
  6,
  1,
  7,
  9,
  8,
  2,
  10,
  ~0u,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 33, -1, sizeof(::operations_research::pdlp::QuadraticProgramStats)},
  { 60, 80, -1, sizeof(::operations_research::pdlp::ConvergenceInformation)},
  { 94, 106, -1, sizeof(::operations_research::pdlp::InfeasibilityInformation)},
  { 112, 125, -1, sizeof(::operations_research::pdlp::PointMetadata)},
  { 132, 148, -1, sizeof(::operations_research::pdlp::IterationStats)},
  { 158, 176, -1, sizeof(::operations_research::pdlp::SolveLog)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::pdlp::_QuadraticProgramStats_default_instance_._instance,
  &::operations_research::pdlp::_ConvergenceInformation_default_instance_._instance,
  &::operations_research::pdlp::_InfeasibilityInformation_default_instance_._instance,
  &::operations_research::pdlp::_PointMetadata_default_instance_._instance,
  &::operations_research::pdlp::_IterationStats_default_instance_._instance,
  &::operations_research::pdlp::_SolveLog_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fpdlp_2fsolve_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ortools/pdlp/solve_log.proto\022\030operatio"
  "ns_research.pdlp\032\032ortools/pdlp/solvers.p"
  "roto\"\266\007\n\025QuadraticProgramStats\022\025\n\rnum_va"
  "riables\030\001 \001(\003\022\027\n\017num_constraints\030\002 \001(\003\022,"
  "\n$constraint_matrix_col_min_l_inf_norm\030\003"
  " \001(\001\022,\n$constraint_matrix_row_min_l_inf_"
  "norm\030\004 \001(\001\022&\n\036constraint_matrix_num_nonz"
  "eros\030\005 \001(\003\022!\n\031constraint_matrix_abs_max\030"
  "\006 \001(\001\022!\n\031constraint_matrix_abs_min\030\007 \001(\001"
  "\022!\n\031constraint_matrix_abs_avg\030\010 \001(\001\022!\n\031c"
  "onstraint_matrix_l2_norm\030\031 \001(\001\022\033\n\023combin"
  "ed_bounds_max\030\t \001(\001\022\033\n\023combined_bounds_m"
  "in\030\n \001(\001\022\033\n\023combined_bounds_avg\030\013 \001(\001\022\037\n"
  "\027combined_bounds_l2_norm\030\030 \001(\001\022&\n\036variab"
  "le_bound_gaps_num_finite\030\014 \001(\003\022\037\n\027variab"
  "le_bound_gaps_max\030\r \001(\001\022\037\n\027variable_boun"
  "d_gaps_min\030\016 \001(\001\022\037\n\027variable_bound_gaps_"
  "avg\030\017 \001(\001\022#\n\033variable_bound_gaps_l2_norm"
  "\030\032 \001(\001\022 \n\030objective_vector_abs_max\030\020 \001(\001"
  "\022 \n\030objective_vector_abs_min\030\021 \001(\001\022 \n\030ob"
  "jective_vector_abs_avg\030\022 \001(\001\022 \n\030objectiv"
  "e_vector_l2_norm\030\027 \001(\001\022%\n\035objective_matr"
  "ix_num_nonzeros\030\023 \001(\003\022 \n\030objective_matri"
  "x_abs_max\030\024 \001(\001\022 \n\030objective_matrix_abs_"
  "min\030\025 \001(\001\022 \n\030objective_matrix_abs_avg\030\026 "
  "\001(\001\022 \n\030objective_matrix_l2_norm\030\033 \001(\001\"\247\004"
  "\n\026ConvergenceInformation\022;\n\016candidate_ty"
  "pe\030\001 \001(\0162#.operations_research.pdlp.Poin"
  "tType\022\030\n\020primal_objective\030\002 \001(\001\022\026\n\016dual_"
  "objective\030\003 \001(\001\022 \n\030corrected_dual_object"
  "ive\030\004 \001(\001\022\035\n\025l_inf_primal_residual\030\005 \001(\001"
  "\022\032\n\022l2_primal_residual\030\006 \001(\001\022+\n#l_inf_co"
  "mponentwise_primal_residual\030\030 \001(\001\022\033\n\023l_i"
  "nf_dual_residual\030\007 \001(\001\022\030\n\020l2_dual_residu"
  "al\030\010 \001(\001\022)\n!l_inf_componentwise_dual_res"
  "idual\030\031 \001(\001\022\035\n\025l_inf_primal_variable\030\016 \001"
  "(\001\022\032\n\022l2_primal_variable\030\017 \001(\001\022\033\n\023l_inf_"
  "dual_variable\030\020 \001(\001\022\030\n\020l2_dual_variable\030"
  "\021 \001(\001J\004\010\t\020\nJ\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020\rJ\004\010\r\020\016J\004\010\022\020"
  "\023J\004\010\023\020\024J\004\010\024\020\025J\004\010\025\020\026J\004\010\026\020\027J\004\010\027\020\030\"\221\002\n\030Infe"
  "asibilityInformation\022$\n\034max_primal_ray_i"
  "nfeasibility\030\001 \001(\001\022#\n\033primal_ray_linear_"
  "objective\030\002 \001(\001\022!\n\031primal_ray_quadratic_"
  "norm\030\003 \001(\001\022\"\n\032max_dual_ray_infeasibility"
  "\030\004 \001(\001\022\032\n\022dual_ray_objective\030\005 \001(\001\022;\n\016ca"
  "ndidate_type\030\006 \001(\0162#.operations_research"
  ".pdlp.PointTypeJ\004\010\007\020\010J\004\010\010\020\t\"\252\002\n\rPointMet"
  "adata\0227\n\npoint_type\030\001 \001(\0162#.operations_r"
  "esearch.pdlp.PointType\022%\n\031random_primal_"
  "projections\030\002 \003(\001B\002\020\001\022#\n\027random_dual_pro"
  "jections\030\003 \003(\001B\002\020\001\022$\n\034active_primal_vari"
  "able_count\030\004 \001(\003\022\"\n\032active_dual_variable"
  "_count\030\005 \001(\003\022%\n\035active_primal_variable_c"
  "hange\030\006 \001(\003\022#\n\033active_dual_variable_chan"
  "ge\030\007 \001(\003\"\352\003\n\016IterationStats\022\030\n\020iteration"
  "_number\030\001 \001(\005\022Q\n\027convergence_information"
  "\030\002 \003(\01320.operations_research.pdlp.Conver"
  "genceInformation\022U\n\031infeasibility_inform"
  "ation\030\003 \003(\01322.operations_research.pdlp.I"
  "nfeasibilityInformation\022\?\n\016point_metadat"
  "a\030\013 \003(\0132\'.operations_research.pdlp.Point"
  "Metadata\022$\n\034cumulative_kkt_matrix_passes"
  "\030\004 \001(\001\022!\n\031cumulative_rejected_steps\030\005 \001("
  "\005\022\033\n\023cumulative_time_sec\030\006 \001(\001\022=\n\014restar"
  "t_used\030\007 \001(\0162\'.operations_research.pdlp."
  "RestartChoice\022\021\n\tstep_size\030\010 \001(\001\022\025\n\rprim"
  "al_weight\030\t \001(\001J\004\010\n\020\013\"\224\005\n\010SolveLog\022\025\n\rin"
  "stance_name\030\001 \001(\t\022H\n\006params\030\016 \001(\01328.oper"
  "ations_research.pdlp.PrimalDualHybridGra"
  "dientParams\022G\n\022termination_reason\030\003 \001(\0162"
  "+.operations_research.pdlp.TerminationRe"
  "ason\022\032\n\022termination_string\030\004 \001(\t\022\027\n\017iter"
  "ation_count\030\005 \001(\005\022\036\n\026preprocessing_time_"
  "sec\030\r \001(\001\022\026\n\016solve_time_sec\030\006 \001(\001\022@\n\016sol"
  "ution_stats\030\010 \001(\0132(.operations_research."
  "pdlp.IterationStats\022:\n\rsolution_type\030\n \001"
  "(\0162#.operations_research.pdlp.PointType\022"
  "A\n\017iteration_stats\030\007 \003(\0132(.operations_re"
  "search.pdlp.IterationStats\022O\n\026original_p"
  "roblem_stats\030\013 \001(\0132/.operations_research"
  ".pdlp.QuadraticProgramStats\022S\n\032preproces"
  "sed_problem_stats\030\014 \001(\0132/.operations_res"
  "earch.pdlp.QuadraticProgramStatsJ\004\010\002\020\003J\004"
  "\010\t\020\n*\240\001\n\rRestartChoice\022\036\n\032RESTART_CHOICE"
  "_UNSPECIFIED\020\000\022\035\n\031RESTART_CHOICE_NO_REST"
  "ART\020\001\022)\n%RESTART_CHOICE_WEIGHTED_AVERAGE"
  "_RESET\020\002\022%\n!RESTART_CHOICE_RESTART_TO_AV"
  "ERAGE\020\003*\302\001\n\tPointType\022\032\n\026POINT_TYPE_UNSP"
  "ECIFIED\020\000\022\036\n\032POINT_TYPE_CURRENT_ITERATE\020"
  "\001\022!\n\035POINT_TYPE_ITERATE_DIFFERENCE\020\002\022\036\n\032"
  "POINT_TYPE_AVERAGE_ITERATE\020\003\022\023\n\017POINT_TY"
  "PE_NONE\020\004\022!\n\035POINT_TYPE_PRESOLVER_SOLUTI"
  "ON\020\005*\311\004\n\021TerminationReason\022\"\n\036TERMINATIO"
  "N_REASON_UNSPECIFIED\020\000\022\036\n\032TERMINATION_RE"
  "ASON_OPTIMAL\020\001\022(\n$TERMINATION_REASON_PRI"
  "MAL_INFEASIBLE\020\002\022&\n\"TERMINATION_REASON_D"
  "UAL_INFEASIBLE\020\003\022!\n\035TERMINATION_REASON_T"
  "IME_LIMIT\020\004\022&\n\"TERMINATION_REASON_ITERAT"
  "ION_LIMIT\020\005\022,\n(TERMINATION_REASON_KKT_MA"
  "TRIX_PASS_LIMIT\020\010\022*\n&TERMINATION_REASON_"
  "INTERRUPTED_BY_USER\020\014\022&\n\"TERMINATION_REA"
  "SON_NUMERICAL_ERROR\020\006\022&\n\"TERMINATION_REA"
  "SON_INVALID_PROBLEM\020\t\022/\n+TERMINATION_REA"
  "SON_INVALID_INITIAL_SOLUTION\020\r\022(\n$TERMIN"
  "ATION_REASON_INVALID_PARAMETER\020\n\022\034\n\030TERM"
  "INATION_REASON_OTHER\020\007\0220\n,TERMINATION_RE"
  "ASON_PRIMAL_OR_DUAL_INFEASIBLE\020\013"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_deps[1] = {
  &::descriptor_table_ortools_2fpdlp_2fsolvers_2eproto,
};
static ::_pbi::once_flag descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto = {
    false, false, 4272, descriptor_table_protodef_ortools_2fpdlp_2fsolve_5flog_2eproto,
    "ortools/pdlp/solve_log.proto",
    &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once, descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto::offsets,
    file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto, file_level_enum_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto,
    file_level_service_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter() {
  return &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fpdlp_2fsolve_5flog_2eproto(&descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto);
namespace operations_research {
namespace pdlp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestartChoice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto[0];
}
bool RestartChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto[1];
}
bool PointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminationReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolve_5flog_2eproto[2];
}
bool TerminationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class QuadraticProgramStats::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadraticProgramStats>()._impl_._has_bits_);
  static void set_has_num_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_constraint_matrix_col_min_l_inf_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_constraint_matrix_row_min_l_inf_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_constraint_matrix_num_nonzeros(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_constraint_matrix_abs_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_constraint_matrix_abs_min(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_constraint_matrix_abs_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_constraint_matrix_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_combined_bounds_max(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_combined_bounds_min(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_combined_bounds_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_combined_bounds_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_variable_bound_gaps_num_finite(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_variable_bound_gaps_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_variable_bound_gaps_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_variable_bound_gaps_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_variable_bound_gaps_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_objective_vector_abs_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_objective_vector_abs_min(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_objective_vector_abs_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_objective_vector_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_objective_matrix_num_nonzeros(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_objective_matrix_abs_max(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_objective_matrix_abs_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_objective_matrix_abs_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_objective_matrix_l2_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

QuadraticProgramStats::QuadraticProgramStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.QuadraticProgramStats)
}
QuadraticProgramStats::QuadraticProgramStats(const QuadraticProgramStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuadraticProgramStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_variables_){}
    , decltype(_impl_.num_constraints_){}
    , decltype(_impl_.constraint_matrix_col_min_l_inf_norm_){}
    , decltype(_impl_.constraint_matrix_row_min_l_inf_norm_){}
    , decltype(_impl_.constraint_matrix_num_nonzeros_){}
    , decltype(_impl_.constraint_matrix_abs_max_){}
    , decltype(_impl_.constraint_matrix_abs_min_){}
    , decltype(_impl_.constraint_matrix_abs_avg_){}
    , decltype(_impl_.combined_bounds_max_){}
    , decltype(_impl_.combined_bounds_min_){}
    , decltype(_impl_.combined_bounds_avg_){}
    , decltype(_impl_.variable_bound_gaps_num_finite_){}
    , decltype(_impl_.variable_bound_gaps_max_){}
    , decltype(_impl_.variable_bound_gaps_min_){}
    , decltype(_impl_.variable_bound_gaps_avg_){}
    , decltype(_impl_.objective_vector_abs_max_){}
    , decltype(_impl_.objective_vector_abs_min_){}
    , decltype(_impl_.objective_vector_abs_avg_){}
    , decltype(_impl_.objective_matrix_num_nonzeros_){}
    , decltype(_impl_.objective_matrix_abs_max_){}
    , decltype(_impl_.objective_matrix_abs_min_){}
    , decltype(_impl_.objective_matrix_abs_avg_){}
    , decltype(_impl_.objective_vector_l2_norm_){}
    , decltype(_impl_.combined_bounds_l2_norm_){}
    , decltype(_impl_.constraint_matrix_l2_norm_){}
    , decltype(_impl_.variable_bound_gaps_l2_norm_){}
    , decltype(_impl_.objective_matrix_l2_norm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_variables_, &from._impl_.num_variables_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objective_matrix_l2_norm_) -
    reinterpret_cast<char*>(&_impl_.num_variables_)) + sizeof(_impl_.objective_matrix_l2_norm_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.QuadraticProgramStats)
}

inline void QuadraticProgramStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_variables_){int64_t{0}}
    , decltype(_impl_.num_constraints_){int64_t{0}}
    , decltype(_impl_.constraint_matrix_col_min_l_inf_norm_){0}
    , decltype(_impl_.constraint_matrix_row_min_l_inf_norm_){0}
    , decltype(_impl_.constraint_matrix_num_nonzeros_){int64_t{0}}
    , decltype(_impl_.constraint_matrix_abs_max_){0}
    , decltype(_impl_.constraint_matrix_abs_min_){0}
    , decltype(_impl_.constraint_matrix_abs_avg_){0}
    , decltype(_impl_.combined_bounds_max_){0}
    , decltype(_impl_.combined_bounds_min_){0}
    , decltype(_impl_.combined_bounds_avg_){0}
    , decltype(_impl_.variable_bound_gaps_num_finite_){int64_t{0}}
    , decltype(_impl_.variable_bound_gaps_max_){0}
    , decltype(_impl_.variable_bound_gaps_min_){0}
    , decltype(_impl_.variable_bound_gaps_avg_){0}
    , decltype(_impl_.objective_vector_abs_max_){0}
    , decltype(_impl_.objective_vector_abs_min_){0}
    , decltype(_impl_.objective_vector_abs_avg_){0}
    , decltype(_impl_.objective_matrix_num_nonzeros_){int64_t{0}}
    , decltype(_impl_.objective_matrix_abs_max_){0}
    , decltype(_impl_.objective_matrix_abs_min_){0}
    , decltype(_impl_.objective_matrix_abs_avg_){0}
    , decltype(_impl_.objective_vector_l2_norm_){0}
    , decltype(_impl_.combined_bounds_l2_norm_){0}
    , decltype(_impl_.constraint_matrix_l2_norm_){0}
    , decltype(_impl_.variable_bound_gaps_l2_norm_){0}
    , decltype(_impl_.objective_matrix_l2_norm_){0}
  };
}

QuadraticProgramStats::~QuadraticProgramStats() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.QuadraticProgramStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuadraticProgramStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuadraticProgramStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuadraticProgramStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.QuadraticProgramStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.num_variables_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.constraint_matrix_abs_avg_) -
        reinterpret_cast<char*>(&_impl_.num_variables_)) + sizeof(_impl_.constraint_matrix_abs_avg_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.combined_bounds_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.objective_vector_abs_max_) -
        reinterpret_cast<char*>(&_impl_.combined_bounds_max_)) + sizeof(_impl_.objective_vector_abs_max_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.objective_vector_abs_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.combined_bounds_l2_norm_) -
        reinterpret_cast<char*>(&_impl_.objective_vector_abs_min_)) + sizeof(_impl_.combined_bounds_l2_norm_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&_impl_.constraint_matrix_l2_norm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.objective_matrix_l2_norm_) -
        reinterpret_cast<char*>(&_impl_.constraint_matrix_l2_norm_)) + sizeof(_impl_.objective_matrix_l2_norm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadraticProgramStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 num_variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_variables(&has_bits);
          _impl_.num_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_constraints(&has_bits);
          _impl_.num_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_col_min_l_inf_norm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_constraint_matrix_col_min_l_inf_norm(&has_bits);
          _impl_.constraint_matrix_col_min_l_inf_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_row_min_l_inf_norm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_constraint_matrix_row_min_l_inf_norm(&has_bits);
          _impl_.constraint_matrix_row_min_l_inf_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 constraint_matrix_num_nonzeros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_constraint_matrix_num_nonzeros(&has_bits);
          _impl_.constraint_matrix_num_nonzeros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_abs_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_constraint_matrix_abs_max(&has_bits);
          _impl_.constraint_matrix_abs_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_abs_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_constraint_matrix_abs_min(&has_bits);
          _impl_.constraint_matrix_abs_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_abs_avg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_constraint_matrix_abs_avg(&has_bits);
          _impl_.constraint_matrix_abs_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double combined_bounds_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_combined_bounds_max(&has_bits);
          _impl_.combined_bounds_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double combined_bounds_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_combined_bounds_min(&has_bits);
          _impl_.combined_bounds_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double combined_bounds_avg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_combined_bounds_avg(&has_bits);
          _impl_.combined_bounds_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 variable_bound_gaps_num_finite = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_variable_bound_gaps_num_finite(&has_bits);
          _impl_.variable_bound_gaps_num_finite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double variable_bound_gaps_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_variable_bound_gaps_max(&has_bits);
          _impl_.variable_bound_gaps_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double variable_bound_gaps_min = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_variable_bound_gaps_min(&has_bits);
          _impl_.variable_bound_gaps_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double variable_bound_gaps_avg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_variable_bound_gaps_avg(&has_bits);
          _impl_.variable_bound_gaps_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_vector_abs_max = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_objective_vector_abs_max(&has_bits);
          _impl_.objective_vector_abs_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_vector_abs_min = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_objective_vector_abs_min(&has_bits);
          _impl_.objective_vector_abs_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_vector_abs_avg = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_objective_vector_abs_avg(&has_bits);
          _impl_.objective_vector_abs_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 objective_matrix_num_nonzeros = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_objective_matrix_num_nonzeros(&has_bits);
          _impl_.objective_matrix_num_nonzeros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_matrix_abs_max = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_objective_matrix_abs_max(&has_bits);
          _impl_.objective_matrix_abs_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_matrix_abs_min = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_objective_matrix_abs_min(&has_bits);
          _impl_.objective_matrix_abs_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_matrix_abs_avg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_objective_matrix_abs_avg(&has_bits);
          _impl_.objective_matrix_abs_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_vector_l2_norm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_objective_vector_l2_norm(&has_bits);
          _impl_.objective_vector_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double combined_bounds_l2_norm = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_combined_bounds_l2_norm(&has_bits);
          _impl_.combined_bounds_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double constraint_matrix_l2_norm = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_constraint_matrix_l2_norm(&has_bits);
          _impl_.constraint_matrix_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double variable_bound_gaps_l2_norm = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_variable_bound_gaps_l2_norm(&has_bits);
          _impl_.variable_bound_gaps_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double objective_matrix_l2_norm = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_objective_matrix_l2_norm(&has_bits);
          _impl_.objective_matrix_l2_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuadraticProgramStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.QuadraticProgramStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 num_variables = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_variables(), target);
  }

  // optional int64 num_constraints = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_constraints(), target);
  }

  // optional double constraint_matrix_col_min_l_inf_norm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_constraint_matrix_col_min_l_inf_norm(), target);
  }

  // optional double constraint_matrix_row_min_l_inf_norm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_constraint_matrix_row_min_l_inf_norm(), target);
  }

  // optional int64 constraint_matrix_num_nonzeros = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_constraint_matrix_num_nonzeros(), target);
  }

  // optional double constraint_matrix_abs_max = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_constraint_matrix_abs_max(), target);
  }

  // optional double constraint_matrix_abs_min = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_constraint_matrix_abs_min(), target);
  }

  // optional double constraint_matrix_abs_avg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_constraint_matrix_abs_avg(), target);
  }

  // optional double combined_bounds_max = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_combined_bounds_max(), target);
  }

  // optional double combined_bounds_min = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_combined_bounds_min(), target);
  }

  // optional double combined_bounds_avg = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_combined_bounds_avg(), target);
  }

  // optional int64 variable_bound_gaps_num_finite = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_variable_bound_gaps_num_finite(), target);
  }

  // optional double variable_bound_gaps_max = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_variable_bound_gaps_max(), target);
  }

  // optional double variable_bound_gaps_min = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_variable_bound_gaps_min(), target);
  }

  // optional double variable_bound_gaps_avg = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_variable_bound_gaps_avg(), target);
  }

  // optional double objective_vector_abs_max = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_objective_vector_abs_max(), target);
  }

  // optional double objective_vector_abs_min = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_objective_vector_abs_min(), target);
  }

  // optional double objective_vector_abs_avg = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_objective_vector_abs_avg(), target);
  }

  // optional int64 objective_matrix_num_nonzeros = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_objective_matrix_num_nonzeros(), target);
  }

  // optional double objective_matrix_abs_max = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_objective_matrix_abs_max(), target);
  }

  // optional double objective_matrix_abs_min = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_objective_matrix_abs_min(), target);
  }

  // optional double objective_matrix_abs_avg = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_objective_matrix_abs_avg(), target);
  }

  // optional double objective_vector_l2_norm = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_objective_vector_l2_norm(), target);
  }

  // optional double combined_bounds_l2_norm = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_combined_bounds_l2_norm(), target);
  }

  // optional double constraint_matrix_l2_norm = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_constraint_matrix_l2_norm(), target);
  }

  // optional double variable_bound_gaps_l2_norm = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_variable_bound_gaps_l2_norm(), target);
  }

  // optional double objective_matrix_l2_norm = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_objective_matrix_l2_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.QuadraticProgramStats)
  return target;
}

size_t QuadraticProgramStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.QuadraticProgramStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 num_variables = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_variables());
    }

    // optional int64 num_constraints = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_constraints());
    }

    // optional double constraint_matrix_col_min_l_inf_norm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double constraint_matrix_row_min_l_inf_norm = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int64 constraint_matrix_num_nonzeros = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_constraint_matrix_num_nonzeros());
    }

    // optional double constraint_matrix_abs_max = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double constraint_matrix_abs_min = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double constraint_matrix_abs_avg = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double combined_bounds_max = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double combined_bounds_min = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double combined_bounds_avg = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int64 variable_bound_gaps_num_finite = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_variable_bound_gaps_num_finite());
    }

    // optional double variable_bound_gaps_max = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double variable_bound_gaps_min = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double variable_bound_gaps_avg = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double objective_vector_abs_max = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double objective_vector_abs_min = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double objective_vector_abs_avg = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional int64 objective_matrix_num_nonzeros = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_objective_matrix_num_nonzeros());
    }

    // optional double objective_matrix_abs_max = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double objective_matrix_abs_min = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double objective_matrix_abs_avg = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double objective_vector_l2_norm = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double combined_bounds_l2_norm = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional double constraint_matrix_l2_norm = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double variable_bound_gaps_l2_norm = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double objective_matrix_l2_norm = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadraticProgramStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuadraticProgramStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadraticProgramStats::GetClassData() const { return &_class_data_; }


void QuadraticProgramStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuadraticProgramStats*>(&to_msg);
  auto& from = static_cast<const QuadraticProgramStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.QuadraticProgramStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_variables_ = from._impl_.num_variables_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_constraints_ = from._impl_.num_constraints_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.constraint_matrix_col_min_l_inf_norm_ = from._impl_.constraint_matrix_col_min_l_inf_norm_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.constraint_matrix_row_min_l_inf_norm_ = from._impl_.constraint_matrix_row_min_l_inf_norm_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.constraint_matrix_num_nonzeros_ = from._impl_.constraint_matrix_num_nonzeros_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.constraint_matrix_abs_max_ = from._impl_.constraint_matrix_abs_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.constraint_matrix_abs_min_ = from._impl_.constraint_matrix_abs_min_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.constraint_matrix_abs_avg_ = from._impl_.constraint_matrix_abs_avg_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.combined_bounds_max_ = from._impl_.combined_bounds_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.combined_bounds_min_ = from._impl_.combined_bounds_min_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.combined_bounds_avg_ = from._impl_.combined_bounds_avg_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.variable_bound_gaps_num_finite_ = from._impl_.variable_bound_gaps_num_finite_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.variable_bound_gaps_max_ = from._impl_.variable_bound_gaps_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.variable_bound_gaps_min_ = from._impl_.variable_bound_gaps_min_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.variable_bound_gaps_avg_ = from._impl_.variable_bound_gaps_avg_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.objective_vector_abs_max_ = from._impl_.objective_vector_abs_max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.objective_vector_abs_min_ = from._impl_.objective_vector_abs_min_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.objective_vector_abs_avg_ = from._impl_.objective_vector_abs_avg_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.objective_matrix_num_nonzeros_ = from._impl_.objective_matrix_num_nonzeros_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.objective_matrix_abs_max_ = from._impl_.objective_matrix_abs_max_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.objective_matrix_abs_min_ = from._impl_.objective_matrix_abs_min_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.objective_matrix_abs_avg_ = from._impl_.objective_matrix_abs_avg_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.objective_vector_l2_norm_ = from._impl_.objective_vector_l2_norm_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.combined_bounds_l2_norm_ = from._impl_.combined_bounds_l2_norm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.constraint_matrix_l2_norm_ = from._impl_.constraint_matrix_l2_norm_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.variable_bound_gaps_l2_norm_ = from._impl_.variable_bound_gaps_l2_norm_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.objective_matrix_l2_norm_ = from._impl_.objective_matrix_l2_norm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadraticProgramStats::CopyFrom(const QuadraticProgramStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.QuadraticProgramStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgramStats::IsInitialized() const {
  return true;
}

void QuadraticProgramStats::InternalSwap(QuadraticProgramStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuadraticProgramStats, _impl_.objective_matrix_l2_norm_)
      + sizeof(QuadraticProgramStats::_impl_.objective_matrix_l2_norm_)
      - PROTOBUF_FIELD_OFFSET(QuadraticProgramStats, _impl_.num_variables_)>(
          reinterpret_cast<char*>(&_impl_.num_variables_),
          reinterpret_cast<char*>(&other->_impl_.num_variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadraticProgramStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[0]);
}

// ===================================================================

class ConvergenceInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvergenceInformation>()._impl_._has_bits_);
  static void set_has_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_primal_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dual_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_corrected_dual_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_l_inf_primal_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_l2_primal_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_l_inf_componentwise_primal_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_l_inf_dual_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_l2_dual_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_l_inf_componentwise_dual_residual(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_l_inf_primal_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_l2_primal_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_l_inf_dual_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_l2_dual_variable(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ConvergenceInformation::ConvergenceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.ConvergenceInformation)
}
ConvergenceInformation::ConvergenceInformation(const ConvergenceInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConvergenceInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_objective_){}
    , decltype(_impl_.dual_objective_){}
    , decltype(_impl_.corrected_dual_objective_){}
    , decltype(_impl_.l_inf_primal_residual_){}
    , decltype(_impl_.l2_primal_residual_){}
    , decltype(_impl_.l_inf_dual_residual_){}
    , decltype(_impl_.l2_dual_residual_){}
    , decltype(_impl_.l_inf_primal_variable_){}
    , decltype(_impl_.l2_primal_variable_){}
    , decltype(_impl_.l_inf_dual_variable_){}
    , decltype(_impl_.l2_dual_variable_){}
    , decltype(_impl_.l_inf_componentwise_primal_residual_){}
    , decltype(_impl_.l_inf_componentwise_dual_residual_){}
    , decltype(_impl_.candidate_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primal_objective_, &from._impl_.primal_objective_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.candidate_type_) -
    reinterpret_cast<char*>(&_impl_.primal_objective_)) + sizeof(_impl_.candidate_type_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.ConvergenceInformation)
}

inline void ConvergenceInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primal_objective_){0}
    , decltype(_impl_.dual_objective_){0}
    , decltype(_impl_.corrected_dual_objective_){0}
    , decltype(_impl_.l_inf_primal_residual_){0}
    , decltype(_impl_.l2_primal_residual_){0}
    , decltype(_impl_.l_inf_dual_residual_){0}
    , decltype(_impl_.l2_dual_residual_){0}
    , decltype(_impl_.l_inf_primal_variable_){0}
    , decltype(_impl_.l2_primal_variable_){0}
    , decltype(_impl_.l_inf_dual_variable_){0}
    , decltype(_impl_.l2_dual_variable_){0}
    , decltype(_impl_.l_inf_componentwise_primal_residual_){0}
    , decltype(_impl_.l_inf_componentwise_dual_residual_){0}
    , decltype(_impl_.candidate_type_){0}
  };
}

ConvergenceInformation::~ConvergenceInformation() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.ConvergenceInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvergenceInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConvergenceInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvergenceInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.ConvergenceInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.primal_objective_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.l_inf_primal_variable_) -
        reinterpret_cast<char*>(&_impl_.primal_objective_)) + sizeof(_impl_.l_inf_primal_variable_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.l2_primal_variable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.candidate_type_) -
        reinterpret_cast<char*>(&_impl_.l2_primal_variable_)) + sizeof(_impl_.candidate_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvergenceInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.PointType candidate_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PointType_IsValid(val))) {
            _internal_set_candidate_type(static_cast<::operations_research::pdlp::PointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double primal_objective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_primal_objective(&has_bits);
          _impl_.primal_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_objective = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dual_objective(&has_bits);
          _impl_.dual_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double corrected_dual_objective = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_corrected_dual_objective(&has_bits);
          _impl_.corrected_dual_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_primal_residual = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_l_inf_primal_residual(&has_bits);
          _impl_.l_inf_primal_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l2_primal_residual = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_l2_primal_residual(&has_bits);
          _impl_.l2_primal_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_dual_residual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_l_inf_dual_residual(&has_bits);
          _impl_.l_inf_dual_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l2_dual_residual = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_l2_dual_residual(&has_bits);
          _impl_.l2_dual_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_primal_variable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_l_inf_primal_variable(&has_bits);
          _impl_.l_inf_primal_variable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l2_primal_variable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_l2_primal_variable(&has_bits);
          _impl_.l2_primal_variable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_dual_variable = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_l_inf_dual_variable(&has_bits);
          _impl_.l_inf_dual_variable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l2_dual_variable = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_l2_dual_variable(&has_bits);
          _impl_.l2_dual_variable_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_componentwise_primal_residual = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_l_inf_componentwise_primal_residual(&has_bits);
          _impl_.l_inf_componentwise_primal_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l_inf_componentwise_dual_residual = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_l_inf_componentwise_dual_residual(&has_bits);
          _impl_.l_inf_componentwise_dual_residual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvergenceInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.ConvergenceInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.pdlp.PointType candidate_type = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_candidate_type(), target);
  }

  // optional double primal_objective = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_primal_objective(), target);
  }

  // optional double dual_objective = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dual_objective(), target);
  }

  // optional double corrected_dual_objective = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_corrected_dual_objective(), target);
  }

  // optional double l_inf_primal_residual = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_l_inf_primal_residual(), target);
  }

  // optional double l2_primal_residual = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_l2_primal_residual(), target);
  }

  // optional double l_inf_dual_residual = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_l_inf_dual_residual(), target);
  }

  // optional double l2_dual_residual = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_l2_dual_residual(), target);
  }

  // optional double l_inf_primal_variable = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_l_inf_primal_variable(), target);
  }

  // optional double l2_primal_variable = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_l2_primal_variable(), target);
  }

  // optional double l_inf_dual_variable = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_l_inf_dual_variable(), target);
  }

  // optional double l2_dual_variable = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_l2_dual_variable(), target);
  }

  // optional double l_inf_componentwise_primal_residual = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_l_inf_componentwise_primal_residual(), target);
  }

  // optional double l_inf_componentwise_dual_residual = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_l_inf_componentwise_dual_residual(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.ConvergenceInformation)
  return target;
}

size_t ConvergenceInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.ConvergenceInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double primal_objective = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dual_objective = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double corrected_dual_objective = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double l_inf_primal_residual = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double l2_primal_residual = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double l_inf_dual_residual = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double l2_dual_residual = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double l_inf_primal_variable = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double l2_primal_variable = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double l_inf_dual_variable = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double l2_dual_variable = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double l_inf_componentwise_primal_residual = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double l_inf_componentwise_dual_residual = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.pdlp.PointType candidate_type = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_candidate_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvergenceInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConvergenceInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvergenceInformation::GetClassData() const { return &_class_data_; }


void ConvergenceInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConvergenceInformation*>(&to_msg);
  auto& from = static_cast<const ConvergenceInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.ConvergenceInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.primal_objective_ = from._impl_.primal_objective_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dual_objective_ = from._impl_.dual_objective_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.corrected_dual_objective_ = from._impl_.corrected_dual_objective_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.l_inf_primal_residual_ = from._impl_.l_inf_primal_residual_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.l2_primal_residual_ = from._impl_.l2_primal_residual_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.l_inf_dual_residual_ = from._impl_.l_inf_dual_residual_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.l2_dual_residual_ = from._impl_.l2_dual_residual_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.l_inf_primal_variable_ = from._impl_.l_inf_primal_variable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.l2_primal_variable_ = from._impl_.l2_primal_variable_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.l_inf_dual_variable_ = from._impl_.l_inf_dual_variable_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.l2_dual_variable_ = from._impl_.l2_dual_variable_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.l_inf_componentwise_primal_residual_ = from._impl_.l_inf_componentwise_primal_residual_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.l_inf_componentwise_dual_residual_ = from._impl_.l_inf_componentwise_dual_residual_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.candidate_type_ = from._impl_.candidate_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvergenceInformation::CopyFrom(const ConvergenceInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.ConvergenceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvergenceInformation::IsInitialized() const {
  return true;
}

void ConvergenceInformation::InternalSwap(ConvergenceInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvergenceInformation, _impl_.candidate_type_)
      + sizeof(ConvergenceInformation::_impl_.candidate_type_)
      - PROTOBUF_FIELD_OFFSET(ConvergenceInformation, _impl_.primal_objective_)>(
          reinterpret_cast<char*>(&_impl_.primal_objective_),
          reinterpret_cast<char*>(&other->_impl_.primal_objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvergenceInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[1]);
}

// ===================================================================

class InfeasibilityInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<InfeasibilityInformation>()._impl_._has_bits_);
  static void set_has_max_primal_ray_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primal_ray_linear_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_primal_ray_quadratic_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_dual_ray_infeasibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dual_ray_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_candidate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

InfeasibilityInformation::InfeasibilityInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.InfeasibilityInformation)
}
InfeasibilityInformation::InfeasibilityInformation(const InfeasibilityInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfeasibilityInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_primal_ray_infeasibility_){}
    , decltype(_impl_.primal_ray_linear_objective_){}
    , decltype(_impl_.primal_ray_quadratic_norm_){}
    , decltype(_impl_.max_dual_ray_infeasibility_){}
    , decltype(_impl_.dual_ray_objective_){}
    , decltype(_impl_.candidate_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_primal_ray_infeasibility_, &from._impl_.max_primal_ray_infeasibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.candidate_type_) -
    reinterpret_cast<char*>(&_impl_.max_primal_ray_infeasibility_)) + sizeof(_impl_.candidate_type_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.InfeasibilityInformation)
}

inline void InfeasibilityInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_primal_ray_infeasibility_){0}
    , decltype(_impl_.primal_ray_linear_objective_){0}
    , decltype(_impl_.primal_ray_quadratic_norm_){0}
    , decltype(_impl_.max_dual_ray_infeasibility_){0}
    , decltype(_impl_.dual_ray_objective_){0}
    , decltype(_impl_.candidate_type_){0}
  };
}

InfeasibilityInformation::~InfeasibilityInformation() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.InfeasibilityInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfeasibilityInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfeasibilityInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfeasibilityInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.InfeasibilityInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.max_primal_ray_infeasibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.candidate_type_) -
        reinterpret_cast<char*>(&_impl_.max_primal_ray_infeasibility_)) + sizeof(_impl_.candidate_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfeasibilityInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_primal_ray_infeasibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_primal_ray_infeasibility(&has_bits);
          _impl_.max_primal_ray_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_ray_linear_objective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_primal_ray_linear_objective(&has_bits);
          _impl_.primal_ray_linear_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_ray_quadratic_norm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_primal_ray_quadratic_norm(&has_bits);
          _impl_.primal_ray_quadratic_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_dual_ray_infeasibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_dual_ray_infeasibility(&has_bits);
          _impl_.max_dual_ray_infeasibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dual_ray_objective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_dual_ray_objective(&has_bits);
          _impl_.dual_ray_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PointType candidate_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PointType_IsValid(val))) {
            _internal_set_candidate_type(static_cast<::operations_research::pdlp::PointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfeasibilityInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.InfeasibilityInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_primal_ray_infeasibility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_primal_ray_infeasibility(), target);
  }

  // optional double primal_ray_linear_objective = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_primal_ray_linear_objective(), target);
  }

  // optional double primal_ray_quadratic_norm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_primal_ray_quadratic_norm(), target);
  }

  // optional double max_dual_ray_infeasibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_dual_ray_infeasibility(), target);
  }

  // optional double dual_ray_objective = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_dual_ray_objective(), target);
  }

  // optional .operations_research.pdlp.PointType candidate_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_candidate_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.InfeasibilityInformation)
  return target;
}

size_t InfeasibilityInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.InfeasibilityInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double max_primal_ray_infeasibility = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double primal_ray_linear_objective = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double primal_ray_quadratic_norm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_dual_ray_infeasibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dual_ray_objective = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.pdlp.PointType candidate_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_candidate_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfeasibilityInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfeasibilityInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfeasibilityInformation::GetClassData() const { return &_class_data_; }


void InfeasibilityInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfeasibilityInformation*>(&to_msg);
  auto& from = static_cast<const InfeasibilityInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.InfeasibilityInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_primal_ray_infeasibility_ = from._impl_.max_primal_ray_infeasibility_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.primal_ray_linear_objective_ = from._impl_.primal_ray_linear_objective_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.primal_ray_quadratic_norm_ = from._impl_.primal_ray_quadratic_norm_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_dual_ray_infeasibility_ = from._impl_.max_dual_ray_infeasibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dual_ray_objective_ = from._impl_.dual_ray_objective_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.candidate_type_ = from._impl_.candidate_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfeasibilityInformation::CopyFrom(const InfeasibilityInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.InfeasibilityInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfeasibilityInformation::IsInitialized() const {
  return true;
}

void InfeasibilityInformation::InternalSwap(InfeasibilityInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfeasibilityInformation, _impl_.candidate_type_)
      + sizeof(InfeasibilityInformation::_impl_.candidate_type_)
      - PROTOBUF_FIELD_OFFSET(InfeasibilityInformation, _impl_.max_primal_ray_infeasibility_)>(
          reinterpret_cast<char*>(&_impl_.max_primal_ray_infeasibility_),
          reinterpret_cast<char*>(&other->_impl_.max_primal_ray_infeasibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfeasibilityInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[2]);
}

// ===================================================================

class PointMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PointMetadata>()._impl_._has_bits_);
  static void set_has_point_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_active_primal_variable_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_dual_variable_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_primal_variable_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active_dual_variable_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PointMetadata::PointMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.PointMetadata)
}
PointMetadata::PointMetadata(const PointMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_primal_projections_){from._impl_.random_primal_projections_}
    , decltype(_impl_.random_dual_projections_){from._impl_.random_dual_projections_}
    , decltype(_impl_.active_primal_variable_count_){}
    , decltype(_impl_.active_dual_variable_count_){}
    , decltype(_impl_.active_primal_variable_change_){}
    , decltype(_impl_.active_dual_variable_change_){}
    , decltype(_impl_.point_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.active_primal_variable_count_, &from._impl_.active_primal_variable_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.point_type_) -
    reinterpret_cast<char*>(&_impl_.active_primal_variable_count_)) + sizeof(_impl_.point_type_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.PointMetadata)
}

inline void PointMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_primal_projections_){arena}
    , decltype(_impl_.random_dual_projections_){arena}
    , decltype(_impl_.active_primal_variable_count_){int64_t{0}}
    , decltype(_impl_.active_dual_variable_count_){int64_t{0}}
    , decltype(_impl_.active_primal_variable_change_){int64_t{0}}
    , decltype(_impl_.active_dual_variable_change_){int64_t{0}}
    , decltype(_impl_.point_type_){0}
  };
}

PointMetadata::~PointMetadata() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.PointMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_primal_projections_.~RepeatedField();
  _impl_.random_dual_projections_.~RepeatedField();
}

void PointMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.PointMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.random_primal_projections_.Clear();
  _impl_.random_dual_projections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.active_primal_variable_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.point_type_) -
        reinterpret_cast<char*>(&_impl_.active_primal_variable_count_)) + sizeof(_impl_.point_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.PointType point_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PointType_IsValid(val))) {
            _internal_set_point_type(static_cast<::operations_research::pdlp::PointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated double random_primal_projections = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_random_primal_projections(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_random_primal_projections(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double random_dual_projections = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_random_dual_projections(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_random_dual_projections(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int64 active_primal_variable_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active_primal_variable_count(&has_bits);
          _impl_.active_primal_variable_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 active_dual_variable_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_active_dual_variable_count(&has_bits);
          _impl_.active_dual_variable_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 active_primal_variable_change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_active_primal_variable_change(&has_bits);
          _impl_.active_primal_variable_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 active_dual_variable_change = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_active_dual_variable_change(&has_bits);
          _impl_.active_dual_variable_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.PointMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .operations_research.pdlp.PointType point_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_point_type(), target);
  }

  // repeated double random_primal_projections = 2 [packed = true];
  if (this->_internal_random_primal_projections_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_random_primal_projections(), target);
  }

  // repeated double random_dual_projections = 3 [packed = true];
  if (this->_internal_random_dual_projections_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_random_dual_projections(), target);
  }

  // optional int64 active_primal_variable_count = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_active_primal_variable_count(), target);
  }

  // optional int64 active_dual_variable_count = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_active_dual_variable_count(), target);
  }

  // optional int64 active_primal_variable_change = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_active_primal_variable_change(), target);
  }

  // optional int64 active_dual_variable_change = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_active_dual_variable_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.PointMetadata)
  return target;
}

size_t PointMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.PointMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double random_primal_projections = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_random_primal_projections_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double random_dual_projections = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_random_dual_projections_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 active_primal_variable_count = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_active_primal_variable_count());
    }

    // optional int64 active_dual_variable_count = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_active_dual_variable_count());
    }

    // optional int64 active_primal_variable_change = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_active_primal_variable_change());
    }

    // optional int64 active_dual_variable_change = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_active_dual_variable_change());
    }

    // optional .operations_research.pdlp.PointType point_type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_point_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointMetadata::GetClassData() const { return &_class_data_; }


void PointMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointMetadata*>(&to_msg);
  auto& from = static_cast<const PointMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.PointMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.random_primal_projections_.MergeFrom(from._impl_.random_primal_projections_);
  _this->_impl_.random_dual_projections_.MergeFrom(from._impl_.random_dual_projections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.active_primal_variable_count_ = from._impl_.active_primal_variable_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.active_dual_variable_count_ = from._impl_.active_dual_variable_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.active_primal_variable_change_ = from._impl_.active_primal_variable_change_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.active_dual_variable_change_ = from._impl_.active_dual_variable_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.point_type_ = from._impl_.point_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointMetadata::CopyFrom(const PointMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.PointMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointMetadata::IsInitialized() const {
  return true;
}

void PointMetadata::InternalSwap(PointMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.random_primal_projections_.InternalSwap(&other->_impl_.random_primal_projections_);
  _impl_.random_dual_projections_.InternalSwap(&other->_impl_.random_dual_projections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointMetadata, _impl_.point_type_)
      + sizeof(PointMetadata::_impl_.point_type_)
      - PROTOBUF_FIELD_OFFSET(PointMetadata, _impl_.active_primal_variable_count_)>(
          reinterpret_cast<char*>(&_impl_.active_primal_variable_count_),
          reinterpret_cast<char*>(&other->_impl_.active_primal_variable_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[3]);
}

// ===================================================================

class IterationStats::_Internal {
 public:
  using HasBits = decltype(std::declval<IterationStats>()._impl_._has_bits_);
  static void set_has_iteration_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cumulative_kkt_matrix_passes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cumulative_rejected_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cumulative_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_restart_used(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_primal_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

IterationStats::IterationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.IterationStats)
}
IterationStats::IterationStats(const IterationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IterationStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convergence_information_){from._impl_.convergence_information_}
    , decltype(_impl_.infeasibility_information_){from._impl_.infeasibility_information_}
    , decltype(_impl_.point_metadata_){from._impl_.point_metadata_}
    , decltype(_impl_.iteration_number_){}
    , decltype(_impl_.cumulative_rejected_steps_){}
    , decltype(_impl_.cumulative_kkt_matrix_passes_){}
    , decltype(_impl_.cumulative_time_sec_){}
    , decltype(_impl_.step_size_){}
    , decltype(_impl_.primal_weight_){}
    , decltype(_impl_.restart_used_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.iteration_number_, &from._impl_.iteration_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.restart_used_) -
    reinterpret_cast<char*>(&_impl_.iteration_number_)) + sizeof(_impl_.restart_used_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.IterationStats)
}

inline void IterationStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convergence_information_){arena}
    , decltype(_impl_.infeasibility_information_){arena}
    , decltype(_impl_.point_metadata_){arena}
    , decltype(_impl_.iteration_number_){0}
    , decltype(_impl_.cumulative_rejected_steps_){0}
    , decltype(_impl_.cumulative_kkt_matrix_passes_){0}
    , decltype(_impl_.cumulative_time_sec_){0}
    , decltype(_impl_.step_size_){0}
    , decltype(_impl_.primal_weight_){0}
    , decltype(_impl_.restart_used_){0}
  };
}

IterationStats::~IterationStats() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.IterationStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IterationStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.convergence_information_.~RepeatedPtrField();
  _impl_.infeasibility_information_.~RepeatedPtrField();
  _impl_.point_metadata_.~RepeatedPtrField();
}

void IterationStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IterationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.IterationStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.convergence_information_.Clear();
  _impl_.infeasibility_information_.Clear();
  _impl_.point_metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.iteration_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.restart_used_) -
        reinterpret_cast<char*>(&_impl_.iteration_number_)) + sizeof(_impl_.restart_used_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IterationStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 iteration_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iteration_number(&has_bits);
          _impl_.iteration_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_convergence_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infeasibility_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double cumulative_kkt_matrix_passes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_cumulative_kkt_matrix_passes(&has_bits);
          _impl_.cumulative_kkt_matrix_passes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cumulative_rejected_steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cumulative_rejected_steps(&has_bits);
          _impl_.cumulative_rejected_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cumulative_time_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_cumulative_time_sec(&has_bits);
          _impl_.cumulative_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.RestartChoice restart_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::RestartChoice_IsValid(val))) {
            _internal_set_restart_used(static_cast<::operations_research::pdlp::RestartChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double step_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_step_size(&has_bits);
          _impl_.step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double primal_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_primal_weight(&has_bits);
          _impl_.primal_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IterationStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.IterationStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 iteration_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_iteration_number(), target);
  }

  // repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_convergence_information_size()); i < n; i++) {
    const auto& repfield = this->_internal_convergence_information(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infeasibility_information_size()); i < n; i++) {
    const auto& repfield = this->_internal_infeasibility_information(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double cumulative_kkt_matrix_passes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_cumulative_kkt_matrix_passes(), target);
  }

  // optional int32 cumulative_rejected_steps = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cumulative_rejected_steps(), target);
  }

  // optional double cumulative_time_sec = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_cumulative_time_sec(), target);
  }

  // optional .operations_research.pdlp.RestartChoice restart_used = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_restart_used(), target);
  }

  // optional double step_size = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_step_size(), target);
  }

  // optional double primal_weight = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_primal_weight(), target);
  }

  // repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.IterationStats)
  return target;
}

size_t IterationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.IterationStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
  total_size += 1UL * this->_internal_convergence_information_size();
  for (const auto& msg : this->_impl_.convergence_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
  total_size += 1UL * this->_internal_infeasibility_information_size();
  for (const auto& msg : this->_impl_.infeasibility_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
  total_size += 1UL * this->_internal_point_metadata_size();
  for (const auto& msg : this->_impl_.point_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 iteration_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iteration_number());
    }

    // optional int32 cumulative_rejected_steps = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cumulative_rejected_steps());
    }

    // optional double cumulative_kkt_matrix_passes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double cumulative_time_sec = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double step_size = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double primal_weight = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.pdlp.RestartChoice restart_used = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_restart_used());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IterationStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IterationStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IterationStats::GetClassData() const { return &_class_data_; }


void IterationStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IterationStats*>(&to_msg);
  auto& from = static_cast<const IterationStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.IterationStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.convergence_information_.MergeFrom(from._impl_.convergence_information_);
  _this->_impl_.infeasibility_information_.MergeFrom(from._impl_.infeasibility_information_);
  _this->_impl_.point_metadata_.MergeFrom(from._impl_.point_metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.iteration_number_ = from._impl_.iteration_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cumulative_rejected_steps_ = from._impl_.cumulative_rejected_steps_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cumulative_kkt_matrix_passes_ = from._impl_.cumulative_kkt_matrix_passes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cumulative_time_sec_ = from._impl_.cumulative_time_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.step_size_ = from._impl_.step_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.primal_weight_ = from._impl_.primal_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.restart_used_ = from._impl_.restart_used_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IterationStats::CopyFrom(const IterationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.IterationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationStats::IsInitialized() const {
  return true;
}

void IterationStats::InternalSwap(IterationStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.convergence_information_.InternalSwap(&other->_impl_.convergence_information_);
  _impl_.infeasibility_information_.InternalSwap(&other->_impl_.infeasibility_information_);
  _impl_.point_metadata_.InternalSwap(&other->_impl_.point_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IterationStats, _impl_.restart_used_)
      + sizeof(IterationStats::_impl_.restart_used_)
      - PROTOBUF_FIELD_OFFSET(IterationStats, _impl_.iteration_number_)>(
          reinterpret_cast<char*>(&_impl_.iteration_number_),
          reinterpret_cast<char*>(&other->_impl_.iteration_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IterationStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[4]);
}

// ===================================================================

class SolveLog::_Internal {
 public:
  using HasBits = decltype(std::declval<SolveLog>()._impl_._has_bits_);
  static void set_has_instance_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::operations_research::pdlp::PrimalDualHybridGradientParams& params(const SolveLog* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_termination_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_termination_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iteration_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_preprocessing_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_solve_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::operations_research::pdlp::IterationStats& solution_stats(const SolveLog* msg);
  static void set_has_solution_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_solution_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::operations_research::pdlp::QuadraticProgramStats& original_problem_stats(const SolveLog* msg);
  static void set_has_original_problem_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::operations_research::pdlp::QuadraticProgramStats& preprocessed_problem_stats(const SolveLog* msg);
  static void set_has_preprocessed_problem_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::operations_research::pdlp::PrimalDualHybridGradientParams&
SolveLog::_Internal::params(const SolveLog* msg) {
  return *msg->_impl_.params_;
}
const ::operations_research::pdlp::IterationStats&
SolveLog::_Internal::solution_stats(const SolveLog* msg) {
  return *msg->_impl_.solution_stats_;
}
const ::operations_research::pdlp::QuadraticProgramStats&
SolveLog::_Internal::original_problem_stats(const SolveLog* msg) {
  return *msg->_impl_.original_problem_stats_;
}
const ::operations_research::pdlp::QuadraticProgramStats&
SolveLog::_Internal::preprocessed_problem_stats(const SolveLog* msg) {
  return *msg->_impl_.preprocessed_problem_stats_;
}
void SolveLog::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
SolveLog::SolveLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.SolveLog)
}
SolveLog::SolveLog(const SolveLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SolveLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteration_stats_){from._impl_.iteration_stats_}
    , decltype(_impl_.instance_name_){}
    , decltype(_impl_.termination_string_){}
    , decltype(_impl_.solution_stats_){nullptr}
    , decltype(_impl_.original_problem_stats_){nullptr}
    , decltype(_impl_.preprocessed_problem_stats_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.termination_reason_){}
    , decltype(_impl_.iteration_count_){}
    , decltype(_impl_.solve_time_sec_){}
    , decltype(_impl_.preprocessing_time_sec_){}
    , decltype(_impl_.solution_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_name()) {
    _this->_impl_.instance_name_.Set(from._internal_instance_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.termination_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.termination_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_termination_string()) {
    _this->_impl_.termination_string_.Set(from._internal_termination_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_solution_stats()) {
    _this->_impl_.solution_stats_ = new ::operations_research::pdlp::IterationStats(*from._impl_.solution_stats_);
  }
  if (from._internal_has_original_problem_stats()) {
    _this->_impl_.original_problem_stats_ = new ::operations_research::pdlp::QuadraticProgramStats(*from._impl_.original_problem_stats_);
  }
  if (from._internal_has_preprocessed_problem_stats()) {
    _this->_impl_.preprocessed_problem_stats_ = new ::operations_research::pdlp::QuadraticProgramStats(*from._impl_.preprocessed_problem_stats_);
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::operations_research::pdlp::PrimalDualHybridGradientParams(*from._impl_.params_);
  }
  ::memcpy(&_impl_.termination_reason_, &from._impl_.termination_reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.solution_type_) -
    reinterpret_cast<char*>(&_impl_.termination_reason_)) + sizeof(_impl_.solution_type_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.SolveLog)
}

inline void SolveLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteration_stats_){arena}
    , decltype(_impl_.instance_name_){}
    , decltype(_impl_.termination_string_){}
    , decltype(_impl_.solution_stats_){nullptr}
    , decltype(_impl_.original_problem_stats_){nullptr}
    , decltype(_impl_.preprocessed_problem_stats_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.termination_reason_){0}
    , decltype(_impl_.iteration_count_){0}
    , decltype(_impl_.solve_time_sec_){0}
    , decltype(_impl_.preprocessing_time_sec_){0}
    , decltype(_impl_.solution_type_){0}
  };
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.termination_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.termination_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SolveLog::~SolveLog() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.SolveLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SolveLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iteration_stats_.~RepeatedPtrField();
  _impl_.instance_name_.Destroy();
  _impl_.termination_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.solution_stats_;
  if (this != internal_default_instance()) delete _impl_.original_problem_stats_;
  if (this != internal_default_instance()) delete _impl_.preprocessed_problem_stats_;
  if (this != internal_default_instance()) delete _impl_.params_;
}

void SolveLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SolveLog::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.SolveLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iteration_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.termination_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.solution_stats_ != nullptr);
      _impl_.solution_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.original_problem_stats_ != nullptr);
      _impl_.original_problem_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.preprocessed_problem_stats_ != nullptr);
      _impl_.preprocessed_problem_stats_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.termination_reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iteration_count_) -
        reinterpret_cast<char*>(&_impl_.termination_reason_)) + sizeof(_impl_.iteration_count_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.solve_time_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.solution_type_) -
        reinterpret_cast<char*>(&_impl_.solve_time_sec_)) + sizeof(_impl_.solution_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolveLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.pdlp.SolveLog.instance_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.TerminationReason termination_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::TerminationReason_IsValid(val))) {
            _internal_set_termination_reason(static_cast<::operations_research::pdlp::TerminationReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string termination_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_termination_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "operations_research.pdlp.SolveLog.termination_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 iteration_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_iteration_count(&has_bits);
          _impl_.iteration_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double solve_time_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_solve_time_sec(&has_bits);
          _impl_.solve_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_iteration_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.IterationStats solution_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_solution_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PointType solution_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PointType_IsValid(val))) {
            _internal_set_solution_type(static_cast<::operations_research::pdlp::PointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_problem_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_preprocessed_problem_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double preprocessing_time_sec = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_preprocessing_time_sec(&has_bits);
          _impl_.preprocessing_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SolveLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.SolveLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string instance_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.pdlp.SolveLog.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  // optional .operations_research.pdlp.TerminationReason termination_reason = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_termination_reason(), target);
  }

  // optional string termination_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_termination_string().data(), static_cast<int>(this->_internal_termination_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.pdlp.SolveLog.termination_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_termination_string(), target);
  }

  // optional int32 iteration_count = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_iteration_count(), target);
  }

  // optional double solve_time_sec = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_solve_time_sec(), target);
  }

  // repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_iteration_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_iteration_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .operations_research.pdlp.IterationStats solution_stats = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::solution_stats(this),
        _Internal::solution_stats(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.pdlp.PointType solution_type = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_solution_type(), target);
  }

  // optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::original_problem_stats(this),
        _Internal::original_problem_stats(this).GetCachedSize(), target, stream);
  }

  // optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::preprocessed_problem_stats(this),
        _Internal::preprocessed_problem_stats(this).GetCachedSize(), target, stream);
  }

  // optional double preprocessing_time_sec = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_preprocessing_time_sec(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.SolveLog)
  return target;
}

size_t SolveLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.SolveLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
  total_size += 1UL * this->_internal_iteration_stats_size();
  for (const auto& msg : this->_impl_.iteration_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string instance_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_name());
    }

    // optional string termination_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_termination_string());
    }

    // optional .operations_research.pdlp.IterationStats solution_stats = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.solution_stats_);
    }

    // optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.original_problem_stats_);
    }

    // optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preprocessed_problem_stats_);
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

    // optional .operations_research.pdlp.TerminationReason termination_reason = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_termination_reason());
    }

    // optional int32 iteration_count = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_iteration_count());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double solve_time_sec = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double preprocessing_time_sec = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.pdlp.PointType solution_type = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_solution_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolveLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SolveLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolveLog::GetClassData() const { return &_class_data_; }


void SolveLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SolveLog*>(&to_msg);
  auto& from = static_cast<const SolveLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.SolveLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.iteration_stats_.MergeFrom(from._impl_.iteration_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_name(from._internal_instance_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_termination_string(from._internal_termination_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_solution_stats()->::operations_research::pdlp::IterationStats::MergeFrom(
          from._internal_solution_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_original_problem_stats()->::operations_research::pdlp::QuadraticProgramStats::MergeFrom(
          from._internal_original_problem_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_preprocessed_problem_stats()->::operations_research::pdlp::QuadraticProgramStats::MergeFrom(
          from._internal_preprocessed_problem_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_params()->::operations_research::pdlp::PrimalDualHybridGradientParams::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.termination_reason_ = from._impl_.termination_reason_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.iteration_count_ = from._impl_.iteration_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.solve_time_sec_ = from._impl_.solve_time_sec_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.preprocessing_time_sec_ = from._impl_.preprocessing_time_sec_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.solution_type_ = from._impl_.solution_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolveLog::CopyFrom(const SolveLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.SolveLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolveLog::IsInitialized() const {
  return true;
}

void SolveLog::InternalSwap(SolveLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.iteration_stats_.InternalSwap(&other->_impl_.iteration_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_name_, lhs_arena,
      &other->_impl_.instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.termination_string_, lhs_arena,
      &other->_impl_.termination_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveLog, _impl_.solution_type_)
      + sizeof(SolveLog::_impl_.solution_type_)
      - PROTOBUF_FIELD_OFFSET(SolveLog, _impl_.solution_stats_)>(
          reinterpret_cast<char*>(&_impl_.solution_stats_),
          reinterpret_cast<char*>(&other->_impl_.solution_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolveLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolve_5flog_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pdlp
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::QuadraticProgramStats*
Arena::CreateMaybeMessage< ::operations_research::pdlp::QuadraticProgramStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::QuadraticProgramStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::ConvergenceInformation*
Arena::CreateMaybeMessage< ::operations_research::pdlp::ConvergenceInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::ConvergenceInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::InfeasibilityInformation*
Arena::CreateMaybeMessage< ::operations_research::pdlp::InfeasibilityInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::InfeasibilityInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::PointMetadata*
Arena::CreateMaybeMessage< ::operations_research::pdlp::PointMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::PointMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::IterationStats*
Arena::CreateMaybeMessage< ::operations_research::pdlp::IterationStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::IterationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::SolveLog*
Arena::CreateMaybeMessage< ::operations_research::pdlp::SolveLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::SolveLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
