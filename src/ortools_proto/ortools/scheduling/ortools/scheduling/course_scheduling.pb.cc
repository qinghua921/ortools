// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/scheduling/course_scheduling.proto

#include "ortools/scheduling/course_scheduling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operations_research {
PROTOBUF_CONSTEXPR CourseSchedulingModel::CourseSchedulingModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.courses_)*/{}
  , /*decltype(_impl_.teachers_)*/{}
  , /*decltype(_impl_.students_)*/{}
  , /*decltype(_impl_.rooms_)*/{}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.days_count_)*/0
  , /*decltype(_impl_.daily_time_slot_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CourseSchedulingModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CourseSchedulingModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CourseSchedulingModelDefaultTypeInternal() {}
  union {
    CourseSchedulingModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CourseSchedulingModelDefaultTypeInternal _CourseSchedulingModel_default_instance_;
PROTOBUF_CONSTEXPR CourseSchedulingResult::CourseSchedulingResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_assignments_)*/{}
  , /*decltype(_impl_.student_assignments_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solver_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CourseSchedulingResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CourseSchedulingResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CourseSchedulingResultDefaultTypeInternal() {}
  union {
    CourseSchedulingResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CourseSchedulingResultDefaultTypeInternal _CourseSchedulingResult_default_instance_;
PROTOBUF_CONSTEXPR ClassAssignment::ClassAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_slots_)*/{}
  , /*decltype(_impl_._time_slots_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_indices_)*/{}
  , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.course_index_)*/0
  , /*decltype(_impl_.section_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassAssignmentDefaultTypeInternal() {}
  union {
    ClassAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassAssignmentDefaultTypeInternal _ClassAssignment_default_instance_;
PROTOBUF_CONSTEXPR StudentAssignment::StudentAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.course_indices_)*/{}
  , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.section_indices_)*/{}
  , /*decltype(_impl_._section_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.student_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StudentAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StudentAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StudentAssignmentDefaultTypeInternal() {}
  union {
    StudentAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StudentAssignmentDefaultTypeInternal _StudentAssignment_default_instance_;
PROTOBUF_CONSTEXPR Course::Course(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teacher_indices_)*/{}
  , /*decltype(_impl_._teacher_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.teacher_section_counts_)*/{}
  , /*decltype(_impl_._teacher_section_counts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.room_indices_)*/{}
  , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meetings_count_)*/0
  , /*decltype(_impl_.max_capacity_)*/0
  , /*decltype(_impl_.min_capacity_)*/0
  , /*decltype(_impl_.consecutive_slots_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CourseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CourseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CourseDefaultTypeInternal() {}
  union {
    Course _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CourseDefaultTypeInternal _Course_default_instance_;
PROTOBUF_CONSTEXPR Teacher::Teacher(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.restricted_time_slots_)*/{}
  , /*decltype(_impl_._restricted_time_slots_cached_byte_size_)*/{0}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeacherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeacherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeacherDefaultTypeInternal() {}
  union {
    Teacher _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeacherDefaultTypeInternal _Teacher_default_instance_;
PROTOBUF_CONSTEXPR Student::Student(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.course_indices_)*/{}
  , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StudentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StudentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StudentDefaultTypeInternal() {}
  union {
    Student _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StudentDefaultTypeInternal _Student_default_instance_;
PROTOBUF_CONSTEXPR Room::Room(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capacity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
}  // namespace operations_research
static ::_pb::Metadata file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ortools_2fscheduling_2fcourse_5fscheduling_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.days_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.daily_time_slot_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.courses_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.teachers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.students_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingModel, _impl_.rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingResult, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingResult, _impl_.solver_status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingResult, _impl_.class_assignments_),
  PROTOBUF_FIELD_OFFSET(::operations_research::CourseSchedulingResult, _impl_.student_assignments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::ClassAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::ClassAssignment, _impl_.course_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ClassAssignment, _impl_.section_number_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ClassAssignment, _impl_.time_slots_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ClassAssignment, _impl_.room_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::StudentAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::StudentAssignment, _impl_.student_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::StudentAssignment, _impl_.course_indices_),
  PROTOBUF_FIELD_OFFSET(::operations_research::StudentAssignment, _impl_.section_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.meetings_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.max_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.min_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.consecutive_slots_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.teacher_indices_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.teacher_section_counts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Course, _impl_.room_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::Teacher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::Teacher, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Teacher, _impl_.restricted_time_slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::Student, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::Student, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Student, _impl_.course_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::Room, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::Room, _impl_.capacity_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::CourseSchedulingModel)},
  { 13, -1, -1, sizeof(::operations_research::CourseSchedulingResult)},
  { 23, -1, -1, sizeof(::operations_research::ClassAssignment)},
  { 33, -1, -1, sizeof(::operations_research::StudentAssignment)},
  { 42, -1, -1, sizeof(::operations_research::Course)},
  { 56, -1, -1, sizeof(::operations_research::Teacher)},
  { 64, -1, -1, sizeof(::operations_research::Student)},
  { 72, -1, -1, sizeof(::operations_research::Room)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operations_research::_CourseSchedulingModel_default_instance_._instance,
  &::operations_research::_CourseSchedulingResult_default_instance_._instance,
  &::operations_research::_ClassAssignment_default_instance_._instance,
  &::operations_research::_StudentAssignment_default_instance_._instance,
  &::operations_research::_Course_default_instance_._instance,
  &::operations_research::_Teacher_default_instance_._instance,
  &::operations_research::_Student_default_instance_._instance,
  &::operations_research::_Room_default_instance_._instance,
};

const char descriptor_table_protodef_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*ortools/scheduling/course_scheduling.p"
  "roto\022\023operations_research\"\230\002\n\025CourseSche"
  "dulingModel\022\024\n\014display_name\030\001 \001(\t\022\022\n\nday"
  "s_count\030\002 \001(\005\022\035\n\025daily_time_slot_count\030\003"
  " \001(\005\022,\n\007courses\030\004 \003(\0132\033.operations_resea"
  "rch.Course\022.\n\010teachers\030\005 \003(\0132\034.operation"
  "s_research.Teacher\022.\n\010students\030\006 \003(\0132\034.o"
  "perations_research.Student\022(\n\005rooms\030\007 \003("
  "\0132\031.operations_research.Room\"\371\001\n\026CourseS"
  "chedulingResult\022\017\n\007message\030\001 \001(\t\022H\n\rsolv"
  "er_status\030\002 \001(\01621.operations_research.Co"
  "urseSchedulingResultStatus\022\?\n\021class_assi"
  "gnments\030\003 \003(\0132$.operations_research.Clas"
  "sAssignment\022C\n\023student_assignments\030\004 \003(\013"
  "2&.operations_research.StudentAssignment"
  "\"i\n\017ClassAssignment\022\024\n\014course_index\030\001 \001("
  "\005\022\026\n\016section_number\030\002 \001(\005\022\022\n\ntime_slots\030"
  "\003 \003(\005\022\024\n\014room_indices\030\004 \003(\005\"[\n\021StudentAs"
  "signment\022\025\n\rstudent_index\030\001 \001(\005\022\026\n\016cours"
  "e_indices\030\002 \003(\005\022\027\n\017section_indices\030\003 \003(\005"
  "\"\322\001\n\006Course\022\024\n\014display_name\030\001 \001(\t\022\026\n\016mee"
  "tings_count\030\002 \001(\005\022\024\n\014max_capacity\030\003 \001(\005\022"
  "\024\n\014min_capacity\030\004 \001(\005\022\037\n\027consecutive_slo"
  "ts_count\030\005 \001(\005\022\027\n\017teacher_indices\030\006 \003(\005\022"
  "\036\n\026teacher_section_counts\030\007 \003(\005\022\024\n\014room_"
  "indices\030\010 \003(\005\">\n\007Teacher\022\024\n\014display_name"
  "\030\001 \001(\t\022\035\n\025restricted_time_slots\030\002 \003(\005\"7\n"
  "\007Student\022\024\n\014display_name\030\001 \001(\t\022\026\n\016course"
  "_indices\030\002 \003(\005\".\n\004Room\022\024\n\014display_name\030\001"
  " \001(\t\022\020\n\010capacity\030\002 \001(\005*\316\001\n\034CourseSchedul"
  "ingResultStatus\022/\n+COURSE_SCHEDULING_RES"
  "ULT_STATUS_UNSPECIFIED\020\000\022\023\n\017SOLVER_FEASI"
  "BLE\020\001\022\022\n\016SOLVER_OPTIMAL\020\002\022\025\n\021SOLVER_INFE"
  "ASIBLE\020\003\022\030\n\024SOLVER_MODEL_INVALID\020\004\022\025\n\021SO"
  "LVER_NOT_SOLVED\020\005\022\014\n\010ABNORMAL\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto = {
    false, false, 1399, descriptor_table_protodef_ortools_2fscheduling_2fcourse_5fscheduling_2eproto,
    "ortools/scheduling/course_scheduling.proto",
    &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_ortools_2fscheduling_2fcourse_5fscheduling_2eproto::offsets,
    file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto, file_level_enum_descriptors_ortools_2fscheduling_2fcourse_5fscheduling_2eproto,
    file_level_service_descriptors_ortools_2fscheduling_2fcourse_5fscheduling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter() {
  return &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ortools_2fscheduling_2fcourse_5fscheduling_2eproto(&descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CourseSchedulingResultStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto);
  return file_level_enum_descriptors_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[0];
}
bool CourseSchedulingResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CourseSchedulingModel::_Internal {
 public:
};

CourseSchedulingModel::CourseSchedulingModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.CourseSchedulingModel)
}
CourseSchedulingModel::CourseSchedulingModel(const CourseSchedulingModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CourseSchedulingModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.courses_){from._impl_.courses_}
    , decltype(_impl_.teachers_){from._impl_.teachers_}
    , decltype(_impl_.students_){from._impl_.students_}
    , decltype(_impl_.rooms_){from._impl_.rooms_}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.days_count_){}
    , decltype(_impl_.daily_time_slot_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.days_count_, &from._impl_.days_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.daily_time_slot_count_) -
    reinterpret_cast<char*>(&_impl_.days_count_)) + sizeof(_impl_.daily_time_slot_count_));
  // @@protoc_insertion_point(copy_constructor:operations_research.CourseSchedulingModel)
}

inline void CourseSchedulingModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.courses_){arena}
    , decltype(_impl_.teachers_){arena}
    , decltype(_impl_.students_){arena}
    , decltype(_impl_.rooms_){arena}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.days_count_){0}
    , decltype(_impl_.daily_time_slot_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CourseSchedulingModel::~CourseSchedulingModel() {
  // @@protoc_insertion_point(destructor:operations_research.CourseSchedulingModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CourseSchedulingModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.courses_.~RepeatedPtrField();
  _impl_.teachers_.~RepeatedPtrField();
  _impl_.students_.~RepeatedPtrField();
  _impl_.rooms_.~RepeatedPtrField();
  _impl_.display_name_.Destroy();
}

void CourseSchedulingModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CourseSchedulingModel::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.CourseSchedulingModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.courses_.Clear();
  _impl_.teachers_.Clear();
  _impl_.students_.Clear();
  _impl_.rooms_.Clear();
  _impl_.display_name_.ClearToEmpty();
  ::memset(&_impl_.days_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.daily_time_slot_count_) -
      reinterpret_cast<char*>(&_impl_.days_count_)) + sizeof(_impl_.daily_time_slot_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CourseSchedulingModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.CourseSchedulingModel.display_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 days_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.days_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 daily_time_slot_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.daily_time_slot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.Course courses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.Teacher teachers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teachers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.Student students = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_students(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.Room rooms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CourseSchedulingModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CourseSchedulingModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.CourseSchedulingModel.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // int32 days_count = 2;
  if (this->_internal_days_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_days_count(), target);
  }

  // int32 daily_time_slot_count = 3;
  if (this->_internal_daily_time_slot_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_daily_time_slot_count(), target);
  }

  // repeated .operations_research.Course courses = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_courses_size()); i < n; i++) {
    const auto& repfield = this->_internal_courses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.Teacher teachers = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teachers_size()); i < n; i++) {
    const auto& repfield = this->_internal_teachers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.Student students = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_students_size()); i < n; i++) {
    const auto& repfield = this->_internal_students(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.Room rooms = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CourseSchedulingModel)
  return target;
}

size_t CourseSchedulingModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.CourseSchedulingModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.Course courses = 4;
  total_size += 1UL * this->_internal_courses_size();
  for (const auto& msg : this->_impl_.courses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.Teacher teachers = 5;
  total_size += 1UL * this->_internal_teachers_size();
  for (const auto& msg : this->_impl_.teachers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.Student students = 6;
  total_size += 1UL * this->_internal_students_size();
  for (const auto& msg : this->_impl_.students_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.Room rooms = 7;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_impl_.rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // int32 days_count = 2;
  if (this->_internal_days_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_days_count());
  }

  // int32 daily_time_slot_count = 3;
  if (this->_internal_daily_time_slot_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_daily_time_slot_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CourseSchedulingModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CourseSchedulingModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CourseSchedulingModel::GetClassData() const { return &_class_data_; }


void CourseSchedulingModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CourseSchedulingModel*>(&to_msg);
  auto& from = static_cast<const CourseSchedulingModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.CourseSchedulingModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.courses_.MergeFrom(from._impl_.courses_);
  _this->_impl_.teachers_.MergeFrom(from._impl_.teachers_);
  _this->_impl_.students_.MergeFrom(from._impl_.students_);
  _this->_impl_.rooms_.MergeFrom(from._impl_.rooms_);
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_days_count() != 0) {
    _this->_internal_set_days_count(from._internal_days_count());
  }
  if (from._internal_daily_time_slot_count() != 0) {
    _this->_internal_set_daily_time_slot_count(from._internal_daily_time_slot_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CourseSchedulingModel::CopyFrom(const CourseSchedulingModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.CourseSchedulingModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseSchedulingModel::IsInitialized() const {
  return true;
}

void CourseSchedulingModel::InternalSwap(CourseSchedulingModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.courses_.InternalSwap(&other->_impl_.courses_);
  _impl_.teachers_.InternalSwap(&other->_impl_.teachers_);
  _impl_.students_.InternalSwap(&other->_impl_.students_);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CourseSchedulingModel, _impl_.daily_time_slot_count_)
      + sizeof(CourseSchedulingModel::_impl_.daily_time_slot_count_)
      - PROTOBUF_FIELD_OFFSET(CourseSchedulingModel, _impl_.days_count_)>(
          reinterpret_cast<char*>(&_impl_.days_count_),
          reinterpret_cast<char*>(&other->_impl_.days_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CourseSchedulingModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[0]);
}

// ===================================================================

class CourseSchedulingResult::_Internal {
 public:
};

CourseSchedulingResult::CourseSchedulingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.CourseSchedulingResult)
}
CourseSchedulingResult::CourseSchedulingResult(const CourseSchedulingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CourseSchedulingResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_assignments_){from._impl_.class_assignments_}
    , decltype(_impl_.student_assignments_){from._impl_.student_assignments_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.solver_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.solver_status_ = from._impl_.solver_status_;
  // @@protoc_insertion_point(copy_constructor:operations_research.CourseSchedulingResult)
}

inline void CourseSchedulingResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.class_assignments_){arena}
    , decltype(_impl_.student_assignments_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.solver_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CourseSchedulingResult::~CourseSchedulingResult() {
  // @@protoc_insertion_point(destructor:operations_research.CourseSchedulingResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CourseSchedulingResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_assignments_.~RepeatedPtrField();
  _impl_.student_assignments_.~RepeatedPtrField();
  _impl_.message_.Destroy();
}

void CourseSchedulingResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CourseSchedulingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.CourseSchedulingResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_assignments_.Clear();
  _impl_.student_assignments_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.solver_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CourseSchedulingResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.CourseSchedulingResult.message"));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.CourseSchedulingResultStatus solver_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_solver_status(static_cast<::operations_research::CourseSchedulingResultStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.ClassAssignment class_assignments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_class_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.StudentAssignment student_assignments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_student_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CourseSchedulingResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.CourseSchedulingResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.CourseSchedulingResult.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .operations_research.CourseSchedulingResultStatus solver_status = 2;
  if (this->_internal_solver_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solver_status(), target);
  }

  // repeated .operations_research.ClassAssignment class_assignments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_class_assignments_size()); i < n; i++) {
    const auto& repfield = this->_internal_class_assignments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .operations_research.StudentAssignment student_assignments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_student_assignments_size()); i < n; i++) {
    const auto& repfield = this->_internal_student_assignments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.CourseSchedulingResult)
  return target;
}

size_t CourseSchedulingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.CourseSchedulingResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.ClassAssignment class_assignments = 3;
  total_size += 1UL * this->_internal_class_assignments_size();
  for (const auto& msg : this->_impl_.class_assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.StudentAssignment student_assignments = 4;
  total_size += 1UL * this->_internal_student_assignments_size();
  for (const auto& msg : this->_impl_.student_assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .operations_research.CourseSchedulingResultStatus solver_status = 2;
  if (this->_internal_solver_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_solver_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CourseSchedulingResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CourseSchedulingResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CourseSchedulingResult::GetClassData() const { return &_class_data_; }


void CourseSchedulingResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CourseSchedulingResult*>(&to_msg);
  auto& from = static_cast<const CourseSchedulingResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.CourseSchedulingResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.class_assignments_.MergeFrom(from._impl_.class_assignments_);
  _this->_impl_.student_assignments_.MergeFrom(from._impl_.student_assignments_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_solver_status() != 0) {
    _this->_internal_set_solver_status(from._internal_solver_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CourseSchedulingResult::CopyFrom(const CourseSchedulingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.CourseSchedulingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseSchedulingResult::IsInitialized() const {
  return true;
}

void CourseSchedulingResult::InternalSwap(CourseSchedulingResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.class_assignments_.InternalSwap(&other->_impl_.class_assignments_);
  _impl_.student_assignments_.InternalSwap(&other->_impl_.student_assignments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.solver_status_, other->_impl_.solver_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CourseSchedulingResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[1]);
}

// ===================================================================

class ClassAssignment::_Internal {
 public:
};

ClassAssignment::ClassAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.ClassAssignment)
}
ClassAssignment::ClassAssignment(const ClassAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_slots_){from._impl_.time_slots_}
    , /*decltype(_impl_._time_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.room_indices_){from._impl_.room_indices_}
    , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.course_index_){}
    , decltype(_impl_.section_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.course_index_, &from._impl_.course_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.section_number_) -
    reinterpret_cast<char*>(&_impl_.course_index_)) + sizeof(_impl_.section_number_));
  // @@protoc_insertion_point(copy_constructor:operations_research.ClassAssignment)
}

inline void ClassAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_slots_){arena}
    , /*decltype(_impl_._time_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.room_indices_){arena}
    , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.course_index_){0}
    , decltype(_impl_.section_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClassAssignment::~ClassAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.ClassAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_slots_.~RepeatedField();
  _impl_.room_indices_.~RepeatedField();
}

void ClassAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.ClassAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_slots_.Clear();
  _impl_.room_indices_.Clear();
  ::memset(&_impl_.course_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.section_number_) -
      reinterpret_cast<char*>(&_impl_.course_index_)) + sizeof(_impl_.section_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 course_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.course_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 section_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.section_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 time_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_time_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_time_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_room_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.ClassAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 course_index = 1;
  if (this->_internal_course_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_course_index(), target);
  }

  // int32 section_number = 2;
  if (this->_internal_section_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_section_number(), target);
  }

  // repeated int32 time_slots = 3;
  {
    int byte_size = _impl_._time_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_time_slots(), byte_size, target);
    }
  }

  // repeated int32 room_indices = 4;
  {
    int byte_size = _impl_._room_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_room_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.ClassAssignment)
  return target;
}

size_t ClassAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.ClassAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 time_slots = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.time_slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._time_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 room_indices = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 course_index = 1;
  if (this->_internal_course_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_course_index());
  }

  // int32 section_number = 2;
  if (this->_internal_section_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_section_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassAssignment::GetClassData() const { return &_class_data_; }


void ClassAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassAssignment*>(&to_msg);
  auto& from = static_cast<const ClassAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.ClassAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.time_slots_.MergeFrom(from._impl_.time_slots_);
  _this->_impl_.room_indices_.MergeFrom(from._impl_.room_indices_);
  if (from._internal_course_index() != 0) {
    _this->_internal_set_course_index(from._internal_course_index());
  }
  if (from._internal_section_number() != 0) {
    _this->_internal_set_section_number(from._internal_section_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassAssignment::CopyFrom(const ClassAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.ClassAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassAssignment::IsInitialized() const {
  return true;
}

void ClassAssignment::InternalSwap(ClassAssignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.time_slots_.InternalSwap(&other->_impl_.time_slots_);
  _impl_.room_indices_.InternalSwap(&other->_impl_.room_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassAssignment, _impl_.section_number_)
      + sizeof(ClassAssignment::_impl_.section_number_)
      - PROTOBUF_FIELD_OFFSET(ClassAssignment, _impl_.course_index_)>(
          reinterpret_cast<char*>(&_impl_.course_index_),
          reinterpret_cast<char*>(&other->_impl_.course_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[2]);
}

// ===================================================================

class StudentAssignment::_Internal {
 public:
};

StudentAssignment::StudentAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.StudentAssignment)
}
StudentAssignment::StudentAssignment(const StudentAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StudentAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.course_indices_){from._impl_.course_indices_}
    , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.section_indices_){from._impl_.section_indices_}
    , /*decltype(_impl_._section_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.student_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.student_index_ = from._impl_.student_index_;
  // @@protoc_insertion_point(copy_constructor:operations_research.StudentAssignment)
}

inline void StudentAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.course_indices_){arena}
    , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.section_indices_){arena}
    , /*decltype(_impl_._section_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.student_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StudentAssignment::~StudentAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.StudentAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StudentAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.course_indices_.~RepeatedField();
  _impl_.section_indices_.~RepeatedField();
}

void StudentAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StudentAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.StudentAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.course_indices_.Clear();
  _impl_.section_indices_.Clear();
  _impl_.student_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StudentAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 student_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.student_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 course_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_course_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_course_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 section_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_section_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_section_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StudentAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.StudentAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 student_index = 1;
  if (this->_internal_student_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_student_index(), target);
  }

  // repeated int32 course_indices = 2;
  {
    int byte_size = _impl_._course_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_course_indices(), byte_size, target);
    }
  }

  // repeated int32 section_indices = 3;
  {
    int byte_size = _impl_._section_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_section_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.StudentAssignment)
  return target;
}

size_t StudentAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.StudentAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 course_indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.course_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._course_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 section_indices = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.section_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._section_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 student_index = 1;
  if (this->_internal_student_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_student_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StudentAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StudentAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StudentAssignment::GetClassData() const { return &_class_data_; }


void StudentAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StudentAssignment*>(&to_msg);
  auto& from = static_cast<const StudentAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.StudentAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.course_indices_.MergeFrom(from._impl_.course_indices_);
  _this->_impl_.section_indices_.MergeFrom(from._impl_.section_indices_);
  if (from._internal_student_index() != 0) {
    _this->_internal_set_student_index(from._internal_student_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StudentAssignment::CopyFrom(const StudentAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.StudentAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentAssignment::IsInitialized() const {
  return true;
}

void StudentAssignment::InternalSwap(StudentAssignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.course_indices_.InternalSwap(&other->_impl_.course_indices_);
  _impl_.section_indices_.InternalSwap(&other->_impl_.section_indices_);
  swap(_impl_.student_index_, other->_impl_.student_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[3]);
}

// ===================================================================

class Course::_Internal {
 public:
};

Course::Course(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.Course)
}
Course::Course(const Course& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Course* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teacher_indices_){from._impl_.teacher_indices_}
    , /*decltype(_impl_._teacher_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.teacher_section_counts_){from._impl_.teacher_section_counts_}
    , /*decltype(_impl_._teacher_section_counts_cached_byte_size_)*/{0}
    , decltype(_impl_.room_indices_){from._impl_.room_indices_}
    , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.meetings_count_){}
    , decltype(_impl_.max_capacity_){}
    , decltype(_impl_.min_capacity_){}
    , decltype(_impl_.consecutive_slots_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.meetings_count_, &from._impl_.meetings_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.consecutive_slots_count_) -
    reinterpret_cast<char*>(&_impl_.meetings_count_)) + sizeof(_impl_.consecutive_slots_count_));
  // @@protoc_insertion_point(copy_constructor:operations_research.Course)
}

inline void Course::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teacher_indices_){arena}
    , /*decltype(_impl_._teacher_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.teacher_section_counts_){arena}
    , /*decltype(_impl_._teacher_section_counts_cached_byte_size_)*/{0}
    , decltype(_impl_.room_indices_){arena}
    , /*decltype(_impl_._room_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.meetings_count_){0}
    , decltype(_impl_.max_capacity_){0}
    , decltype(_impl_.min_capacity_){0}
    , decltype(_impl_.consecutive_slots_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Course::~Course() {
  // @@protoc_insertion_point(destructor:operations_research.Course)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Course::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teacher_indices_.~RepeatedField();
  _impl_.teacher_section_counts_.~RepeatedField();
  _impl_.room_indices_.~RepeatedField();
  _impl_.display_name_.Destroy();
}

void Course::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Course::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.Course)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teacher_indices_.Clear();
  _impl_.teacher_section_counts_.Clear();
  _impl_.room_indices_.Clear();
  _impl_.display_name_.ClearToEmpty();
  ::memset(&_impl_.meetings_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.consecutive_slots_count_) -
      reinterpret_cast<char*>(&_impl_.meetings_count_)) + sizeof(_impl_.consecutive_slots_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Course::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.Course.display_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 meetings_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.meetings_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.min_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 consecutive_slots_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.consecutive_slots_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 teacher_indices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_teacher_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_teacher_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 teacher_section_counts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_teacher_section_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_teacher_section_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 room_indices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_room_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_room_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Course::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Course)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.Course.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // int32 meetings_count = 2;
  if (this->_internal_meetings_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_meetings_count(), target);
  }

  // int32 max_capacity = 3;
  if (this->_internal_max_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_capacity(), target);
  }

  // int32 min_capacity = 4;
  if (this->_internal_min_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_min_capacity(), target);
  }

  // int32 consecutive_slots_count = 5;
  if (this->_internal_consecutive_slots_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_consecutive_slots_count(), target);
  }

  // repeated int32 teacher_indices = 6;
  {
    int byte_size = _impl_._teacher_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_teacher_indices(), byte_size, target);
    }
  }

  // repeated int32 teacher_section_counts = 7;
  {
    int byte_size = _impl_._teacher_section_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_teacher_section_counts(), byte_size, target);
    }
  }

  // repeated int32 room_indices = 8;
  {
    int byte_size = _impl_._room_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_room_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Course)
  return target;
}

size_t Course::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.Course)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 teacher_indices = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.teacher_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._teacher_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 teacher_section_counts = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.teacher_section_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._teacher_section_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 room_indices = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.room_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._room_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // int32 meetings_count = 2;
  if (this->_internal_meetings_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_meetings_count());
  }

  // int32 max_capacity = 3;
  if (this->_internal_max_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_capacity());
  }

  // int32 min_capacity = 4;
  if (this->_internal_min_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_capacity());
  }

  // int32 consecutive_slots_count = 5;
  if (this->_internal_consecutive_slots_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_consecutive_slots_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Course::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Course::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Course::GetClassData() const { return &_class_data_; }


void Course::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Course*>(&to_msg);
  auto& from = static_cast<const Course&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.Course)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teacher_indices_.MergeFrom(from._impl_.teacher_indices_);
  _this->_impl_.teacher_section_counts_.MergeFrom(from._impl_.teacher_section_counts_);
  _this->_impl_.room_indices_.MergeFrom(from._impl_.room_indices_);
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_meetings_count() != 0) {
    _this->_internal_set_meetings_count(from._internal_meetings_count());
  }
  if (from._internal_max_capacity() != 0) {
    _this->_internal_set_max_capacity(from._internal_max_capacity());
  }
  if (from._internal_min_capacity() != 0) {
    _this->_internal_set_min_capacity(from._internal_min_capacity());
  }
  if (from._internal_consecutive_slots_count() != 0) {
    _this->_internal_set_consecutive_slots_count(from._internal_consecutive_slots_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Course::CopyFrom(const Course& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.Course)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Course::IsInitialized() const {
  return true;
}

void Course::InternalSwap(Course* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teacher_indices_.InternalSwap(&other->_impl_.teacher_indices_);
  _impl_.teacher_section_counts_.InternalSwap(&other->_impl_.teacher_section_counts_);
  _impl_.room_indices_.InternalSwap(&other->_impl_.room_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Course, _impl_.consecutive_slots_count_)
      + sizeof(Course::_impl_.consecutive_slots_count_)
      - PROTOBUF_FIELD_OFFSET(Course, _impl_.meetings_count_)>(
          reinterpret_cast<char*>(&_impl_.meetings_count_),
          reinterpret_cast<char*>(&other->_impl_.meetings_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Course::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[4]);
}

// ===================================================================

class Teacher::_Internal {
 public:
};

Teacher::Teacher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.Teacher)
}
Teacher::Teacher(const Teacher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Teacher* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.restricted_time_slots_){from._impl_.restricted_time_slots_}
    , /*decltype(_impl_._restricted_time_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.Teacher)
}

inline void Teacher::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.restricted_time_slots_){arena}
    , /*decltype(_impl_._restricted_time_slots_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Teacher::~Teacher() {
  // @@protoc_insertion_point(destructor:operations_research.Teacher)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Teacher::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restricted_time_slots_.~RepeatedField();
  _impl_.display_name_.Destroy();
}

void Teacher::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Teacher::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.Teacher)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.restricted_time_slots_.Clear();
  _impl_.display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Teacher::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.Teacher.display_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 restricted_time_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_restricted_time_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_restricted_time_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Teacher::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Teacher)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.Teacher.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // repeated int32 restricted_time_slots = 2;
  {
    int byte_size = _impl_._restricted_time_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_restricted_time_slots(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Teacher)
  return target;
}

size_t Teacher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.Teacher)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 restricted_time_slots = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.restricted_time_slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._restricted_time_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Teacher::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Teacher::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Teacher::GetClassData() const { return &_class_data_; }


void Teacher::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Teacher*>(&to_msg);
  auto& from = static_cast<const Teacher&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.Teacher)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.restricted_time_slots_.MergeFrom(from._impl_.restricted_time_slots_);
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Teacher::CopyFrom(const Teacher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.Teacher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Teacher::IsInitialized() const {
  return true;
}

void Teacher::InternalSwap(Teacher* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.restricted_time_slots_.InternalSwap(&other->_impl_.restricted_time_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Teacher::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[5]);
}

// ===================================================================

class Student::_Internal {
 public:
};

Student::Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.Student)
}
Student::Student(const Student& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Student* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.course_indices_){from._impl_.course_indices_}
    , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.Student)
}

inline void Student::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.course_indices_){arena}
    , /*decltype(_impl_._course_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.display_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Student::~Student() {
  // @@protoc_insertion_point(destructor:operations_research.Student)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Student::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.course_indices_.~RepeatedField();
  _impl_.display_name_.Destroy();
}

void Student::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Student::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.Student)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.course_indices_.Clear();
  _impl_.display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Student::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.Student.display_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 course_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_course_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_course_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Student::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Student)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.Student.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // repeated int32 course_indices = 2;
  {
    int byte_size = _impl_._course_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_course_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Student)
  return target;
}

size_t Student::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.Student)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 course_indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.course_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._course_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Student::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Student::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Student::GetClassData() const { return &_class_data_; }


void Student::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Student*>(&to_msg);
  auto& from = static_cast<const Student&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.Student)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.course_indices_.MergeFrom(from._impl_.course_indices_);
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Student::CopyFrom(const Student& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.Student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Student::IsInitialized() const {
  return true;
}

void Student::InternalSwap(Student* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.course_indices_.InternalSwap(&other->_impl_.course_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Student::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[6]);
}

// ===================================================================

class Room::_Internal {
 public:
};

Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operations_research.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_){}
    , decltype(_impl_.capacity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.capacity_ = from._impl_.capacity_;
  // @@protoc_insertion_point(copy_constructor:operations_research.Room)
}

inline void Room::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_){}
    , decltype(_impl_.capacity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:operations_research.Room)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.display_name_.Destroy();
}

void Room::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.display_name_.ClearToEmpty();
  _impl_.capacity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operations_research.Room.display_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.Room.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // int32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // int32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_capacity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }


void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:operations_research.Room)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  swap(_impl_.capacity_, other->_impl_.capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fcourse_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fcourse_5fscheduling_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::CourseSchedulingModel*
Arena::CreateMaybeMessage< ::operations_research::CourseSchedulingModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::CourseSchedulingModel >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::CourseSchedulingResult*
Arena::CreateMaybeMessage< ::operations_research::CourseSchedulingResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::CourseSchedulingResult >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::ClassAssignment*
Arena::CreateMaybeMessage< ::operations_research::ClassAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::ClassAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::StudentAssignment*
Arena::CreateMaybeMessage< ::operations_research::StudentAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::StudentAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::Course*
Arena::CreateMaybeMessage< ::operations_research::Course >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::Course >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::Teacher*
Arena::CreateMaybeMessage< ::operations_research::Teacher >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::Teacher >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::Student*
Arena::CreateMaybeMessage< ::operations_research::Student >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::Student >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::Room*
Arena::CreateMaybeMessage< ::operations_research::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::Room >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
