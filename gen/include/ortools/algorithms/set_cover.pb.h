// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/algorithms/set_cover.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2falgorithms_2fset_5fcover_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2falgorithms_2fset_5fcover_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ortools/util/int128.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2falgorithms_2fset_5fcover_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2falgorithms_2fset_5fcover_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2falgorithms_2fset_5fcover_2eproto;
namespace operations_research {
class SetCoverProto;
struct SetCoverProtoDefaultTypeInternal;
extern SetCoverProtoDefaultTypeInternal _SetCoverProto_default_instance_;
class SetCoverProto_Subset;
struct SetCoverProto_SubsetDefaultTypeInternal;
extern SetCoverProto_SubsetDefaultTypeInternal _SetCoverProto_Subset_default_instance_;
class SetCoverSolutionResponse;
struct SetCoverSolutionResponseDefaultTypeInternal;
extern SetCoverSolutionResponseDefaultTypeInternal _SetCoverSolutionResponse_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum SetCoverSolutionResponse_Status : int {
  SetCoverSolutionResponse_Status_UNDEFINED = 0,
  SetCoverSolutionResponse_Status_OPTIMAL = 1,
  SetCoverSolutionResponse_Status_FEASIBLE = 2,
  SetCoverSolutionResponse_Status_INFEASIBLE = 3,
  SetCoverSolutionResponse_Status_INVALID = 4,
  SetCoverSolutionResponse_Status_SetCoverSolutionResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SetCoverSolutionResponse_Status_SetCoverSolutionResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SetCoverSolutionResponse_Status_IsValid(int value);
extern const uint32_t SetCoverSolutionResponse_Status_internal_data_[];
constexpr SetCoverSolutionResponse_Status SetCoverSolutionResponse_Status_Status_MIN = static_cast<SetCoverSolutionResponse_Status>(0);
constexpr SetCoverSolutionResponse_Status SetCoverSolutionResponse_Status_Status_MAX = static_cast<SetCoverSolutionResponse_Status>(4);
constexpr int SetCoverSolutionResponse_Status_Status_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
SetCoverSolutionResponse_Status_descriptor();
template <typename T>
const std::string& SetCoverSolutionResponse_Status_Name(T value) {
  static_assert(std::is_same<T, SetCoverSolutionResponse_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return SetCoverSolutionResponse_Status_Name(static_cast<SetCoverSolutionResponse_Status>(value));
}
template <>
inline const std::string& SetCoverSolutionResponse_Status_Name(SetCoverSolutionResponse_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SetCoverSolutionResponse_Status_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool SetCoverSolutionResponse_Status_Parse(absl::string_view name, SetCoverSolutionResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetCoverSolutionResponse_Status>(
      SetCoverSolutionResponse_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SetCoverProto_Subset final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:operations_research.SetCoverProto.Subset) */ {
 public:
  inline SetCoverProto_Subset() : SetCoverProto_Subset(nullptr) {}
  ~SetCoverProto_Subset() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetCoverProto_Subset(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetCoverProto_Subset(const SetCoverProto_Subset& from) : SetCoverProto_Subset(nullptr, from) {}
  inline SetCoverProto_Subset(SetCoverProto_Subset&& from) noexcept
      : SetCoverProto_Subset(nullptr, std::move(from)) {}
  inline SetCoverProto_Subset& operator=(const SetCoverProto_Subset& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCoverProto_Subset& operator=(SetCoverProto_Subset&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCoverProto_Subset& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCoverProto_Subset* internal_default_instance() {
    return reinterpret_cast<const SetCoverProto_Subset*>(
        &_SetCoverProto_Subset_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SetCoverProto_Subset& a, SetCoverProto_Subset& b) { a.Swap(&b); }
  inline void Swap(SetCoverProto_Subset* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCoverProto_Subset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCoverProto_Subset* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SetCoverProto_Subset>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetCoverProto_Subset& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetCoverProto_Subset& from) { SetCoverProto_Subset::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetCoverProto_Subset* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "operations_research.SetCoverProto.Subset"; }

 protected:
  explicit SetCoverProto_Subset(::google::protobuf::Arena* arena);
  SetCoverProto_Subset(::google::protobuf::Arena* arena, const SetCoverProto_Subset& from);
  SetCoverProto_Subset(::google::protobuf::Arena* arena, SetCoverProto_Subset&& from) noexcept
      : SetCoverProto_Subset(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kElementFieldNumber = 2,
    kCostFieldNumber = 1,
  };
  // repeated int32 element = 2 [packed = true];
  int element_size() const;
  private:
  int _internal_element_size() const;

  public:
  void clear_element() ;
  ::int32_t element(int index) const;
  void set_element(int index, ::int32_t value);
  void add_element(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& element() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_element();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_element() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_element();

  public:
  // optional double cost = 1;
  bool has_cost() const;
  void clear_cost() ;
  double cost() const;
  void set_cost(double value);

  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.SetCoverProto.Subset)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> element_;
    mutable ::google::protobuf::internal::CachedSize _element_cached_byte_size_;
    double cost_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2falgorithms_2fset_5fcover_2eproto;
};
// -------------------------------------------------------------------

class SetCoverSolutionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:operations_research.SetCoverSolutionResponse) */ {
 public:
  inline SetCoverSolutionResponse() : SetCoverSolutionResponse(nullptr) {}
  ~SetCoverSolutionResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetCoverSolutionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetCoverSolutionResponse(const SetCoverSolutionResponse& from) : SetCoverSolutionResponse(nullptr, from) {}
  inline SetCoverSolutionResponse(SetCoverSolutionResponse&& from) noexcept
      : SetCoverSolutionResponse(nullptr, std::move(from)) {}
  inline SetCoverSolutionResponse& operator=(const SetCoverSolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCoverSolutionResponse& operator=(SetCoverSolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCoverSolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCoverSolutionResponse* internal_default_instance() {
    return reinterpret_cast<const SetCoverSolutionResponse*>(
        &_SetCoverSolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SetCoverSolutionResponse& a, SetCoverSolutionResponse& b) { a.Swap(&b); }
  inline void Swap(SetCoverSolutionResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCoverSolutionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCoverSolutionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SetCoverSolutionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetCoverSolutionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetCoverSolutionResponse& from) { SetCoverSolutionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetCoverSolutionResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "operations_research.SetCoverSolutionResponse"; }

 protected:
  explicit SetCoverSolutionResponse(::google::protobuf::Arena* arena);
  SetCoverSolutionResponse(::google::protobuf::Arena* arena, const SetCoverSolutionResponse& from);
  SetCoverSolutionResponse(::google::protobuf::Arena* arena, SetCoverSolutionResponse&& from) noexcept
      : SetCoverSolutionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using Status = SetCoverSolutionResponse_Status;
  static constexpr Status UNDEFINED = SetCoverSolutionResponse_Status_UNDEFINED;
  static constexpr Status OPTIMAL = SetCoverSolutionResponse_Status_OPTIMAL;
  static constexpr Status FEASIBLE = SetCoverSolutionResponse_Status_FEASIBLE;
  static constexpr Status INFEASIBLE = SetCoverSolutionResponse_Status_INFEASIBLE;
  static constexpr Status INVALID = SetCoverSolutionResponse_Status_INVALID;
  static inline bool Status_IsValid(int value) {
    return SetCoverSolutionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = SetCoverSolutionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX = SetCoverSolutionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = SetCoverSolutionResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return SetCoverSolutionResponse_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return SetCoverSolutionResponse_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return SetCoverSolutionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSubsetFieldNumber = 3,
    kFingerprintFieldNumber = 6,
    kModelFingerprintFieldNumber = 7,
    kStatusFieldNumber = 1,
    kNumSubsetsFieldNumber = 2,
    kCostFieldNumber = 4,
    kCostLowerBoundFieldNumber = 5,
  };
  // repeated int32 subset = 3 [packed = true];
  int subset_size() const;
  private:
  int _internal_subset_size() const;

  public:
  void clear_subset() ;
  ::int32_t subset(int index) const;
  void set_subset(int index, ::int32_t value);
  void add_subset(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& subset() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_subset();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_subset() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_subset();

  public:
  // optional .operations_research.Int128 fingerprint = 6;
  bool has_fingerprint() const;
  void clear_fingerprint() ;
  const ::operations_research::Int128& fingerprint() const;
  PROTOBUF_NODISCARD ::operations_research::Int128* release_fingerprint();
  ::operations_research::Int128* mutable_fingerprint();
  void set_allocated_fingerprint(::operations_research::Int128* value);
  void unsafe_arena_set_allocated_fingerprint(::operations_research::Int128* value);
  ::operations_research::Int128* unsafe_arena_release_fingerprint();

  private:
  const ::operations_research::Int128& _internal_fingerprint() const;
  ::operations_research::Int128* _internal_mutable_fingerprint();

  public:
  // optional .operations_research.Int128 model_fingerprint = 7;
  bool has_model_fingerprint() const;
  void clear_model_fingerprint() ;
  const ::operations_research::Int128& model_fingerprint() const;
  PROTOBUF_NODISCARD ::operations_research::Int128* release_model_fingerprint();
  ::operations_research::Int128* mutable_model_fingerprint();
  void set_allocated_model_fingerprint(::operations_research::Int128* value);
  void unsafe_arena_set_allocated_model_fingerprint(::operations_research::Int128* value);
  ::operations_research::Int128* unsafe_arena_release_model_fingerprint();

  private:
  const ::operations_research::Int128& _internal_model_fingerprint() const;
  ::operations_research::Int128* _internal_mutable_model_fingerprint();

  public:
  // optional .operations_research.SetCoverSolutionResponse.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  ::operations_research::SetCoverSolutionResponse_Status status() const;
  void set_status(::operations_research::SetCoverSolutionResponse_Status value);

  private:
  ::operations_research::SetCoverSolutionResponse_Status _internal_status() const;
  void _internal_set_status(::operations_research::SetCoverSolutionResponse_Status value);

  public:
  // optional int32 num_subsets = 2;
  bool has_num_subsets() const;
  void clear_num_subsets() ;
  ::int32_t num_subsets() const;
  void set_num_subsets(::int32_t value);

  private:
  ::int32_t _internal_num_subsets() const;
  void _internal_set_num_subsets(::int32_t value);

  public:
  // optional double cost = 4;
  bool has_cost() const;
  void clear_cost() ;
  double cost() const;
  void set_cost(double value);

  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);

  public:
  // optional double cost_lower_bound = 5;
  bool has_cost_lower_bound() const;
  void clear_cost_lower_bound() ;
  double cost_lower_bound() const;
  void set_cost_lower_bound(double value);

  private:
  double _internal_cost_lower_bound() const;
  void _internal_set_cost_lower_bound(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.SetCoverSolutionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> subset_;
    mutable ::google::protobuf::internal::CachedSize _subset_cached_byte_size_;
    ::operations_research::Int128* fingerprint_;
    ::operations_research::Int128* model_fingerprint_;
    int status_;
    ::int32_t num_subsets_;
    double cost_;
    double cost_lower_bound_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2falgorithms_2fset_5fcover_2eproto;
};
// -------------------------------------------------------------------

class SetCoverProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:operations_research.SetCoverProto) */ {
 public:
  inline SetCoverProto() : SetCoverProto(nullptr) {}
  ~SetCoverProto() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetCoverProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetCoverProto(const SetCoverProto& from) : SetCoverProto(nullptr, from) {}
  inline SetCoverProto(SetCoverProto&& from) noexcept
      : SetCoverProto(nullptr, std::move(from)) {}
  inline SetCoverProto& operator=(const SetCoverProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCoverProto& operator=(SetCoverProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCoverProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCoverProto* internal_default_instance() {
    return reinterpret_cast<const SetCoverProto*>(
        &_SetCoverProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SetCoverProto& a, SetCoverProto& b) { a.Swap(&b); }
  inline void Swap(SetCoverProto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCoverProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCoverProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SetCoverProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetCoverProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetCoverProto& from) { SetCoverProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetCoverProto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "operations_research.SetCoverProto"; }

 protected:
  explicit SetCoverProto(::google::protobuf::Arena* arena);
  SetCoverProto(::google::protobuf::Arena* arena, const SetCoverProto& from);
  SetCoverProto(::google::protobuf::Arena* arena, SetCoverProto&& from) noexcept
      : SetCoverProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using Subset = SetCoverProto_Subset;

  // accessors -------------------------------------------------------
  enum : int {
    kSubsetFieldNumber = 1,
    kNameFieldNumber = 2,
    kFingerprintFieldNumber = 3,
  };
  // repeated .operations_research.SetCoverProto.Subset subset = 1;
  int subset_size() const;
  private:
  int _internal_subset_size() const;

  public:
  void clear_subset() ;
  ::operations_research::SetCoverProto_Subset* mutable_subset(int index);
  ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>* mutable_subset();

  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>& _internal_subset() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>* _internal_mutable_subset();
  public:
  const ::operations_research::SetCoverProto_Subset& subset(int index) const;
  ::operations_research::SetCoverProto_Subset* add_subset();
  const ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>& subset() const;
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .operations_research.Int128 fingerprint = 3;
  bool has_fingerprint() const;
  void clear_fingerprint() ;
  const ::operations_research::Int128& fingerprint() const;
  PROTOBUF_NODISCARD ::operations_research::Int128* release_fingerprint();
  ::operations_research::Int128* mutable_fingerprint();
  void set_allocated_fingerprint(::operations_research::Int128* value);
  void unsafe_arena_set_allocated_fingerprint(::operations_research::Int128* value);
  ::operations_research::Int128* unsafe_arena_release_fingerprint();

  private:
  const ::operations_research::Int128& _internal_fingerprint() const;
  ::operations_research::Int128* _internal_mutable_fingerprint();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.SetCoverProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::SetCoverProto_Subset > subset_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::operations_research::Int128* fingerprint_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2falgorithms_2fset_5fcover_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetCoverProto_Subset

// optional double cost = 1;
inline bool SetCoverProto_Subset::has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetCoverProto_Subset::clear_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SetCoverProto_Subset::cost() const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverProto.Subset.cost)
  return _internal_cost();
}
inline void SetCoverProto_Subset::set_cost(double value) {
  _internal_set_cost(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:operations_research.SetCoverProto.Subset.cost)
}
inline double SetCoverProto_Subset::_internal_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cost_;
}
inline void SetCoverProto_Subset::_internal_set_cost(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_ = value;
}

// repeated int32 element = 2 [packed = true];
inline int SetCoverProto_Subset::_internal_element_size() const {
  return _internal_element().size();
}
inline int SetCoverProto_Subset::element_size() const {
  return _internal_element_size();
}
inline void SetCoverProto_Subset::clear_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.element_.Clear();
}
inline ::int32_t SetCoverProto_Subset::element(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverProto.Subset.element)
  return _internal_element().Get(index);
}
inline void SetCoverProto_Subset::set_element(int index, ::int32_t value) {
  _internal_mutable_element()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SetCoverProto.Subset.element)
}
inline void SetCoverProto_Subset::add_element(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_element()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SetCoverProto.Subset.element)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SetCoverProto_Subset::element() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SetCoverProto.Subset.element)
  return _internal_element();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SetCoverProto_Subset::mutable_element()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SetCoverProto.Subset.element)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_element();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
SetCoverProto_Subset::_internal_element() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.element_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SetCoverProto_Subset::_internal_mutable_element() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// SetCoverProto

// repeated .operations_research.SetCoverProto.Subset subset = 1;
inline int SetCoverProto::_internal_subset_size() const {
  return _internal_subset().size();
}
inline int SetCoverProto::subset_size() const {
  return _internal_subset_size();
}
inline void SetCoverProto::clear_subset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subset_.Clear();
}
inline ::operations_research::SetCoverProto_Subset* SetCoverProto::mutable_subset(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.SetCoverProto.subset)
  return _internal_mutable_subset()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>* SetCoverProto::mutable_subset()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SetCoverProto.subset)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_subset();
}
inline const ::operations_research::SetCoverProto_Subset& SetCoverProto::subset(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverProto.subset)
  return _internal_subset().Get(index);
}
inline ::operations_research::SetCoverProto_Subset* SetCoverProto::add_subset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::SetCoverProto_Subset* _add = _internal_mutable_subset()->Add();
  // @@protoc_insertion_point(field_add:operations_research.SetCoverProto.subset)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>& SetCoverProto::subset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SetCoverProto.subset)
  return _internal_subset();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>&
SetCoverProto::_internal_subset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subset_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::SetCoverProto_Subset>*
SetCoverProto::_internal_mutable_subset() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.subset_;
}

// optional string name = 2;
inline bool SetCoverProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetCoverProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetCoverProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCoverProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.SetCoverProto.name)
}
inline std::string* SetCoverProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.SetCoverProto.name)
  return _s;
}
inline const std::string& SetCoverProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SetCoverProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SetCoverProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SetCoverProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.SetCoverProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SetCoverProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.SetCoverProto.name)
}

// optional .operations_research.Int128 fingerprint = 3;
inline bool SetCoverProto::has_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fingerprint_ != nullptr);
  return value;
}
inline const ::operations_research::Int128& SetCoverProto::_internal_fingerprint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::Int128* p = _impl_.fingerprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::Int128&>(::operations_research::_Int128_default_instance_);
}
inline const ::operations_research::Int128& SetCoverProto::fingerprint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverProto.fingerprint)
  return _internal_fingerprint();
}
inline void SetCoverProto::unsafe_arena_set_allocated_fingerprint(::operations_research::Int128* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fingerprint_);
  }
  _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.SetCoverProto.fingerprint)
}
inline ::operations_research::Int128* SetCoverProto::release_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::Int128* released = _impl_.fingerprint_;
  _impl_.fingerprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::Int128* SetCoverProto::unsafe_arena_release_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.SetCoverProto.fingerprint)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::Int128* temp = _impl_.fingerprint_;
  _impl_.fingerprint_ = nullptr;
  return temp;
}
inline ::operations_research::Int128* SetCoverProto::_internal_mutable_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fingerprint_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::operations_research::Int128>(GetArena());
    _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(p);
  }
  return _impl_.fingerprint_;
}
inline ::operations_research::Int128* SetCoverProto::mutable_fingerprint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::operations_research::Int128* _msg = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:operations_research.SetCoverProto.fingerprint)
  return _msg;
}
inline void SetCoverProto::set_allocated_fingerprint(::operations_research::Int128* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fingerprint_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.SetCoverProto.fingerprint)
}

// -------------------------------------------------------------------

// SetCoverSolutionResponse

// optional .operations_research.SetCoverSolutionResponse.Status status = 1;
inline bool SetCoverSolutionResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetCoverSolutionResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::operations_research::SetCoverSolutionResponse_Status SetCoverSolutionResponse::status() const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.status)
  return _internal_status();
}
inline void SetCoverSolutionResponse::set_status(::operations_research::SetCoverSolutionResponse_Status value) {
  _internal_set_status(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:operations_research.SetCoverSolutionResponse.status)
}
inline ::operations_research::SetCoverSolutionResponse_Status SetCoverSolutionResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::SetCoverSolutionResponse_Status>(_impl_.status_);
}
inline void SetCoverSolutionResponse::_internal_set_status(::operations_research::SetCoverSolutionResponse_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = value;
}

// optional int32 num_subsets = 2;
inline bool SetCoverSolutionResponse::has_num_subsets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SetCoverSolutionResponse::clear_num_subsets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_subsets_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SetCoverSolutionResponse::num_subsets() const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.num_subsets)
  return _internal_num_subsets();
}
inline void SetCoverSolutionResponse::set_num_subsets(::int32_t value) {
  _internal_set_num_subsets(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:operations_research.SetCoverSolutionResponse.num_subsets)
}
inline ::int32_t SetCoverSolutionResponse::_internal_num_subsets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_subsets_;
}
inline void SetCoverSolutionResponse::_internal_set_num_subsets(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_subsets_ = value;
}

// repeated int32 subset = 3 [packed = true];
inline int SetCoverSolutionResponse::_internal_subset_size() const {
  return _internal_subset().size();
}
inline int SetCoverSolutionResponse::subset_size() const {
  return _internal_subset_size();
}
inline void SetCoverSolutionResponse::clear_subset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subset_.Clear();
}
inline ::int32_t SetCoverSolutionResponse::subset(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.subset)
  return _internal_subset().Get(index);
}
inline void SetCoverSolutionResponse::set_subset(int index, ::int32_t value) {
  _internal_mutable_subset()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SetCoverSolutionResponse.subset)
}
inline void SetCoverSolutionResponse::add_subset(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_subset()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SetCoverSolutionResponse.subset)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SetCoverSolutionResponse::subset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SetCoverSolutionResponse.subset)
  return _internal_subset();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SetCoverSolutionResponse::mutable_subset()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SetCoverSolutionResponse.subset)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_subset();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
SetCoverSolutionResponse::_internal_subset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subset_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SetCoverSolutionResponse::_internal_mutable_subset() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.subset_;
}

// optional double cost = 4;
inline bool SetCoverSolutionResponse::has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SetCoverSolutionResponse::clear_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SetCoverSolutionResponse::cost() const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.cost)
  return _internal_cost();
}
inline void SetCoverSolutionResponse::set_cost(double value) {
  _internal_set_cost(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:operations_research.SetCoverSolutionResponse.cost)
}
inline double SetCoverSolutionResponse::_internal_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cost_;
}
inline void SetCoverSolutionResponse::_internal_set_cost(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_ = value;
}

// optional double cost_lower_bound = 5;
inline bool SetCoverSolutionResponse::has_cost_lower_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SetCoverSolutionResponse::clear_cost_lower_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_lower_bound_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SetCoverSolutionResponse::cost_lower_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.cost_lower_bound)
  return _internal_cost_lower_bound();
}
inline void SetCoverSolutionResponse::set_cost_lower_bound(double value) {
  _internal_set_cost_lower_bound(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:operations_research.SetCoverSolutionResponse.cost_lower_bound)
}
inline double SetCoverSolutionResponse::_internal_cost_lower_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cost_lower_bound_;
}
inline void SetCoverSolutionResponse::_internal_set_cost_lower_bound(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_lower_bound_ = value;
}

// optional .operations_research.Int128 fingerprint = 6;
inline bool SetCoverSolutionResponse::has_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fingerprint_ != nullptr);
  return value;
}
inline const ::operations_research::Int128& SetCoverSolutionResponse::_internal_fingerprint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::Int128* p = _impl_.fingerprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::Int128&>(::operations_research::_Int128_default_instance_);
}
inline const ::operations_research::Int128& SetCoverSolutionResponse::fingerprint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.fingerprint)
  return _internal_fingerprint();
}
inline void SetCoverSolutionResponse::unsafe_arena_set_allocated_fingerprint(::operations_research::Int128* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fingerprint_);
  }
  _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.SetCoverSolutionResponse.fingerprint)
}
inline ::operations_research::Int128* SetCoverSolutionResponse::release_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::Int128* released = _impl_.fingerprint_;
  _impl_.fingerprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::unsafe_arena_release_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.SetCoverSolutionResponse.fingerprint)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::Int128* temp = _impl_.fingerprint_;
  _impl_.fingerprint_ = nullptr;
  return temp;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::_internal_mutable_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fingerprint_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::operations_research::Int128>(GetArena());
    _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(p);
  }
  return _impl_.fingerprint_;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::mutable_fingerprint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::operations_research::Int128* _msg = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:operations_research.SetCoverSolutionResponse.fingerprint)
  return _msg;
}
inline void SetCoverSolutionResponse::set_allocated_fingerprint(::operations_research::Int128* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fingerprint_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.SetCoverSolutionResponse.fingerprint)
}

// optional .operations_research.Int128 model_fingerprint = 7;
inline bool SetCoverSolutionResponse::has_model_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_fingerprint_ != nullptr);
  return value;
}
inline const ::operations_research::Int128& SetCoverSolutionResponse::_internal_model_fingerprint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::Int128* p = _impl_.model_fingerprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::Int128&>(::operations_research::_Int128_default_instance_);
}
inline const ::operations_research::Int128& SetCoverSolutionResponse::model_fingerprint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SetCoverSolutionResponse.model_fingerprint)
  return _internal_model_fingerprint();
}
inline void SetCoverSolutionResponse::unsafe_arena_set_allocated_model_fingerprint(::operations_research::Int128* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_fingerprint_);
  }
  _impl_.model_fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.SetCoverSolutionResponse.model_fingerprint)
}
inline ::operations_research::Int128* SetCoverSolutionResponse::release_model_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::Int128* released = _impl_.model_fingerprint_;
  _impl_.model_fingerprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::unsafe_arena_release_model_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.SetCoverSolutionResponse.model_fingerprint)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::Int128* temp = _impl_.model_fingerprint_;
  _impl_.model_fingerprint_ = nullptr;
  return temp;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::_internal_mutable_model_fingerprint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.model_fingerprint_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::operations_research::Int128>(GetArena());
    _impl_.model_fingerprint_ = reinterpret_cast<::operations_research::Int128*>(p);
  }
  return _impl_.model_fingerprint_;
}
inline ::operations_research::Int128* SetCoverSolutionResponse::mutable_model_fingerprint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::operations_research::Int128* _msg = _internal_mutable_model_fingerprint();
  // @@protoc_insertion_point(field_mutable:operations_research.SetCoverSolutionResponse.model_fingerprint)
  return _msg;
}
inline void SetCoverSolutionResponse::set_allocated_model_fingerprint(::operations_research::Int128* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.model_fingerprint_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.model_fingerprint_ = reinterpret_cast<::operations_research::Int128*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.SetCoverSolutionResponse.model_fingerprint)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::SetCoverSolutionResponse_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::SetCoverSolutionResponse_Status>() {
  return ::operations_research::SetCoverSolutionResponse_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2falgorithms_2fset_5fcover_2eproto_2epb_2eh
